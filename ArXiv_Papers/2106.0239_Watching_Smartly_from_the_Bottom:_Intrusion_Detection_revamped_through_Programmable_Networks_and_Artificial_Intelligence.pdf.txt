1
Watching Smartly from the Bottom: Intrusion Detection revamped through Programmable
Networks and Artificial Intelligence
Sergio Armando Gutie´rrez, John Willian Branch, Luciano Paschoal Gaspary, Juan Felipe Botero

arXiv:2106.00239v1 [cs.NI] 1 Jun 2021

Abstract--A recent research line has explored the possibility of leveraging functionalities of Programmable Data Planes to offload part of Machine Learning algorithms to the data plane, which might contribute to increase their accuracy and responsiveness by having a more detailed visibility of the traffic. This approach introduces a significant opportunity for evolution in the critical field of Intrusion Detection. In this paper, we discuss how Programmable Data Planes might complement different stages of an Intrusion Detection System based on Machine Learning. We present two use cases that make evident the feasibility of this approach and highlight aspects that must be considered when addressing the non straightforward task of deploying solutions leveraging data-plane functionalities.
I. INTRODUCTION
T HE emergence of the Programmable Data Planes (PDPs) concept has represented an outstanding advance in the complete realization of the Software Defined Networking (SDN) Paradigm. The capacity of influencing Forwarding Device (FD) behavior via abstractions such as programming languages is an idea that has been explored through different initiatives proposed by industry and academia. An important milestone in the evolution of network programmability was the development of OpenFlow as an implementation of SDN. However in traditional SDN, the network operation is still constrained to the set of protocols
S.A. Gutie´rrez is Researcher and Lecturer at UNAULA, Medell´in, Colombia. E-mail: sergio.gutierrezbe@unaula.edu.co
J.W. Branch is Full Professor at UNAL, Medell´in, Colombia. E-mail: jwbranch@unal.edu.co
L. Gaspary is Associate Professor at UFRGS, Porto Alegre, Brazil. E-mail: paschoal@ufrgs.br
J.F.Botero is Associate Professor at UDEA, Medell´in, Colombia. E-mail: juanf.botero@udea.edu.co
Manuscript received October 1, 2020; revised October 1, 2020.

and headers supported by the hardware of the FDs. Therefore, the definition of custom functions for packet processing becomes very difficult.
Recently, the concept of PDPs has emerged to overcome these constraints by allowing going beyond the definition of flow rules. PDPs enable a complete control of the network behavior, from the applications to the packet processing within the FDs, including the definition and parsing/deparsing of custom headers. It provides an unprecedented opportunity to develop new features within the FDs and revisiting existing functions for network management [1]. P4 is currently the de-facto standard language for describing how network packets should be processed.
One of the areas that can take advantage of PDP/P4 is network security. Particularly, Intrusion Detection Systems (IDSs) can be revamped by implementing them as efficient functions deployed at the data plane, capable to react promptly to network anomalies that might represent threats. IDSs typically depend on the collection of traffic features which are later fed into sophisticated systems mostly based on Machine Learning (ML) algorithms. ML has been successfully used in network security due to its capacity to detect and discover patterns and behaviors previously unseen in the network traffic. Most of the approaches for security developed in the context of SDN and based on ML have been implemented at the control plane despite the issues associated to accuracy and high overhead they might introduce [2].
The features introduced by PDPs make possible to consider a new landscape for security solutions based on ML, by conceiving offloading part of the algorithms to the FDs. Thus, more accurate and responsive solutions can be deployed. Delegating part of the functions to the data plane might also

2

help to reduce the overhead at the control plane. Nevertheless, the decision regarding how much of the functions should be offloaded to the data plane is not trivial [3] because the computation capabilities of FDs are limited, and an excessive offloading of functionalities might hinder the maximum throughput in packet forwarding.
In this paper, our main contribution is presenting a critical discussion on the challenges introduced when intersecting Programmable Data Planes and Artificial Intelligence (AI) for intrusion detection. We focus on devising how to leverage the functionalities offered by PDPs in the implementation of AI and specially ML algorithms. We specially try to address the question regarding how much of the operations of the algorithms is feasible to be offloaded to the FDs.
II. MACHINE LEARNING AT THE PROGRAMMABLE DATA PLANE FOR IMPROVED
INTRUSION DETECTION
ML has become an important milestone in several kinds of cyber security solutions due to its ability to extract, in a timely fashion, anomalies and patterns that might be symptom of internal or external attacks against the infrastructure. These solutions are usually integrated by network and host security components, minimally including firewalls, anti viruses and Intrusion Detection Systems (IDSs) [4].
IDSs are being actively revisited in the context of programmable networks. Most of the solutions developed for implementing IDSs have been deployed as applications running in the control plane. However, this approach for the implementation of IDSs has two main drawbacks. First, the set of traffic features derived either from standard counters (e.g., those available in current versions of OpenFlow) or, in extreme situations, via the PACKET_IN events, are insufficient to get reasonable accuracy in ML algorithms. Second, ML algorithms are typically compute-intensive tasks, which, if not properly designed/deployed, might introduce control plane overhead and disrupt the correct operation of the network [5].
As we previously introduced, the advent of PDP makes possible the offloading of some functionalities to the data plane. This is an strategy that might help to overcome the limitations associated to scarce information as input while reducing the overhead

of the control plane. Next, we present an overview of the stages of an ML-based IDS, and we outline how PDPs can be leveraged to improve some of these stages through custom packet processing and the offloading of certain operations [4]. Figure 1 presents the sequential view and relationships of these typical stages.
Data Collection. PDPs extend the possibilities for data collection beyond the standard statistics available in the FDs. Custom statistics can be introduced, and some stateful processing can be included within FDs, which might even indicate events with high value for intrusion detection tasks [6]. Despite the limitations inherent to the computing power and programming primitives available in programmable FDs, there are two functionalities that can be leveraged to implement efficient data collection for ML algorithms: Custom packet parsing and data aggregation. Custom Packet parsing allows processing headers that can be used to store personalized information and statistics. These headers enable differentiated processing and information gathering within FDs, or applying custom hash functions in order to distinguish specifics sets of packets [7]. On the other hand, data aggregation helps to reduce the amount of data that needs to be transmitted in the network from FDs to Control Plane, for the execution of complex operations there [8].
Data Processing. Recent proposals introduce the concept of In-Network processing as a service, where the implementation of the mentioned operations in data plane becomes available to be used by high level ML or data-analytics frameworks [9], [10]. Other proposals introduce the notion of queries that trigger the joint collection and preliminary analysis of data in order to produce statistics that can be later delivered to higher level processing mechanisms [7]. The main notion behind these approaches is the fact that features of PDPs such as programmable parsing, state storing, custom hashing and the flexibility of match/action tables allow not only measurements and counts, but also performing analysis in parallel to the data collection.
Model Construction. The literature presents several approaches to leverage the features available in PDP for the implementation of different algorithms considering the computational constraints of programmable FDs [3]. These proposals include the use of switch registers to implement bit-based value storage and arithmetic which might be even useful

3

Fig. 1. Stages of a ML system applied to Network Management domains (e.g. Intrusion Detection) [4]

to implement Neural Networks [11] and match action and long prefix match tables with comparison operators for the implementation of algorithms such as decision trees, support vector machines and Naive Bayes classifiers. This approach reduces the amount information that needs to be forwarded towards control plane (e.g. PACKET_IN events) which contributes to diminish the control channel overhead [12] while increases the accuracy and responsiveness [3], [13]. In addition to the direct implementation within the FDs, another approach to be followed is cooperating in the training of large scale models via local analysis of metrics. This approach is called Federated Learning, and can be leveraged for the training of complex models such as Deep Neural Networks [11].
Model Validation. Validation is a high level task which involves extensive analysis and feedback provided by human experts. Hence, PDPs do not have a direct intervention in the tasks associated to this stage. However, functionalities such as Complex Event Processing [6] and query-driven telemetry [7] are helpful to provide insights to debug situations of low accuracy and poor performance of the ML algorithms.
Deployment. This operation must consider the particularities involved in the development of the algorithms. For example, the availability in a given hardware architecture of the type of tables required, or the amount of registers that may be used to store packet state are aspects that must be validated [11], [13]. For a detailed discussion on the issues asso-

ciated to the deployment of ML algorithms within FDs, please refer to [13] and [3].
Result Analysis. Functionalities such as InBand Network Telemetry, which relies on PDP features [7], and Complex Event Processing [6] might provide important insights for this stage. Also, the definition of thresholds for specific features and time intervals [14], and even the support for query-driven information collection might contribute to assess the effectiveness of the algorithms while allowing some degree of data analysis.
Table I summarizes our insights regarding where to implement the particular functions, either in the control or the data plane and the Machine Learning Algorithm(s) that might be involved.
The processing capabilities available nowadays in programmable devices are mainly useful for data collection and data processing. Currently, most of the functionalities associated to ML algorithms such as Cumulative Summation Chart Control (CUSUM), Support Vector Machines (SVM) K-Nearest Neighbors (KNN), Principal Component Analysis (PCA), Basic Neural Networks (NN) or Recurrent Neural Networks (RNN) tend to be implemented within the control plane. However, the implementation of ML algorithms within the forwarding devices can be expected in a near future, by taking advantage of more robust hardware platforms for these devices.
III. USE CASES
In the previous section, we presented an overview about how PDPs can contribute in the implementation of some of the stages of a system based on

4

TABLE I PLACE OF DEPLOYMENT FOR FUNCTIONALITIES ASSOCIATED TO AN ML-BASED IDS

Stage Data Collection Data Collection Data Collection Data Processing Data Processing Data Processing Model Construction Model Validation Model Validation

Functionality Custom statistics and metrics
Header hashing Custom packet parsing
Partial state storing Threshold comparison In-network processing as a Service Complex Arithmetic Complex Event Processing Query-Driven Telemetry

Where to implement Data Plane Data Plane Data Plane Data Plane Data Plane
Control Plane Control Plane Control Plane Control Plane

ML algorithm CUSUM Sketches KNN Sketches
CUSUM,SVM SVM,KNN,PCA NN,SVM,RNN
RNN Sketches,RNN

Related Work [6] [7]
[9], [10] [13] [14] [9]
[8], [11], [15] [6] [7]

ML algorithms applied to the domain of IDS. In this section, we present two use cases which exemplify how to specifically leverage functionalities of PDPs in the context of security solutions based on these ML algorithms.

A. Offloading Data Collection and Processing in DDoS attack Detection to Programmable Data Planes

DDoS attack detection in traditional SDN environments introduces two design challenges: 1) the control plane is overloaded due to the continuous polling of network traffic information as well as the calculation and classification of the feature set; and 2) OpenFlow cannot obtain specific features fundamental for DDoS detection (e.g. per-flow packet inter-arrival times and packet payload sizes). These two challenges can be overcome by offloading some of the ML-based detection stages from the control plane to P4-based PDP.
Fig. 2 shows a DDoS detection network architecture where some ML stages are offloaded from the control plane to the programmable data plane that implements a time window-based scheme. During each window, it simultaneously: i) collects new flow information; i.e. it performs the Data Collection stage mentioned in Section II by extracting specific per-flow information needed to build the feature set for the attack detection, and ii) reports the information collected in the previous window to the control plane; i.e. it carries out the Data Processing stage by pre-processing the needed per-flow features and forwarding them to the control plane that, in turn, easily generates the feature set to feed the MLbased detection algorithm.

Fig. 2. ML-based DDoS attack detection architecture coordinating control and programmable data planes [12]
When a new packet arrives to the FD, the statistics collector extracts the packet information building specific flow descriptors using just the arithmetic operations available in P4. Then, these descriptors are sent to the control plane for the generation of the feature set (detailed information of the descriptors is provided in [12]). Once the time window expires, the pipeline handler checks if the statistics collector contains new flow information to report and, if this is the case, the information is forwarded to the information reporter which generates a report packet with the specific descriptors of the flows that changed during the time window. Finally, the report packet is forwarded to the control plane using the P4Runtime interface.
The control plane is composed of an SDN controller connected to a ML-based traffic classification application. The feature set composition component

5

parses the custom header of the packet that arrived from the data plane and builds a tuple with the resulting per-flow feature set. Finally, this set is received by the classifier application that executes an already loaded ML model which performs binary classification (i.e. determines if each received tuple belongs either to DDoS class or benign class).
In this approach, we implemented two ML classifiers for different time window duration: Random Forest (RF) and K-Nearest Neighbor (KNN). The experimental evaluation consisted on reproducing a DDoS attack contained on a state-of-the-art dataset. The experimental environment was built on mininet, using the reference P4 Switch implementation (BMV2) [1]. The comparison of the two classifiers used showed that KNN achieved better performance than RF. Obtained results led to an accuracy from 93% to 96% for the different time windows, which is within the upper range seen in the literature.
Besides reaching high accuracy, the offloading of the data collection and processing stages to the PDP provides two main advantages. 1) A configurable time window forwarding just one report packet to the control plane removes the need of duplicating packets and send them to external IDS. It also prevents the continuous transfer of OpenFlow statistics from the FD to the control plane, therefore reducing traffic overload in the control channel. 2) Data plane programmability allows to extract just the feature descriptors needed by the control plane to build the feature set in order to perform the ML-based DDoS attack detection. In contrast, traditional SDNOpenFlow collects statistics that are useless to detect DDoS attacks. Besides, OpenFlow is unable to collect some features that are paramount to classify DDoS attacks with ML-based algorithms (please see [12] for further details).
B. Offloading Real-Time DDoS Attack Detection to Programmable Data Planes
There are situations (e.g., in service provider core networks) in which the fast, real-time detection of an intrusion is a primary requirement, even if sacrificing (a little of the) accuracy. Next, we briefly present a mechanism in which we devise a lightweight entropy-based anomaly detection technique and offload it entirely to a programmable forwarding device based on P4 [14].

Source IP
Arriving Packets

Entropy Estimation

Observation Window
Dest. IP

Entropy Estimation

Traffic Characterization
Traffic Characterization

Anomaly Detection

Alarm

Data Plane's P4 Forwarding Device

Fig. 3. In-network mechanism for real-time DDoS attack detection [14]

Figure 3 illustrates the main architectural components of the mechanism. It implements a processing pipeline to calculate the entropies of source and destination IP addresses of packets arriving at an FD. They are estimated for consecutive packets of the incoming stream, named observation windows. Upon completing each window, the traffic characterization components (for source and destination IPs) consume the entropy values to produce a legitimate traffic model. The anomaly detection component calculates detection thresholds as functions of this model, issuing an attack alarm when the last entropy estimates exceed them.
Given the restrictions of the primitive set of operations provided by P4, a simplified design was compulsory in several circumstances. For example, we employed customized count sketches to approximate the frequencies of different IP addresses. To solve compute-intensive arithmetic functions, we used longest-prefix match (LPM) lookup tables. The lack of procedures to iterate over data structures required the design of incremental, per-packet computation methods. Such adjustments played a vital role in enabling the offload of several ML system stages to the data plane (see Figure 1), such as data collection and processing (entropy values), model construction (legitimate traffic), and analysis (threshold-based alarming).
A set of experiments for assessing the efficacy and efficiency of our proposal was performed on a software-based P4 infrastructure. These experiments used datasets from CAIDA representing normal and DDoS traffic. The DDoS traffic data set is built in such a way that it contains only attack-related traces, and has been used in several high impact papers. Regarding the use of a software-based infrastructure, we consider that it does not limit our

6

assessment, since accuracy and resource utilization are expected to be equivalent regardless the actual hardware target.
For low-intensity attacks, e.g., occupying a fraction of 4% of the whole traffic, the detection accuracy exceeds 90%. Our approach requires a few hundred milliseconds to detect attacks since it perform per-packet analysis (as opposed to sampling). We refer the reader to [14] for a detailed description of this work.
IV. DISCUSSION AND INSIGHTS
The implementations described above are by themselves evidence on the feasibility of achieving the effective combination of ML and PDPs for network security solutions. However, from the analysis of these possibilities, the aforementioned use cases, and considering the examples of solutions available in the literature, there are several points that we would like to highlight since they introduce important and relevant insights leading to further research lines.
Executing Complex Operations on the Data Plane. The set of mathematical operations supported by programmable switches is limited. While implementing addition or logical bit shift operations is easy, general mathematical operations such as those commonly involved in ML algorithms (e.g., square roots, divisions and in general floating point arithmetic) can not be implemented. An approach proposed in the literature to overcome this situation is using the tables within the switch to store values computed externally, corresponding to hyperparameters of the ML algorithms upon their training. Thus, the part of the algorithms running at the FDs consists of matching, conditional and logic operators, which are naturally available within the devices [13], [14].
Lightweight ML Algorithms in PDPs. Due to resource limitation, the algorithms to be implemented within the FDs need to be lightweight. An strategy to simplify the algorithms is the one previously mentioned of using look up tables. The tables would contain the results of complex calculations that are performed outside the FDs (e.g., at the control plane). This could be combined with additional strategies such as the simplification of data representation for the ML algorithms. Binarized Neural Networks are an example, in which

the weights associated to the Neural Network are replaced by binary bits stored within registers in the FDs [11].
Centralized vs. Distributed PDP-based ML Systems. A centralized operation would be the trivial scenario by taking advantage of the local traffic visibility. However, for complex ML algorithms (e.g., Deep Neural Networks), this would introduce an important overhead in operations such as feature extraction. An approach to overcome this overhead is Federated Learning. In this approach, FDs have a copy of the trained ML model, and improve them according to their local observation. The adjusted model is sent back to the control plane, where it is combined with the information provided by other FDs, and it is further distributed to all the devices [11].
Scope of decisions according to the amount of information. PDPs enable data collection in local contexts via the observation of traffic crossing the forwarding device. This capability allows quick reaction upon the detection of anomalies or shifts in pattern traffics which might be symptom of threats or ongoing attacks. However, due to the locality of this observation, the collected information can not be leveraged for strategic decisions by itself. This information needs to be collected and somehow integrated in more comprehensive analysis in order to make strategic decisions based on a global view of the acquired information [8], [11].
What to Execute at the Data and Control Planes? The literature has shown two main different approaches where the functionalities of programmable FDs make feasible the implementation of simple and even complex ML algorithms. The first approach mainly consists in implementing simple tasks such as counting, classification, aggregation and grouping. Depending on the complexity of the primitive operations involved (e.g. arithmetic), the implementation might be complete or partially supported with the external execution of those operations not available within the FD [11]­[14]. The second approach consists in offering the operations available in the FD as services which can be invoked from the Control Plane. Hence, these operations can be leveraged from complex algorithms, offloading the low level and simpler tasks to the FD while leaving the more complex operations to be performed at control plane. This approach reduces the overhead by avoiding excessive information exchange

7

between control and data plane [7], [9].
V. CONCLUSIONS
In this paper, we have discussed the contributions that PDPs bring to the development of IDS solutions based on ML algorithms. In the presented use cases we showed the implementation of traditional ML algorithms such as KNN. However, more complex and state-of-the-art solutions such as Deep Neural Networks can also leverage PDPs. Initial efforts on this trend can be observed on the interest of this topic evident in different high quality research venues such as the NETAI Workshop which is part of the SIGCOMM conference, the ACM HotNETS workshop, and IEEE IM Conference, among others. Although data-plane functionalities provide more sophisticated possibilities, implementing functions at forwarding devices is a non-trivial task that needs to be carefully performed to explore the advantages while preserving high performance in packet forwarding.
ACKNOWLEDGMENT
This paper has been supported by the project "Red Tema´tica CYTED 519RT0580" funded by the Ibero-American Science and Technology Program CYTED.
REFERENCES
[1] W. L. da Costa Cordeiro, J. A. Marques, and L. P. Gaspary, "Data plane programmability beyond openflow: Opportunities and challenges for network and service operations and management," Journal of Network and Systems Management, vol. 25, no. 4, pp. 784­818, 2017.
[2] J. Xie, F. R. Yu, T. Huang, R. Xie, J. Liu, C. Wang, and Y. Liu, "A survey of machine learning techniques applied to software defined networking (sdn): Research issues and challenges," IEEE Communications Surveys & Tutorials, vol. 21, no. 1, pp. 393­430, 2018.
[3] D. R. Ports and J. Nelson, "When should the network be the computer?" in Proceedings of the Workshop on Hot Topics in Operating Systems, 2019, pp. 209­215.
[4] D. C. Le and N. Zincir-Heywood, "A frontier: Dependable, reliable and secure machine learning for network/system management," Journal of Network and Systems Management, pp. 1­23, 2020.
[5] A. Binbusayyis and T. Vaiyapuri, "Identifying and benchmarking key features for cyber intrusion detection: An ensemble approach," IEEE Access, vol. 7, pp. 106 495­106 513, 2019.
[6] T. Kohler, R. Mayer, F. Du¨rr, M. Maaß, S. Bhowmik, and K. Rothermel, "P4cep: Towards in-network complex event processing," in Proceedings of the 2018 Morning Workshop on In-Network Computing, 2018, pp. 33­38.

[7] A. Gupta, R. Harrison, M. Canini, N. Feamster, J. Rexford, and W. Willinger, "Sonata: Query-driven streaming network telemetry," in Proceedings of the 2018 Conference of the ACM Special Interest Group on Data Communication, 2018, pp. 357­ 371.
[8] A. Sapio, M. Canini, C.-Y. Ho, J. Nelson, P. Kalnis, C. Kim, A. Krishnamurthy, M. Moshref, D. R. Ports, and P. Richta´rik, "Scaling distributed machine learning with in-network aggregation," arXiv preprint arXiv:1903.06701, 2019.
[9] C. Mustard, F. Ruffy, A. Gakhokidze, I. Beschastnikh, and A. Fedorova, "Jumpgate: In-network processing as a service for data analytics," in 11th USENIX Workshop on Hot Topics in Cloud Computing (HotCloud 19), 2019.
[10] A. Sapio, I. Abdelaziz, A. Aldilaijan, M. Canini, and P. Kalnis, "In-network computation is a dumb idea whose time has come," in Proceedings of the 16th ACM Workshop on Hot Topics in Networks, 2017, pp. 150­156.
[11] Q. Qin, K. Poularakis, K. K. Leung, and L. Tassiulas, "Linespeed and scalable intrusion detection at the network edge via federated learning," in 2020 IFIP Networking Conference (Networking). IEEE, 2020, pp. 352­360.
[12] S. G. Mac´ias, L. P. Gaspary, and J. F. Botero, "Oracle: Collaboration of data and control planes to detect ddos attacks," 2020, [arXiv preprint arXiv:2009.10798, September 2020].
[13] Z. Xiong and N. Zilberman, "Do switches dream of machine learning? toward in-network classification," in Proceedings of the 18th ACM Workshop on Hot Topics in Networks, 2019, pp. 25­33.
[14] A^ . C. Lapolli, J. A. Marques, and L. P. Gaspary, "Offloading real-time ddos attack detection to programmable data planes," in 2019 IFIP/IEEE Symposium on Integrated Network and Service Management (IM). IEEE, 2019, pp. 19­27.
[15] B. Lewis, M. Broadbent, and N. Race, "P4id: P4 enhanced intrusion detection," in 2019 IEEE Conference on Network Function Virtualization and Software Defined Networks (NFVSDN). IEEE, 2019, pp. 1­4.
Sergio Armando Gutie´rrez Received his PhD in Computer Science from Universidad Nacional de Colombia, Medell´in in 2018. He is currently full time lecturer at Universidad Auto´noma Latinoamericana. His research interests include computer networks, security in computer networks, , programmable devices and application of machine learning to computer networks. ORCID: 0000-0003-28804601 Luciano Paschoal Gaspary received his Ph.D. in Computer Science from Universidade Federal do Rio Grande do Sul, Brazil in 2002. He is currently Deputy Dean and Associate Professor at the Institute of Informatics at UFRGS. His research interests include computer networks, network management, and computer system security. ORCID: 0000-0002-7561-5582 Juan Felipe Botero received his Ph.D. degree in Telematics engineering from Universidad Te´cnica de Catalun~a, Spain, in 2013. He is an Associated Professor with the Electronics and Telecommunications Engineering Department at Universidad de Antioquia, Colombia. His main research interests include quality of service, software defined networking, network virtualization, and resource allocation. ORCID: 0000-0002-7072-8924 John Willian Branch received his PhD in Systems Engineering in 2007 from Universidad Nacional de Colombia, Medell´in. He is a full professor at the Computing and Decision Sciences Department, in the Facultad de Minas, Universidad Nacional de Colombia, Medellin, Colombia. His research interests include: automation, computer vision, digital image processing and computational intelligence techniques applied in different domains ORCID: 0000-0002-0378-028

