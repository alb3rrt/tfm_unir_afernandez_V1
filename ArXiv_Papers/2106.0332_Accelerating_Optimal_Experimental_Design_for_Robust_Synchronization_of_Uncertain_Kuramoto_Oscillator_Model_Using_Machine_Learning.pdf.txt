ACCELERATING OPTIMAL EXPERIMENTAL DESIGN FOR ROBUST SYNCHRONIZATION OF UNCERTAIN KURAMOTO
OSCILLATOR MODEL USING MACHINE LEARNING

arXiv:2106.00332v1 [math.OC] 1 Jun 2021

Hyun-Myung Woo Department of Electrical and Computer Engineering
Texas A&M University College Station, TX 77843, USA
larcwind@tamu.edu

Youngjoon Hong Department of Mathematics and Statistics
San Diego State University San Diego, CA 92182, USA
yhong2@sdsu.edu

Bongsuk Kwon Department of Mathematical Sciences Ulsan National Institute of Science and Technology
Ulsan, Republic of Korea bkwon@unist.ac.kr

Byung-Jun Yoon Department of Electrical and Computer Engineering
Texas A&M University College Station, TX 77843, USA
bjyoon@ece.tamu.edu

June 2, 2021
ABSTRACT
Objective-based uncertainty quantification (objective-UQ) is extremely useful in real-world problems that aim at achieving specific objectives based on complex uncertain systems. Central to this objective-UQ is the concept of mean objective cost of uncertainty (MOCU), which provides effective means of quantifying the impact of uncertainty on the operational goals at hand. MOCU is especially useful for optimal experimental design (OED), as the potential efficacy of an experimental campaign can be quantified by estimating the MOCU after the campaign. However, MOCU-based OED tends to be computationally expensive. In this paper, we propose a novel machine learning (ML) scheme that can significantly accelerate MOCU computation and MOCU-based experimental design. The main idea is to use an ML model to efficiently search for the optimal robust operator under model uncertainty, a necessary step for computing MOCU. We apply the proposed scheme to design experiments aimed at optimally enhancing the control performance of uncertain Kuramoto oscillator models. Our results show that the proposed scheme results in up to 154-fold speed improvement without any degradation of the OED performance.1
Keywords Objective-based uncertainty quantification, Stochastic/Uncertain Systems, Optimal Control, Nonlinear Systems.
1 Introduction
Many real-world engineering applications involve mathematical modeling of complex systems, where the constructed models are used for designing operators­such as controllers, filters, classifiers, estimators­that can effectively achieve engineering goals of interest. For example, one may be interested in building a network model that represents the transcription regulations in micro-organisms that regulate their metabolism [1]. The resulting model may be used to infer the potential impacts of modifications in the transcription regulatory network (TRN) on the metabolism of interest, for example, predicting the metabolic flux changes that result from the deletion of one or more transcription
1This work has been submitted to the IEEE for possible publication. Copyright may be transferred without notice, after which this version may no longer be accessible.

A PREPRINT - JUNE 2, 2021
factors. In this example, the engineering goal may be predicting the optimal genetic modification in the TRN that will lead to maximizing the production of a metabolite of interest. In fact, designing optimized strains of micro-organisms for ethanol overproduction [2] is an active area of research due to its implications in efficient bio-energy production.
A fundamental challenge in the aforementioned application as well as many other real-world engineering problems involving complex systems is the difficulty of accurate model construction. While one may have ample training data for model inference, the data size may nevertheless pale in comparison to the complexity of the system being modeled. Prior knowledge, if available, may also aid in improving model construction, but the final model is likely to still have substantial uncertainties. Consequently, a critical question is how one may reliably and optimally achieve the given engineering goals in the presence of model uncertainty. Furthermore, when one has the experimental budget for the acquisition of additional data or relevant knowledge (e.g., via hypothesis testing), how should the experimental campaigns be designed to maximize the expected "return on investment"?
While these are fundamental problems in modern engineering with a long and rich history [3, 4], it has been recently shown that a novel Bayesian paradigm for objective-based uncertainty quantification (objective-UQ) based on MOCU (mean objective cost of uncertainty) [5, 6] can effectively address the optimal design of operators and experiments for complex uncertain systems [7, 8, 9, 10, 11]. The core idea underlying the MOCU-based optimal experimental design (OED) is that, when dealing with complex uncertain models, one should quantify the model uncertainty in an objective-based manner and design experiments that can reduce the uncertainty that impacts one's operational goals. By focusing on the uncertainty that matters to the operation to be performed, the experimental budget can be efficiently used for optimizing the operational performance. To date, the efficacy of MOCU-based OED has been demonstrated in various systems, including experimental design for robust intervention in gene regulatory networks (GRNs) [9, 10] and that for robust synchronization of inter-coupled Kuramoto oscillators [7].
One practical challenge that limits the potential applicability of the MOCU-based OED scheme is its high computational cost, as discussed in [9, 7]. The computation of MOCU involves identifying the optimal robust operator for an uncertainty class that consists of all possible models (e.g., with different parameter values and/or structure) as well as evaluating expectations for high-dimensional prior (or posterior) probability distributions. In practice, these expectations have to be often evaluated numerically, which makes the accurate computation of MOCU computationally very expensive.
In this paper, we tackle this issue by adopting a machine learning (ML) approach for an efficient design of the optimal robust operator, thereby significantly accelerating the computation of MOCU as well as the MOCU-based experimental design. To the best of our knowledge, this is the first study that investigates adopting ML to accelerate MOCU-based OED. In order to develop and validate this ML-based OED acceleration scheme, we focus on designing experiments that can enhance the robust control of uncertain Kuramoto models that was investigated recently in [7]. A Kuramoto model [12] consists of a network of interconnected oscillators, whose dynamics are described by coupled ordinary differential equations (ODEs). The Kuramoto oscillator model has been widely studied in various fields across engineering, physics, chemistry, and biology, due to its capability to model interesting collective behavior (e.g., global/partial synchronization) that emerge in complex networks [13, 14, 15, 16, 17, 18, 19, 20, 21, 22]. For example, a microgrid system with droop-controlled inverters can be mathematically cast as a Kuramoto model, where the synchronization failure of the model corresponds to a power outage in the microgrid [18, 23, 24, 25, 26, 22]. Another interesting example is the application of the Kuramoto model for studying brain dynamics [15, 20, 21], where the synchronization phenomena may be associated with neurodegenerative diseases [27, 20]. We show that our proposed ML-based OED acceleration scheme can improve the speed of MOCU-based experimental design by 104  154 times without degrading the OED performance.
The paper is organized as follows. In Sec. 2, we provide a brief review of the Kuramoto model and the MOCU-based OED strategy for uncertain Kuramoto models. We propose the ML-based OED acceleration strategy in Sec. 3. In Sec. 4 and Sec. 5, we evaluate the performance of the proposed scheme for approximate MOCU computation and experimental design, respectively. We conclude the paper in Sec. 6 with further discussions and potential future research directions.
2 Overview of Optimal Experimental Design Strategy for the Uncertain Kuramoto Model
In this section, we provide a brief review of the OED strategy for uncertain Kuramoto oscillator models, which we originally proposed in our recent work [7]. We begin the section with an introduction to the Kuramoto model, followed by a brief description of the robust synchronization problem for uncertain Kuramoto models. Given an uncertain Kuramoto model, we describe how the MOCU can be used to quantify the impact of the model uncertainty on the control synchronization performance, and how MOCU-based OED strategy can be used to effectively reduce the
2

1 Sample generation

... ... ... ...

...

A PREPRINT - JUNE 2, 2021

2 Parallel procssing

...

...

3 Min. cost estimation
GPU Block 1
3 Min. cost estimation
Block L

...

...

4 MOCU estimation
Binary search

No
Search space initialization

Is Kuramoto model with synchronized?
Yes

Is Kuramoto model

No

with

Yes

synchronized?

No

Yes

Figure 1: Illustration of sampling-based MOCU computation. For reliable estimation of the expected cost increase due to uncertainty, a relatively large sample size K is needed. The sampling-based MOCU computation proposed in [7] takes advantage of GPU programming for the massive parallelization of this sampling operation.

uncertainty that matters to the objective at hand ­ i.e., optimal robust synchronization of the Kuramoto model in the presence of uncertainty.

2.1 Uncertain class of Kuramoto models Consider the Kuramoto model that consists of N interacting oscillators described by the following ODEs:

N

i (t) = i + ai,j sin (j (t) - i (t)) , i = 1, . . . , N.

(1)

j=1

The instantaneous phase of the ith oscillator at time t is denoted by i (t), i is the natural frequency of the ith oscillator, and ai,j is the coupling strength between the ith and jth oscillators. Kuramoto models have been widely studied to investigate the synchronization phenomena in various biological, chemical, or engineered oscillator systems,
where of special interest is whether the oscillators in a given Kuramoto model will get frequency synchronized as
follows:

lim
t

|i

(t)

-

j

(t)

|

=

0,

1  i, j  N.

(2)

Note that while conditions for synchronization have been extensively studied for homogeneous Kuramoto models with uniform coupling strength [28, 29, 30], there is yet no closed-form solution that can be used to predict the asymptotic synchronization of a general non-homogeneous Kuramoto model.
In a real-world setting, the parameters of the Kuramoto model, which represents a complex network of oscillators, may not be completely known. For example, while it may be relatively easy to accurately estimate the natural frequency of each oscillator, in the absence of interactions with other oscillators, it would be practically challenging to accurately measure the coupling strengths between all oscillators in a large network. This uncertainty gives rise to an uncertainty class of Kuramoto models, which contains all possible Kuramoto models that are consistent with our prior knowledge regarding the true model and/or available observation data. Under this setting, our primary interest is how we can apply robust control to the uncertain Kuramoto model, comprised of a network of oscillators whose natural frequency i is known but their coupling strength ai,j is only known up to a range ai,j  aLi,j, aUi,j . We denote the uncertainty class of all possible Kuramoto models as A, which consists of all parameter vector a = [a1,2, a1,3, . . . , aN-1,N ]T  A that satisfies the given constraints. As in the previous study [7], we assume a uniform prior distribution PA (a) = c, a (for some constant c) such that all parameter vectors in A are equally likely. However, this is not necessary, and non-uniform priors may be assumed based on available prior domain knowledge [31, 32].

3

A PREPRINT - JUNE 2, 2021

2.2 Robust control of uncertain Kuramoto models

Suppose that we are interested in synchronizing an uncertain Kuramoto model that consists of N interacting oscillators,

whose interaction strengths are only known up to a range, via external control. We adopt the synchronization method

proposed in [7] that introduces an additional oscillator as a global "synchronizer" to the original model. Let the natural

frequency of

this

(N

+

1)th

oscillator

be

N +1

=

1 N

Ni=1i

,

and

we

assume

that

this

control oscillator

interacts with

all oscillators in the original model with an uniform coupling strength ai,N+1 = aN+1, i, which is a control parameter.

The addition of the control oscillator augments the Kuramoto model as follows:

N

i(t) = i + ai,j sin(j(t) - i(t))
j=1

(3)

+ aN+1 sin(N+1(t) - i(t)), i = 1, 2, . . . , N + 1.

As the increase of the coupling strength aN+1 would in practice lead to an increase of the control cost, our control objective is to find a minimum aN+1 that guarantees the asymptotic frequency synchronization of the Kuramoto model despite the uncertainty. If we had complete knowledge about the coupling strength a, we would be able to find the
optimal (minimum) coupling strength aN+1 =  (a) that ensures synchronization by gradually increasing the value of aN+1 from 0 until synchronization is achieved. A more efficient approach would be to perform a binary search as illustrated in Fig. 1 (see the blow-up figure at the bottom). In the presence of uncertainty, we have to ensure that
the control oscillator would be able to achieve synchronization for any a  A. For this reason, we have chosen aN+1 =  (A) as follows:

 (A) = max  (a)

(4)

aA

which is the smallest aN+1 that guarantees global synchronization of the uncertain Kuramoto oscillators.

2.3 Objective-based quantification of the uncertainty in the Kuramoto model

Given an uncertain Kuramoto model, the expected impact of this model uncertainty on the operational goal ­ in this case, the global frequency synchronization of the Kuramoto oscillators ­ can be quantified by the MOCU [5]. For a given uncertainty class A, MOCU can be computed by:

M (A) = EA [ (A) -  (a)] ,

(5)

where  (A) is the cost of the optimal robust control and  (a) is the cost of the optimal control for the specific model configured with a specific parameter set a. As shown in (5), MOCU quantifies the expected cost increase for applying the optimal robust control instead of the model-specific optimal control. In this study, the optimal robust interaction strength (cost)  (A) is given by (4), in order to ensure that the uncertain Kuramoto model is synchronized by the added control oscillator while keeping the control cost at the minimum.

2.4 Numerical computation of MOCU
In general, there is no closed-form expression of (5), as a result of which the MOCU computation requires a numerical approximation. One practical way to compute the MOCU is to take a sampling-based approach to estimate the empirical expectation of the differential cost, based on samples a1, a2, ..., aK drawn from the distribution PA (a).
Figure 1 illustrates the sampling-based MOCU computation process. First, we draw K sample points {ai}, i = 1, 2, ..., K from PA (a). Then, for each sample point ai, which is a potential true model parameter in the uncertainty class A, we estimate the minimum coupling strength  (ai) of the control oscillator that guarantees the asymptotic frequency synchronization of the Kuramoto model under control. For efficient search, we can perform a binary search to find the minimum coupling strength  (ai). This binary search process is depicted in the dotted box at the bottom of Fig. 1. Specifically, we start with a broad search space that contains at least one large coupling strength that can enforce the system to be synchronized. At each iteration, we solve the ODEs of the Kuramoto model augmented with the control oscillator, whose coupling strength c is set by the median value of the current search space: c  aUN+1 + aLN+1 /2. If the system under control is synchronized, we update the upper bound of the search space to the median value: aUN+1  c. Otherwise, we set the lower bound of the search space to the median value: aLN+1  c. The binary search continues until we find the minimum coupling strength  (ai) for the given sample point

4

A PREPRINT - JUNE 2, 2021

: natural frequencies : experimental space
: uncertainty class

: The final reduced uncertainty class

Yes

Stop experiement?

No

Compute MOCU . Evaluation

Prediction of the optimal experiment

Compute the expected remaining MOCU for all the oscillator pairs in .

Select an optimal experiment

and update the experimental space

.

Increase lower bound.

Decrease upper bound.

Update of the uncertainty class

Yes

Isolate the oscillator pair

and determine if they are synchronized

or not.

No
Conduct of the predicted experiment

Figure 2: Illustration of the OED strategy based on the expected remaining MOCU.

ai that is within a specified tolerance level. (set to 2.5 × 10-4 in this study). Based on the K sample points, now the MOCU M (A) can be obtained as follows:

M

(A)

=

1 K

K

max ( (aj )) -  (ai) .
j

(6)

i=1

Note that the accuracy of this numerical approximation of MOCU is dependent on the sample size K, where a larger K generally leads to a more accurate MOCU estimation. However, the computational cost increases as the sample
size increases. We can reduce the computational time for numerical MOCU computation by exploiting parallelism. For example, estimating the optimal cost  (ai) of a sample point ai is an independent process to those of the other samples aj , j = i, which can be processed in a parallel manner with powerful parallel processors. In fact, the samplingbased MOCU computation in [7] takes advantage of GPU programming with CUDA, in which 200 sample points are processed in parallel at a given time (i.e., L = 200). However, for each sample point ai, the estimation of the minimum cost  (ai) via binary search (step 3 in Fig. 1) is a highly sequential process ­ which involves repeatedly solving the ODEs of the corresponding Kuramoto model and verifying whether or not the model is globally synchronized ­ that
is not amenable to parallelization. In Sec. 3, we present a novel solution via ML that can effectively address this
performance bottleneck, and thereby accelerate the numerical computational of MOCU by several orders of magnitude.

2.5 Designing optimal experiments for effective uncertainty reduction
The significance of objective-UQ using MOCU is that it enables the design of experiments that focus on reducing the model uncertainty that matters. More specifically, as MOCU quantifies the expected cost increase (relevant to our operational goal) due to model uncertainty, it can be used to quantify the expected impact of a potential experiment on reducing the model uncertainty that affects the operational performance, hence how effective the experiment will be in reducing the operational cost.
The MOCU-based OED strategy for uncertainty Kuramoto models has been recently proposed in [7]. In this study, a realistic experimental design space was considered, where an experiment corresponds to selecting a pair (i, j) of oscillators and observing whether they get spontaneously synchronized in isolation of other oscillators and in the absence of external control. The experimental outcome is binary­either synchronized or unsynchronized­based on which the uncertainty of the coupling strength ai,j  [aLi,j, aUi,j] can be reduced. Theorem 1 in [7] reproduced below gives us the necessary and sufficient condition for an oscillator pair to be frequency synchronized:

5

A PREPRINT - JUNE 2, 2021

Theorem 1 Consider the Kuramoto model of two-oscillators:

1(t) = 1 + 0.5a sin(2(t) - 1(t)), 2(t) = 2 + 0.5a sin(1(t) - 2(t))

(7)

with the initial angles 1(0), 2(0)  [0, 2). Then, for any solutions 1 and 2 to (7), there holds |1(t) - 2(t)|  0 as t   if and only if |1 - 2|  a.

According to Theorem 1, the Kuramoto oscillator pair (i, j) becomes frequency synchronized limt|i (t) -

j (t)|

=

0 if and only if

|i-j | 2



ai,j .

As a result, if the two oscillators are observed to be synchronized, we

can decrease the upper bound aUi,j to |i - j|/2. Otherwise, we can increase the lower bound aLi,j to |i - j|/2.

Since the experimental outcome is unknown in advance, we need to consider both possible outcomes to quantify the

expected impact of a given experiment on reducing the objective uncertainty. To formalize this, let Oi,j be a binary

random variable representing the outcome of the pairwise synchronization experiment for the oscillator pair (i, j).

Then, the expected remaining MOCU R (i, j) is given by:

R (i, j) = EOi,j [M (A|Oi,j )]

=

P (Oi,j = o) M (A|Oi,j = o) ,

(8)

o{0,1}

where M (A|Oi,j ) is the conditional MOCU given Oi,j. The conditional MOCU, M (A|Oi,j = o), given an experimental outcome, Oi,j = o, can be computed by reducing the uncertainty class as previously described and numerically computing the MOCU of this reduced uncertainty class. The probability P (Oi,j = o) can be derived in a straightforward manner, based on PA (a) (see [7] for further details). The R (i, j) in (8) quantifies the MOCU that is expected to remain after performing the pairwise synchronization experiment for the pair (i, j).

So, how should we prioritize the potential

N 2

experiments? Naturally, the optimal choice would be to choose the

experiment with the smallest R (i, j):

(i, j) = arg min R (i, j)

(9)

(i,j)E

as the experiment (i, j) is expected to most effectively reduce the objective uncertainty among all potential experiments. In practice, rather than performing a single best experiment, we may perform a sequence of experiments prioritized by (9). In theory, R (i, j) will have to be re-estimated after performing the predicted optimal experiment and observing its outcome, as it changes the uncertainty class, hence the expected remaining MOCU for the potential subsequent experiments. However, empirically, R(i, j) computed based on the original uncertainty class A is a robust indicator of the efficacy of the potential experiments, which we will demonstrate in Sec. 5.

3 Accelerating Experimental Design via Machine Learning
We propose an ML approach for accelerating the quantification of the objective system uncertainty. As we discussed in the previous section, in real-world applications that typically involve the control consisting of highly non-linear sequential operations, the effective computational complexity is critically dependent on the computational complexity of the control rather than the number of samples. The proposed approach learns a surrogate model for (part of) the operations of the control for estimation of the control cost for a system, thereby reducing the effective computational complexity that cannot be further reduced by parallelism.
As discussed in Section 2.4, estimating the MOCU of the uncertain Kuramoto model based on the sampling approach involves a binary search for each sample ai, where at each iteration solving the corresponding ODEs and determining if the system under control is synchronized or not. From a broad perspective, at each iteration, these operations, the gray box in Fig. 1, are nothing but a binary classification problem. Hence, if we collect enough samples to build an accurate classifier, we replace such a process with the binary classifier, which is computationally efficient. In this study, we considered a fully-connected neural network (fcNN) with only one hidden layer, possibly the simplest ML structure that we can think of.
The proposed approach on the MOCU-based OED framework is realized by replacing part of the operations of control with the trained model for the estimation of the expected remaining MOCU, R (i, j), highlighted in gray in Fig. 2.

6

A PREPRINT - JUNE 2, 2021

Yes
Binary search
No

...

Is Kuramoto model

Yes

with

synchronized?

No

Original approach (Sampling-based)

Solve Kuramoto model via the fourth-order Runge-Kutta model.

Check if the solution satisfies the synchronization condition.

Proposed approach (ML-based)

Create featuer data.

Classify the feature data via the fully-connected neural network.

Figure 3: Comparison between the original sampling-based estimation scheme adopted in [7] and the proposed MLbased estimation scheme. The proposed scheme obviates the need for repeatedly solving the ODE within the binary search routine to find the optimal robust coupling strength illustrated in Fig. 1. This significantly enhances the computational efficiency of MOCU estimation.

Hence we focus on the difference in quantifying the expected remaining MOCU, R (i, j), between the proposed ML-
based approach and the original approach that manually determines the synchronization of the Kuramoto model. To compute the expected remaining MOCU, R (i, j), we first need to estimate conditional MOCU, M (A|Oi,j = o), given the experimental outcome, Oi,j = o  {0, 1}, (i.e., synchronized or not) as derived in (8). Specifically, as we described in Section 2.4, we compute the control cost  (ai) of all samples ai, i = 1, 2, . . . , K, drawn from the posterior uncertainty class distribution, PA|Oi,j=o (a), updated according to the experimental outcome, Oi,j = o, as shown in Fig. 2. Figure 3 shows the difference in estimating the control cost  (ai) of a sample ak between the proposed approach and the original approach. Both approaches find a numerical solution through the binary search that is a sequential process. At each iteration, the midpoint c  aUN+1 + aLN+1 /2 of the search space is evaluated. The original approach solves the Kuramoto model determined by the sample ak and midpoint c, and determines if the solutions are synchronized or not according to the criterion (2). On the other hand, the proposed ML-based approach creates the feature set based on the natural frequencies i, sample ak, and midpoint c, and classifies the feature vector. The search space is then halved according to the outcome. Note that the computational complexity of the original
approach is critically dependent on the time precision and simulation time. Less time precision and shorter simulation
time can reduce the overall computational complexity, but such parameters significantly affect the estimation accuracy
of the MOCU. On the other hand, MOCU-based OED with the proposed approach is free from such a trade-off at the
inference phase as the features are independent of the parameters.

4 Evaluation of ML-Based Estimation of Approximate MOCU

4.1 Configuration of the simulation
In this section, we demonstrate the efficacy of the proposed ML approach in accelerating the speed of objective-UQ, resulting in a very efficient OED. As described in the previous sections, we consider the OED for the Kuramoto model under uncertainty, where one's operational objective is to ensure synchronization of the model by adding an oscillator for control. For validation, we considered two experimental setups based on uncertain Kuramoto models with five and seven oscillators, respectively. As a reference ODE solver, we used the fourth-order Runge-Kutta method to solve the Kuramoto model that was sampled at the sampling frequency fs of 160Hz for five seconds. To determine whether the Kuramoto model is synchronized or not, we used the following criterion:

max ( max
2.5t5 1iN

i

(t))

<

Td,

(10)

7

Pearson's correlation coefficient: 0.9849 p-value: 1.9017e-76

A PREPRINT - JUNE 2, 2021

Expected remaining MOCU estimated through the ML-based approach

Expected remaining MOCU estimated through the sampling-based approach
Figure 4: The scatter plot shows the expected remaining MOCU values for the uncertain five-oscillator Kuramoto model estimated using the proposed ML-based approach and the original sampling-based approach in [7]. The estimated values are highly correlated to each other.

where i (t) i (t + (1/fs)) - i (t), i is the instantaneous phase of the ith oscillator, and Td is a threshold of the tolerance. We set Td to 0.001. To estimate the MOCU of a given uncertainty class, we randomly drew 20, 480 sample points from the uncertainty class (i.e., K = 20, 480). We used a Lambda workstation equipped with Intel i9-9960X,
128GB memory, and GeForce RTX 2080 Ti for the simulations.

At the core of the proposed method lies a binary classifier that accurately classifies the global frequency synchroniza-

tion of the model when a control oscillator is introduced. To train an accurate classifier, we used an fcNN model

with one hidden layer. In that regard, it is essential to extract representative features from the parameters that define

the Kuramoto model, such as the number of oscillators, natural frequencies, initial phases, or coupling strength val-

ues between oscillators. Inspired by Theorem 1, which gives us the necessary and sufficient condition for pairwise

frequency synchronization of Kuramoto oscillators, we used the natural frequencies, the absolute difference between

the frequencies, and the corresponding coupling strength values as features. More specifically, given a parameter set

that fully determines the Kuramoto model operating on N + 1 oscillators, we first sort all the natural frequencies in

descending order and rearrange the coupling strength accordingly. Then, we construct the corresponding feature set

that consists of the sorted natural frequencies, the absolute difference of the natural frequencies of all oscillator pairs,

and their coupling strengths. Note that this arrangement makes the feature set highly structured but does not affect the

characteristics of the Kuramoto model. To accurately label a given sample point (the feature set of a given Kuramoto

model), we used the fourth-order Runge-Kutta method with a much longer simulation time T of 400 seconds to de-

termine whether the model reaches global frequency synchronization or not. Besides, we rigorously determined the

synchronization of the Kuramoto model based on more stringent criteria. For labeling purpose, we consider that a Ku-

ramoto model is synchronized if both of the following two conditions are satisfied: First, frequencies of all oscillators

rounded to the sixth decimal place are equal for the last 20 (T  0.95) seconds. Second, the sum of absolute change in

the coherence value r (t) of the

order parameter r (t) ej(t)

=

1 N

N i=1

ej i (t)

is

less

than

10-6

for

the

last

20

seconds.

Note that if the results for the two conditions differ, we excluded the sample point from the training dataset. Since

the detailed structure and the training process of the classifier varies depending on the simulation scenario, we provide

further details in the corresponding subsections. The source code used for the simulations whose results are presented

in this study can be found at https://github.com/bjyoontamu/Kuramoto-Model-OED-acceleration.

4.2 Comparison between ML-based and sampling-based MOCU estimation
In order to validate the efficacy of the proposed method (ML-based MOCU estimation), we first directly compare the MOCU values of different uncertainty classes from the ML-based approach and the sampling-based approach we considered in the previous work [7].

8

A PREPRINT - JUNE 2, 2021

4.2.1 MOCU estimation for uncertain Kuramoto model with five oscillators
As a first experimental setup, we considered an uncertain Kuramoto model that consists of five oscillators that do not get spontaneously synchronized in the absence of external control. In this experiment, we adopted the identical experimental setup in the previous work [7] for direct comparison. We assumed that the five oscillators have the natural frequencies of -2.50, -0.6667, 1.1667, 2.0, and 5.8333, respectively. The natural frequency of the additional (i.e., 6th) control oscillator was set to the average frequency of the five oscillators (6 = 1.1667). Besides, the initial phase of all oscillators is zero. We used the uncertainty class as follows:

aUi,j = 1.15di,j (0.5|i - j |) , aLi,j = 0.85di,j (0.5|i - j |) ,

(11)

where di,j  [0.3, 1] is a correcting weight which is empirically determined to make Kuramoto model unsynchronized; for example,

aU =

1 0541 0 6325 0 7762 1 4375 1 0542

.

.

.

.

.

0 69 1 6819 0 4791 2 6833 2 2041 T

..

.

.

.

,

(12)

aL =

0 7791 .

0 4675 0 5737 1 0625 0 7792

.

.

.

.

0 51 1 2431 0 3541 1 9833 1 6291 T

..

.

.

.

.

(13)

To train the classifier, we first generated a training dataset for each class consisting of 20, 000 different Kuramoto model parameters in the uncertainty class (i.e., 20, 000 system configurations that result in synchronization and 20, 000 configurations that do not). These sample points were drawn from a multivariate uniform distribution whose support completely covers the range of the uncertainty class at hand. Specifically, a parameter set has six real-values from the uniform distribution with a range of (-2, 2) as natural frequencies of the six oscillators, i, i = 1, 2, . . . , 6, and ten coupling strength values ai,j, 1  i < j  6, between oscillators ranging from 0.25 |i - j| to 2.35 |i - j|. Then, we generated the training dataset by converting each parameter set in the dataset to the feature set. For each parameter set, we first sorted the six natural frequencies in descending order and rearranged the coupling strength values accordingly. Next, we constructed the training dataset with the following features: the sorted natural frequencies, the absolute difference of the natural frequencies of all oscillator pairs, and their coupling strengths. Finally, we trained an fcNN model with a single hidden layer, whose width is three times the number of features, until the model classifies the 40, 000 sample points in the training dataset without any misclassification.
We started with the original uncertainty class defined in (12) and (13) and estimated the expected remaining MOCU of random oscillator pairs through both approaches one hundred times while randomly changing the true model (assumed to be unknown). Figure 4 is a scatter plot that shows the comparison between the expected remaining MOCU values computed by different methods. As shown in Fig. 4, the expected remaining MOCU values computed by the proposed ML-based method and the original sampling-based method [7] display a strong linear relationship. The Pearson's correlation coefficient was 0.9849 with a p-value of 1.9017e-76. This plot shows that the ML-based computational scheme has the potential to effectively replace the costly sampling-based scheme without affecting the MOCU-based OED performance, as it will likely not affect the ranking of potential experiments. In terms of computational cost, the ML-based approach was able to compute the expected remaining MOCU 0.1110 seconds (on average) if a given uncertainty class, while it took 818.7 seconds (on average) for the sampling-based approach. These results clearly show the advantages of the proposed approach in efficiently quantifying the objective uncertainty.

4.2.2 MOCU estimation for uncertain Kuramoto model with seven oscillators
Next, we evaluated the performance of the proposed approach in a more complicated scenario where the Kuramoto model operates on the seven oscillators whose natural frequency is -3.4600, -1.9611, -0.6754, -0.3806, -0.3675, 6.1161, and 8.3287, respectively. We again assumed that the natural frequency of the control oscillator (i.e., 8th oscillator) is the average frequency of those of the seven oscillators (8 = 1.0857). As in the previous case of the Kuramoto model with five oscillators, we defined the uncertainty class as follows:

aUi,j = 1.15dUi,j (0.5|i - j |) , aLi,j = 0.15dLi,j (0.5|i - j |) ,

(14)

9

Pearson's correlation coefficient: 0.9606 p-value: 2.6206e-56

A PREPRINT - JUNE 2, 2021

Expected remaining MOCU estimated through the ML-based approach

Expected remaining MOCU estimated through the sampling-based approach
Figure 5: The scatter plot shows the expected remaining MOCU values for the uncertain seven-oscillator Kuramoto model estimated using the proposed ML-based approach and the original sampling-based approach in [7]. As before, the estimated values show a high correlation.

where dUi,j and aLi,j are weights ranging from 0.1 to 1. We choose them empirically to assure that the Kuramoto model within the uncertainty class is not synchronized (in the absence of control):

0 848 0 988 1 446 1 607 3 82 0 915 0 4

.

.

.

.

..

.

aU =

0 85 .

0 419 .

4 162 .

1 09 .

0 122 .

0 039 .

2 124 .

0 872 0 007 2 737 1 804 1 36 0 744 1 174 T

.

.

.

.

..

.

,

(15)

0 073 0 172 0 153 0 054 0 501 0 463 0 043

.

.

.

.

.

.

.

aL =

0 015 .

0 096 .

0 501 .

0 103 .

0 007 .

0 009 .

0 139 .

0 408 0 0 131 0 119 0 300 0 286 0 131 T

.

.

.

.

.

.

.

(16)

As the size of the parameter set is much larger for this Kuramoto model, we generated the training data in a more
tailored way. Rather than generating the sample points (i.e., Kuramoto model parameter sets) with random natural frequencies within a specific range as we did for the five oscillator model, we fixed the natural frequencies to -3.4600, -1.9611, -0.6754, -0.3806, -0.3675, 6.1161, 8.3287, and 1.0857 in this example. For the coupling strength values, we drew them from the uniform distribution for the uncertainty class, whose support is defined in (15) and (16). In this manner, we collected 50, 000 sample points per label according to the same criteria we used for the five oscillator case. Then, we created the training dataset by converting the sample points into the feature sets as described previously for
the five oscillator case. Based on the training dataset, we trained the classifier based on an fcNN with one hidden layer, whose width is four times the number of features, until it is capable of classifying the 100, 000 sample points perfectly.

As before, we started with the original uncertainty class defined in (15) and (16) and computed the expected remaining

MOCU of random oscillator pairs using the ML-based method and the sampling-based method. We repeated this

until we collect a hundred expected remaining MOCU values per method. Figure 5 shows the scatter plot that com-

pares the expected remaining MOCU values computed by the two methods. Again, we can see that there is a strong

linear relationship between the computed values. The Person's correlation coefficient was 0.9606 with a p-value of 2.6206e-56. In terms of computational cost, it took 0.6953 seconds (on average) for the ML-based method to compute

the expected remaining MOCU, which was still less than a second although the experimental design space has grown

from

(5×4) 2

= 10

experiments to

(7×6) 2

= 21.

It

took the

sampling-based approach 3, 684.9 seconds (on

average) to

compute the expected remaining MOCU values, which shows that our proposed method makes the computation 5, 298

times faster at practically identical accuracy. These results clearly show the advantages of the proposed ML-based

approach in quantifying the objective model uncertainty.

10

MOCU

A PREPRINT - JUNE 2, 2021
ML-based (iterative) ML-based Sampling-based (iterative) Sampling-based Entropy Random
Number of updates
Figure 6: Performance comparison of various experimental design strategies for the uncertain five-oscillator Kuramoto model considered in [7]. The results show that the three MOCU-based OED schemes perform similarly, regardless of how MOCU was estimated. The MOCU-based schemes clearly outperform other schemes as reported in [7].
ML-based (iterative) ML-based Sampling-based (iterative) Sampling-based
Number of updates
Figure 7: Cumulative computational cost for experimental design. As shown, the proposed ML-based estimation clearly outperforms the original sampling-based estimation [7] in terms of efficiency, where their costs differ by two orders of magnitude. For both ML-based/sampling-based schemes, iterative estimation requires further computations, as the uncertainty class is updated after each experiment, based on which the remaining expected MOCU values are assessed again.
11

Cumulative computational complexity (in seconds)

A PREPRINT - JUNE 2, 2021

5 Performance of Experimental Design Using ML-Based MOCU Estimation

We compared the OED performance of the proposed ML-based method against three existing approaches:
· Sampling-based approach: the original approach proposed in [7] based on the MOCU framework, where a fourth-order Runge-Kutta method is to solve the Kuramoto model to determine synchronization.
· Entropy-based approach: the experiment is chosen for the oscillator pair whose coupling strength value has the largest entropy to reduce this uncertainty.
· Random approach: the experiment is randomly selected from the experimental design space.
For the MOCU-based OED scheme­for both ML-based computation as well as sampling-based computation­we consider the following OED strategies. In the first approach (marked as iterative in the figures), we re-estimate the expected remaining MOCU for the remaining experiments in each iteration, after performing the predicted optimal experiment and updating the uncertainty class based on the observed experimental outcome. In the second approach, we estimate the expected remaining MOCU only based on the initial uncertainty class and prioritize all experiments based on this result. While this approach is theoretically suboptimal, it significantly reduces the overall computational cost and empirically shows comparable performance to the iterative scheme, as we will show in this section.

5.1 Optimal experimental design for uncertain Kuramoto models with five oscillators

First, we conducted OED simulations for the same five-oscillator Kuramoto model considered in the previous study [7] for direct comparison. We used identical model parameters described in Section 4.2.1. The true (unknown) model a was assumed to be as follows:

0 9166 0 55 0 675 1 25 0 9167

a= .

..

..

0 6 1 4625 0 4166 2 3333 1 9166 T

..

.

.

.

.

(17)

Figure 6 shows the experimental design performance of the different algorithms, where the objective uncertainty (quantified by MOCU) is shown as a function of the number of experimental updates (iterations). As shown in Fig. 6, the proposed ML-based approach with iterative re-estimation (red dotted line with asterisks) showed the nearly identical performance to sampling-based methods (both iterative and non-iterative schemes, shown in yellow lines). All three schemes reached the near minimum MOCU within only three experimental updates. The non-iterative ML-based scheme (red dashed line with squares) also identified the first optimal experiment accurately and showed comparable performance in the later updates with the other three MOCU-based OED schemes. All four MOCUbased OED schemes (both ML-based and sampling-based) significantly outperformed the entropy-based and random approaches, resulting in much sharper uncertainty reduction within fewer experimental updates.
Figure 7 compares the overall computational cost between the ML-based OED schemes and the sampling-based OED schemes. The entropy-based approach and the random approach are not shown, as their computational cost is fixed and negligible. As we can see in Fig. 7, the proposed ML-based OED approaches, marked as red, showed significantly lower time complexity compared to the sampling-based OED approaches. Note that the ML-based methods (red dotted lines) were significantly faster compared to the sampling-based methods, despite maintaining equivalent OED performance.
Next, we repeated the experiments by randomly sampling the true (unknown model) from the uncertainty class (i.e., different coupling strength values were drawn from the prior distribution of the uncertainty class) one hundred times. The results of these large-scale experiments are shown in Fig. 8 and Fig. 9. Note that we excluded the iterative sampling-based OED method due to its excessive requirement of computational time. As shown in these figures, the proposed ML-based method without iterative re-estimation of the expected remaining MOCU showed the identical performance to other best performers. Random experimental selection (blue dotted line) yielded a linearly decreasing MOCU curve, as we would expect on average. The entropy-based method showed similar performance as before (see Fig. 6). Computational cost in Fig. 9 shows a similar trend as before (see Fig. 7).
Finally, we compared the experimental sequences determined by the ML-based method and the sampling-based methods, respectively, to further investigate if the proposed ML approach can practically replace the sampling-based method for prioritizing the experiments in the experimental design space. The vertical axis corresponds to the number of intersecting experiments in the first k experiments predicted by two different methods. If two methods predict the identical experimental sequence, the resulting curve will be a straight line (with unit slope). For example, the black line in Fig. 10 compares the ML-based method and the sampling-based method. From Fig. 10 we can see that the proposed ML-based method (without re-estimation) always identified the same first experiment as the sampling-based method in

12

MOCU

A PREPRINT - JUNE 2, 2021
ML-based (iterative) ML-based Sampling-based Entropy Random
Number of updates
Figure 8: Average performance of various experimental design strategies for uncertain Kuramoto models with five oscillators. The experiments have been repeated 100 times by sampling potential true models from the uncertainty class. As shown, all three MOCU-based methods lead to the best performance.
ML-based (iterative) ML-based Sampling-based
Number of updates
Figure 9: Average cumulative computational cost (in seconds) for the different experimental design strategies for uncertain Kuramoto models with five oscillators.
13

Cumulative computational complexity (in seconds)

ML-based - Sampling-based Optimal - ML-based (iterative) Optimal - ML-based Optimal - Sampling-based Optimal - Entropy Optimal - Random

A PREPRINT - JUNE 2, 2021

The number of overlapped experiments among the top k experiments

Number of updates (k)
Figure 10: Comparison between the optimal sequence of experiments predicted by different OED strategies for uncertain Kuramoto models with seven oscillators. The y-axis shows the number of common experiments within the first k experiments predicted by two different methods.
all one hundred evaluations. By comparing the true optimal experimental sequence (i.e., predicted by an "oracle") and the sequences predicted by the ML-based method, we can see that the first optimal experiment was always accurately predicted. In fact, results in Fig. 8 show that the first experiment leads to the most significant drop in model uncertainty, and all MOCU-based OED schemes (both ML-based and sampling-based) accurately predict this critical experiment. We also note that the entropy-based/random approaches tend to mispredict the best first experiment, resulting in a substantial performance gap when compared to the MOCU-based approaches. Figure 10 also shows that the predicted experimental sequences diverge in later iterations. However, this does not impact the OED performance on average, as later experiments do not reduce the model uncertainty as significantly as the earlier experiments.
5.2 Optimal experimental design for uncertain Kuramoto models with seven oscillators
We also repeated the experiments for uncertain Kuramoto models that consist of seven oscillators. As before, true (unknown) models were randomly sampled from the uncertainty class one hundred times to evaluate average performance. We used the same parameters and model described in Section 4.2.2.
Figure 11 shows the OED performance assessment results for the various experimental design methods based on the seven-oscillator Kuramoto model. As we can see from Fig. 11, the performance trends were very similar to those seen in Fig. 8 for the Kuramoto model with five oscillators. The proposed ML-based methods again accurately identified the first optimal experiment that maximally reduces MOCU. All four MOCU-based OED schemes (both ML-based and sampling-based), regardless of whether or not the remaining expected MOCU values were re-estimated after each experimental update, showed almost identical performance on average. The computational time is shown in Fig. 12, which clearly shows that the ML-based scheme (especially, the non-iterative scheme) is significantly faster compared to the original sampling-based approach proposed in [7]. Furthermore, even the ML-based method with the iterative update was considerably faster than the sampling-based that does not iteratively re-estimate the expected remaining MOCU.
Finally, we compared the experimental sequences identified by the different methods, including the true optimal experimental selection (i.e., predicted by an "oracle"). Note that due to the excessive computational cost of the optimal experimental selection (as it requires exhaustive search), we identified the optimal experimental sequences only for the first thirty evaluations based on randomly sampled true models from the uncertainty class. For this reason, Fig. 13 shows the comparison results based on the first thirty experimental sequences (out of one hundred). As shown in the figure, both the ML-based and the sampling-based methods were able to accurately identify the first optimal experiment. The predicted sequences tend to diverge in later iterations. However, considering the simulation results shown in Fig. 11, it is likely that this is because many experiments in later updates do not significantly reduce the objective uncertainty, once the best experiment has been performed in the earlier iterations (especially, the first iteration). Also,
14

MOCU

A PREPRINT - JUNE 2, 2021
ML-based (iterative) ML-based Sampling-based Entropy Random
Number of updates
Figure 11: Average performance of various experimental design strategies for uncertain Kuramoto models with seven oscillators based on 100 experiments. All MOCU-based methods lead to the best performance.
ML-based (iterative) ML-based Sampling-based
Number of updates
Figure 12: Average cumulative computational cost (in seconds) for the different experimental design strategies for uncertain Kuramoto models with seven oscillators.
15

Cumulative computational complexity (in seconds)

ML-based - Sampling-based Optimal - ML-based (iterative) Optimal - ML-based Optimal - Sampling-based Optimal - Entropy Optimal - Random

A PREPRINT - JUNE 2, 2021

The number of overlapped experiments among the top k experiments

Number of updates (k)
Figure 13: Comparison between the optimal sequence of experiments predicted by different OED strategies for uncertain Kuramoto model with seven oscillators. The y-axis shows the number of common experiments within the first k experiments predicted by two different methods.
we can see that the entropy-based and the random selection approaches tend to miss the best experiment, which results in a significant degradation in the overall experimental design performance. These comprehensive simulation results clearly show that our proposed ML-based OED approach effectively quantifies the objective model uncertainty at a small fraction of the computational cost of the sampling-based method, thereby remarkably accelerating the OED process while maintaining excellent performance.
6 Concluding Remarks
In this paper, we proposed an ML approach that can significantly accelerate the objective-based quantification of model uncertainty via MOCU. A major bottleneck in applying MOCU for designing/prioritizing optimal experiments that can optimally reduce the uncertainty in models that represent real-world complex uncertain systems has been the high computational cost for accurately estimating MOCU. The proposed approach effectively addresses this issue in the context of OED for uncertain Kuramoto models by replacing the computational costly differential equation solver with an ML model, which remarkably speeds up the process of predicting the optimal controller (i.e., the oscillator that guarantees global frequency synchronization at minimum cost). The trained ML model predicts the asymptotic behavior of a given Kuramoto model, namely, whether all oscillators in the model will be eventually frequency synchronized or not.
The results shown in Sec. 4 and Sec. 5 clearly demonstrate that the ML-based MOCU calculations are highly correlated with those computed by the sampling-based scheme originally proposed in [7]. Furthermore, the OED performance of the ML-based scheme is practically equivalent to that of the original sampling-based OED scheme. However, despite achieving equivalent OED performance, our proposed ML-based OED scheme accelerates the experimental design process by at least two orders of magnitude, resulting in significant computational gains. The remarkably enhanced computational efficiency enables more reliable MOCU calculation by further increasing the sample size (i.e., K) as needed. Furthermore, it allows us to iteratively recompute the remaining MOCU R(i, j) after performing the predicted optimal experiment at each experimental update (see Fig. 9 and Fig. 12), which can­in theory­lead to a more accurate prediction of the optimal experiment, although the actual gain will depend on the underlying model uncertainty. Such iterative update is practically infeasible for the sampling-based OED scheme [7] without resorting to HPC (high-performance computing).
An interesting direction for future research is to utilize ML models to learn scientific knowledge from data. In this paper, we considered pairwise synchronization experiments, whose result can be used to reduce model uncertainty using Theorem 1 that gives us the necessary and sufficient condition for frequency synchronization of an oscillator pair. In the absence of such knowledge, one cannot design experiments for effective uncertainty reduction. As mentioned
16

A PREPRINT - JUNE 2, 2021
before, similar theorems do not exist in general for non-homogeneous Kuramoto models that consist of more than two oscillators. Discovering useful relational knowledge regarding the model parameters via ML can lead to the design of more effective experiments as well as a significant expansion of the potential experimental design space. We are currently investigating the potential utilization of deep neural network (DNN) models for knowledge discovery in non-homogeneous Kuramoto models with multiple oscillators.
References
[1] P. Niu, M. J. Soto, B.-J. Yoon, E. R. Dougherty, F. J. Alexander, I. Blaby, and X. Qian, "TRIMER: Transcription regulation integrated with metabolic regulation," Available at SSRN 3836893, 2021.
[2] F. Shen, R. Sun, J. Yao, J. Li, Q. Liu, N. D. Price, C. Liu, and Z. Wang, "OptRAM: In-silico strain design via integrative regulatory-metabolic network modeling," PLoS computational biology, vol. 15, no. 3, p. e1006835, 2019.
[3] E. R. Dougherty, "Scientific epistemology in the context of uncertainty," in Berechenbarkeit der Welt?, pp. 129­ 154, Springer, 2017.
[4] E. R. Dougherty, L. A. Dalton, and R. Dehghannasiri, Objective Uncertainty Quantification, pp. 541­560. Springer International Publishing, 2019.
[5] B.-J. Yoon, X. Qian, and E. R. Dougherty, "Quantifying the objective cost of uncertainty in complex dynamical systems," IEEE Transactions on Signal Processing, vol. 61, no. 9, pp. 2256­2266, 2013.
[6] B.-J. Yoon, X. Qian, and E. R. Dougherty, "Quantifying the multi-objective cost of uncertainty," arXiv preprint arXiv:2010.04653, 2020.
[7] Y. Hong, B. Kwon, and B.-J. Yoon, "Optimal experimental design for uncertain systems based on coupled differential equations," IEEE Access, doi: 10.1109/ACCESS.2021.3071038.
[8] G. Zhao, X. Qian, B.-J. Yoon, F. J. Alexander, and E. R. Dougherty, "Model-based robust filtering and experimental design for stochastic differential equation systems," IEEE Transactions on Signal Processing, vol. 68, pp. 3849­3859, 2020.
[9] R. Dehghannasiri, B.-J. Yoon, and E. R. Dougherty, "Efficient experimental design for uncertainty reduction in gene regulatory networks," BMC Bioinformatics, vol. 16, no. 13, p. S2, 2015.
[10] R. Dehghannasiri, B.-J. Yoon, and E. R. Dougherty, "Optimal experimental design for gene regulatory networks in the presence of uncertainty," IEEE/ACM Transactions on Computational Biology and Bioinformatics (TCBB), vol. 12, no. 4, pp. 938­950, 2015.
[11] A. Broumand, M. S. Esfahani, B.-J. Yoon, and E. R. Dougherty, "Discrete optimal bayesian classification with error-conditioned sequential sampling," Pattern Recognition, vol. 48, no. 11, pp. 3766­3782, 2015.
[12] Y. Kuramoto, "Self-entrainment of a population of coupled non-linear oscillators," in International symposium on mathematical problems in theoretical physics, pp. 420­422, Springer, 1975.
[13] K. Wiesenfeld, P. Colet, and S. Strogatz, "Frequency locking in josephson arrays: Connection with the kuramoto model," Physical Review E, vol. 57, pp. 1563­1569, feb 1998.
[14] Z. Néda, E. Ravasz, T. Vicsek, Y. Brechet, and A. L. Barabási, "Physics of the rhythmic applause," Physical Review E, vol. 61, pp. 6987­6992, jun 2000.
[15] C. Hammond, H. Bergman, and P. Brown, "Pathological synchronization in parkinson's disease: networks, models and treatments," Trends in neurosciences, vol. 30, no. 7, pp. 357­364, 2007.
[16] M. Breakspear, S. Heitmann, and A. Daffertshofer, "Generative models of cortical oscillations: Neurobiological implications of the kuramoto model," Frontiers in Human Neuroscience, vol. 4, 2010.
[17] D. Bhowmik and M. Shanahan, "How well do oscillator models capture the behaviour of biological neurons?," in The 2012 International Joint Conference on Neural Networks (IJCNN), IEEE, jun 2012.
[18] J. W. Simpson-Porco, F. Dörfler, and F. Bullo, "Droop-controlled inverters are kuramoto oscillators," IFAC Proceedings Volumes, vol. 45, no. 26, pp. 264­269, 2012.
[19] B. Fernandez, D. Gérard-Varet, and G. Giacomin, "Landau damping in the kuramoto model," Annales Henri Poincaré, vol. 17, pp. 1793­1823, dec 2015.
[20] A. Mohseni, S. Gharibzadeh, and F. Bakouie, "The role of driver nodes in managing epileptic seizures: Application of kuramoto model," Journal of theoretical biology, vol. 419, pp. 108­115, 2017.
17

A PREPRINT - JUNE 2, 2021
[21] H. Choi and S. Mihalas, "Synchronization dependent on spatial structures of a mesoscopic whole-brain network," PLoS computational biology, vol. 15, no. 4, p. e1006978, 2019.
[22] Y. Guo, D. Zhang, Z. Li, Q. Wang, and D. Yu, "Overviews on the applications of the kuramoto model in modern power system analysis," International Journal of Electrical Power & Energy Systems, vol. 129, p. 106804, 2021.
[23] M. Rohden, A. Sorge, M. Timme, and D. Witthaut, "Self-organized synchronization in decentralized power grids," Phys. Rev. Lett., vol. 109, p. 064101, Aug 2012.
[24] A. Motter, S. Myers, M. Anghel, and T. Nishikawa, "Spontaneous synchrony in power-grid networks," Nature Physics, vol. 9, pp. 191­197, Mar. 2013.
[25] J. W. Simpson-Porco, F. Dorfler, and F. Bullo, "Synchronization and power sharing for droop-controlled inverters in islanded microgrids," Automatica, vol. 49, no. 9, pp. 2603­2611, 2013.
[26] F. Dörfler, M. Chertkov, and F. Bullo, "Synchronization in complex oscillator networks and smart grids," Proceedings of the National Academy of Sciences, vol. 110, no. 6, pp. 2005­2010, 2013.
[27] K. Lehnertz, S. Bialonski, M.-T. Horstmann, D. Krug, A. Rothkegel, M. Staniek, and T. Wagner, "Synchronization phenomena in human epileptic brain networks," Journal of neuroscience methods, vol. 183, no. 1, pp. 42­48, 2009.
[28] A. Arenas, A. Díaz-Guilera, J. Kurths, Y. Moreno, and C. Zhouu, "Synchronization in complex networks," Physics Reports, vol. 469, no. 3, pp. 93 ­ 153, 2008.
[29] F. A. Rodrigues, T. K. D. Peron, P. Ji, and J. Kurths, "The kuramoto model in complex networks," Physics Reports, vol. 610, pp. 1­98, 2016. The Kuramoto model in complex networks.
[30] J. A. Acebrón, L. L. Bonilla, C. J. Pérez Vicente, F. Ritort, and R. Spigler, "The kuramoto model: A simple paradigm for synchronization phenomena," Rev. Mod. Phys., vol. 77, pp. 137­185, Apr 2005.
[31] S. Boluki, M. S. Esfahani, X. Qian, and E. R. Dougherty, "Incorporating biological prior knowledge for bayesian learning via maximal knowledge-driven information priors," BMC bioinformatics, vol. 18, no. 14, pp. 61­80, 2017.
[32] S. Boluki, M. S. Esfahani, X. Qian, and E. R. Dougherty, "Constructing pathway-based priors within a gaussian mixture model for bayesian regression and classification," IEEE/ACM transactions on computational biology and bioinformatics, vol. 16, no. 2, pp. 524­537, 2017.
18

