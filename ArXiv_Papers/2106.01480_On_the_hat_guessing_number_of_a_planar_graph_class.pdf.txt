arXiv:2106.01480v1 [math.CO] 2 Jun 2021

ON THE HAT GUESSING NUMBER OF A PLANAR GRAPH CLASS
PETER BRADSHAW
Abstract. The hat guessing number is a graph invariant based on a hat guessing game introduced by Winkler. Using a new vertex decomposition argument involving an edge density theorem of Erdos for hypergraphs, we show that the hat guessing number of all outerplanar graphs is less than 2125000. We also define the class of layered planar graphs, which contains outerplanar graphs, and we show that every layered planar graph has bounded hat guessing number.
1. Introduction
The hat guessing game is defined as follows. We have a graph G, and a player resides at each vertex of G. For each v  V (G), the player at v can see exactly those players at the neighbors of v. In particular, a player cannot see himself. An adversary possesses a large collection of hats of different colors. When the game starts, the adversary places a hat on the head of each player, and then each player privately guesses the color of his hat. The players win the game if at least one player correctly guesses the color of his hat; otherwise, the adversary wins. Before the game begins, the players may come together to devise a guessing strategy, but this strategy is known to the adversary, and the adversary may choose a hat assignment with the strategy of the players in mind. The hat guessing game was first considered for complete graphs by Winkler [19] and later for general graphs by Butler, Hajiaghayi, Kleinberg, and Leighton [5].
The hat guessing game is typically studied with the following two assumptions. First, it is assumed that the adversary possesses enough hats of each color so that no color will ever run out while the adversary is assigning hats to players. Second, it is assumed that the players follow a deterministic strategy to guess their hat colors; that is, the guess of a player at a vertex v is uniquely determined by the hat colors at neighbors of v. Given a graph G, we say that the hat guessing number of G is the maximum number k of hat colors such that the players on G have a strategy that guarantees that at least one player will correctly guess his hat color when each player is given a hat with a color from the set {1, . . . , k}. We write HG(G) for the hat guessing number of G. In other words, if HG(G)  k, then there exists a strategy for players on the graph G such that for any hat color assignment V (G)  {1, . . . , k}, at least one player will correctly guess the color of his hat.
We may describe the hat guessing game formally as a graph coloring problem as follows. Let G be a graph, and let S be a set of colors. We define a hat guessing strategy on G to be a family  = {v}vV (G) of functions, where each function is a mapping v : SN(v)  S; that is, each function v takes a coloring of N (v) as input and returns a color from S as output. We say that the strategy  is a winning strategy if, for every (not necessarily proper) graph coloring  : V (G)  S, there exists a vertex v  V (G) with neighbors (u1, . . . , ut) such that v maps ((u1), . . . , (ut)) to (v). It is clear that the players win the hat guessing game on G with hat color set S if and only if there exists a winning strategy  on G. It was shown in [14] that with optimal play, the winner of the hat guessing game does not change even when each vertex v  V (G) receives a hat from an arbitrary list Lv of size |S|, rather than from the set S. Furthermore, it was shown that if each vertex v  V (G) has a list Lv of possible hat colors, then only the size of each list Lv affects whether or not the players have a winning strategy on G.
1

We find it useful to give a simple example of a winning strategy in the hat guessing game. We consider the hat guessing game played on K2 in which the adversary has only red hats and blue hats. We refer to the players as Alice and Bob. It is straightforward to see that Alice and Bob have the following winning strategy: Alice will guess the color of Bob's hat, and Bob will guess the opposite color of Alice's hat. This way, if Alice and Bob receive the same hat color, then Alice will guess correctly. On the other hand, if Alice and Bob receive different hat colors, then Bob will guess correctly. This shows that HG(K2)  2, and in fact, HG(K2) = 2 [8].
While the rules of the hat guessing game are simple, establishing bounds for the hat guessing number of large graph classes is surprisingly difficult. In contrast to other game-related graph parameters such as game coloring number [20] and cop number [13, 4], no known upper bound is known for the hat guessing number of graphs of bounded treewidth or graphs of bounded genus. Farnik [7] has asked whether the hat guessing number of a graph G is bounded by some function of the degeneracy of G, but this question remains unanswered, and graphs of degeneracy d and hat guessing number at least 22d-1 have been constructed [12]. In particular, the following more specific question, appearing in [3] and [15], remains unanswered:
Question 1.1. Is the hat guessing number of planar graphs bounded above by some universal constant?
While Question 1.1 has not yet been answered, Kokhas and Latyshev [15] have shown examples of planar graphs G for which HG(G)  14. For some restricted graph classes, such as cliques [8], cycles [18], complete bipartite graphs [1, 10], graphs of bounded degree [7], graphs of bounded treedepth [12], embedded graphs of large girth [3], cliques joined at a single cut-vertex, and split graphs [11], bounds for the hat guessing number have been determined.
In this paper, we will take a major step toward answering Question 1.1 by proving an affirmative answer for a large class of planar graphs. For outerplanar graphs, we will prove the following result.
Theorem 1.2. If G is an outerplanar graph, then HG(G) < 2125000.
We will also prove an upper bound for the hat guessing number of layered planar graphs, which we roughly define as planar graphs that can be obtained by beginning with a 2-connected outerplanar graph G1, and then for i  1, adding a 2-connected outerplanar graph Gi+1 to some interior face of Gi and adding non-crossing edges between Gi and Gi+1. We also use the term layered planar graph to describe a subgraph of such a planar graph. For layered planar graphs, we have the following result.
Theorem 1.3. If G is a layered planar graph, then log2 log2 log2 log2 log2 HG(G) < 149.
Theorems 1.2 and 1.3 are the first results that show upper bounds for the hat guessing number of large topologically defined graph classes. The main ingredients for the proofs of Theorems 1.2 and 1.3 will be a vertex partition lemma from Bosek et al. [3], as well as a new theorem that bounds the hat guessing number of graphs that admit a vertex partition with a certain tree-like structure. The proof of this new theorem uses an argument based on a Tura´n-type edge density problem, and the combination of our edge-density argument and the lemma of Bosek et al. is what causes our upper bounds to be so large.
The paper will be organized as follows. In Section 2, we will introduce some important tools that we will need for our two main theorems. In Section 3, we will show that every outerplanar graph has a vertex partition satisfying certain key properties, and then with the help of the tools introduced in Section 2, we will prove Theorem 1.2. In Section 4, we will use a similar strategy to extend our methods beyond outerplanar graphs and prove Theorem 1.3. Finally, in Section 5, we will show that if an upper bound can be obtained for a certain stronger version of the hat guessing number on planar graphs, then an upper bound on the hat guessing number can be obtained for all graphs of bounded genus.
2

2. Multiple guesses, vertex partitions, and edge density

In this section, we will outline three key tools that we will use to prove Theorem 1.2 and 1.3. These tools use a modified version of the hat guessing game in which each player may attempt to guess his hat color s times (without hearing the guesses of the other players). Given a graph G and an integer s  1, if k is the maximum integer for which the players on G, when assigned hats from the color set {1, . . . , k}, have a strategy that guarantees at least one correct hat color guess when each player is allowed to guess s times, then we write HGs(G) = k.
The first of our tools follows from a simple application of Lov´asz's Local Lemma [17]; see [7] for more details.

Lemma 2.1. Let s  1 be an integer. If G is a graph of maximum degree , then HGs(G) < ( + 1)es.

Our next two tools both tell us that if the vertices of a graph can be partitioned into sets satisfying certain conditions, then the hat guessing number of the graph is bounded. The following lemma was introduced by Bosek et al. [3], but since the proof is simple and elegant, we will include it.

Lemma 2.2 ([3]). Let s  1 be an integer. Let G be a graph, and let V (G) = A  B be a partition of the vertices of G. If each vertex in A has at most d neighbors in B, then HGs(G)  HGs(G[A]), where s = s(HGs(G[B]) + 1)d.

Proof. We choose an integer value k for which HGs(G[A]) < k, and we show that HGs(G) < k. Clearly k > s. We fix a list of exactly HGs(G[B]) + 1 colors at each vertex of B. For each vertex v  A, every possible coloring of N (v) B gives v a unique guessing function on G[A], and there are (HGs(G[B]) + 1)d possible colorings of N (v)  B. Therefore, with our color lists on B determined, for each hat assignment on G[A], v will guess from a total of at most s possible guesses. By our
assumption, we may assign each vertex of A a hat from the color set {1, . . . , k} in such a way that no vertex of G[A] guesses its hat color correctly, even with s guesses. We give G[A] such a hat assignment, and since each vertex v  A will guess from a set of at most s colors, no vertex of A
guesses its hat color correctly.
Now, with hat colors at A assigned, every vertex in B has a hat guessing function depending
only on G[B]. Since each vertex in B has HGs(G[B]) + 1 colors in its list, we may give every vertex in B a hat color from its corresponding list in such a way that no vertex of B guesses its hat color
correctly. Since we used at most k total hat colors and no player guessed his hat color correctly, it
follows that HGs(G) < k.

By using the same approach, one can prove the following more general version of Lemma 2.2.

Lemma 2.3. Let s  1 be an integer. Let G be a graph with a vertex partition V (G) = V1 · · ·Vk. Let 1, . . . , k be positive integers. Assume that for each pair i, j satisfying 1  i < j  k, each vertex v  Vi has at most di,j neighbors in Vj. For 1  i  k - 1, define

si

=

sid+i,i1+1

·

di,i+2
i+2

·

···

·

dki,k ,

and define sk = s. If, for each value 1  i  k, it holds that

HGsi(G[Vi]) < i,

then HGs(G) < max{1, . . . , k}.

Finally, we will define a third tool that we will need for Theorems 1.2 and 1.3. Our last tool relies heavily on theory related to a Tura´n-type edge density problem. We will need some definitions. First, an r-partite r-uniform hypergraph H is defined as a set V of vertices and a collection E of
3

r-tuples from V , satisfying the following property: V can be partitioned into r parts V1, . . . , Vr

so that every r-tuple in E intersects each part Vi at exactly one vertex. We often use the term

r-partite r-graph to refer to an r-partite r-uniform hypergraph, and we often call the r-tuples in E

edges. We say that an r-partite r-graph is balanced if |V1| = · · · = |Vr|. We say that an r-partite

r-graph K is complete if it contains every possible edge e satisfying |e  Vi| = 1 for every vertex part Vi, and if K is also balanced and has r vertices, then we write K = K(r). Next, for integers r  1,   r, and n  , we define the quantity E(r)(n, ) to be the maximum number of edges

in a balanced r-uniform r-graph balanced r-uniform r-graph with

with rn vertices and with no complete rn vertices and nr edges certainly must

K(r) subgraph. Since a contain such a subgraph,

we see that E(r)(n, ) is well-defined and less than nr.

We give several examples of the quantity E(r)(n, ). When r = 1, an r-partite r-graph is simply

a collection of vertices in which some of these vertices are also called edges, and a K(1) is simply a collection of  of these "edges." Any 1-partite 1-graph with at least  edges clearly must contain

a K(1), so for all 1    n, E(1)(n, ) =  - 1. When r = 2, the quantity E(2)(n, ) describes the maximum number of edges in a balanced bipartite graph on 2n vertices containing no copy of K,. The question of determining the precise value of E(2)(n, ) is a special case of a classic problem of

Zarankievicz, which asks how many edges a bipartite graph on m + n vertices can have without

containing a copy of Ks,t. This problem of Zarankiewicz has a long history and has led to many

beautiful results; see [9] for an extensive survey of this area of combinatorics.

For our final tool, we will need the following theorem of Erdos [6], which gives an upper bound

for E(r)(n, ). The original result of Erdos assumes that n is sufficiently large, but we will need a

result that holds even for small n, so we present a slightly modified form of Erdos's original result.

Lemma 2.4. Let r  2, let G be a balanced r-partite r-graph with rn vertices, and let 2    n.

If

|E(G)|



3nr-

1 r-1

,

then

G

contains

a

copy

of

the

r-graph

K(r).

Proof. The proof of the theorem is very similar to the original proof of Erdos, and we defer the proof to the appendix.

We are now ready for our last main tool for proving Theorem 3.5. The following result, which is useful for bounding the hat guessing number of outerplanar and layered planar graphs, is also interesting in its own right. Our proof of this result uses key ideas from the proof of Butler et al. [5] that HG(T ) = 2 for every tree T . For a graph G and a vertex subset U  V (G), we write N (U ) for the set of vertices with at least one neighbor in U .

Theorem 2.5. Let r, s  1 be integers. Let G be a graph, and let V1, . . . , Vt be a partition of V (G)
such that the quotient graph G/(V1, . . . , Vt) is a tree. Suppose that for each pair Vi, Vj, it holds that |N (Vi)  Vj|  r. If HGs(G[Vi]) <  for all 1  i  t, then HGs(G)  (3)rr-1 when r  2, and
HGs(G)  ( - 1) when r = 1.

Proof. We would like to assume that for each Vi, every neighboring set Vj satisfies |N (Vi)  Vj| = r. This can be achieved by adding isolated vertices to each neighboring set Vj and then adding edges between these new vertices and vertices of Vi. These extra vertices will not cause any of our hypotheses to be violated, nor will they decrease the hat guessing number of G.
We let k = (3)rr-1 + 1 when r  2, and we let k = ( - 1) + 1 when r = 1. We aim to show that HGs(G) < k. We first make the following claim.
Claim 2.6. r E (r)(k, ) < kr.

Proof. When r = 1, the claim asserts that ( - 1) < k, which is clearly true. When r  2, Lemma

2.4

states

that

E(r)(k, )

<

3k

r-

1 r-1

.

Then,

r E(r)(k, )

<

3r

k-

1 r-1

kr

<

kr.

4

Now, we fix a guessing strategy  on G. We prove the following stronger statement.
Let 1  i  t. If every vertex in Vi has a list of  colors and every other vertex in G has a list of k colors, then the adversary has a winning hat assignment.
We induct on t. When t = 1, the statement holds from the fact that HGs(G[V1]) = HGs(G) < . Now, suppose t > 1, and let i be some value satisfying 1  i  t. We must show that if every vertex in Vi has a list of  possible hat colors and every other vertex of G has a list of k possible hat colors, then the adversary has a winning hat assignment.
Consider a set Vi. In each neighboring set Vj of Vi, there exists a set Uj  Vj of exactly r vertices that have neighbors in Vi, and there also exists a set Wj  Vi of exactly r vertices that are neighbors of Uj. We write Cj for the component of G \ Vi containing Vj. If a hat assignment  on Wj is fixed, then  determines a unique hat guessing strategy on Cj. Furthermore, by the induction hypothesis, if each vertex of Cj has the color list {1, . . . , k}, then with  fixed, the adversary has a winning hat assignment on Cj. We let B,j be the set of hat assignments on Cj that cause the adversary to win the restricted game on Cj when the players use the hat guessing strategy determined by . Then, we let A,j be the set of distinct colorings of Uj that can be obtained by restricting an assignment of B,j to Uj. We see from the induction hypothesis that A,j is nonempty. Now, we make the following claim:
Claim 2.7. If  is a fixed hat assignment on Wj, then A,j contains at least rk - E(r)(k, ) distinct colorings.
Proof. Suppose that A,j contains at most rk - E(r)(k, ) - 1 distinct colorings. We construct a balanced r-partite r-graph H on kr vertices as follows. We write Uj = {u1, . . . , ur}. Then, we let the kr vertices of H be indexed by (up, q), where up  Uj and 1  q  k. Finally, for each hat assignment in A,j, in which each vertex up  Uj is given a hat of some color p, we add an edge to H of the form {(u1, 1), (u2, 2), . . . , (ur, r)}. Now, since A,j has at most rk - E(k, r) - 1 edges, it follows that the complement graph H contains at least E(r)(k, ) + 1 edges, and hence H contains a copy of K(r). In other words, there exist sets L1  {1, . . . , k}, . . . , Lr  {1, . . . , k}, each of size , such that A,j contains no hat assignment in which each vertex up is assigned a hat with a color from Lp. It then follows that when each vertex up  Uj is given the color list Lp and every other vertex of Cj is given a list of k colors, the adversary has no winning hat assignment using these lists. However, this contradicts the induction hypothesis applied to Cj and with Vj instead of Vi. Thus, the claim holds.
Now, for each component Cj, we compute A,j for each of the r hat assignments  on Wj using the pre-assigned lists of size . Since r E (r)(k, ) < kr, for each j, the intersection  A,j is nonempty by the pigeonhole principle, where  is taken over the r hat assignments on Wj. Hence, we can choose an assignment Aj from this intersection, and we use Aj to assign hats to the vertices in Uj. Since the guessing strategies of the remaining vertices in Cj depend only on Aj, and since Aj is a restriction of a winning hat assignment, we may extend Aj to a winning hat assignment on all of Cj. We observe that now, regardless of which hat assignment  is made at Wj, our hat assignment on Cj is a restriction of a winning hat assignment on Cj  Wj, and hence no vertex in Cj will guess its hat color correctly. By repeating this process for each component Cj, we assign hats to all vertices outside of Vi in such a way that no vertex outside of Vi will guess its hat color correctly.
Now, it remains to show that we can complete our hat assignment by assigning hats to Vi in such a way that no remaining vertex guesses its hat color correctly. Since our hat assignments at V1, . . . , Vi-1, Vi+1, . . . , Vt are already determined, each vertex of the graph G[Vi] has a guessing function depending only on G[Vi]. Since HGs(G[Vi]) <  and the lists of possible hat colors at Vi each have  colors, the adversary has a winning hat assignment at Vi. This completes the proof.
5

3. Outerplanar graphs
In this section, we prove Theorem 1.2, showing that the hat guessing number of outerplanar graphs is bounded. We need some definitions and lemmas.
Definition 3.1. We define a petal graph G to be a graph obtained from a (possibly empty) path P by adding a vertex v adjacent to every vertex of P . We say that v is the stem of G. Then, we define a petunia to be a graph in which every block is a subgraph of a petal graph.
We note that a petal graph is an example of a fan graph, which is constructed from a path and a coclique joined by a complete bipartite graph. We use the term petunia rather than flower so as not to be confused with other uses of the word flower in combinatorics (e.g. [2]). In the following lemma, we show that petunias admit a vertex partition satisfying the conditions described in Theorem 2.5.
Lemma 3.2. If G is a petunia, then V (G) can be partitioned into forests F1, . . . , Ft such that the quotient graph G/(F1, . . . , Ft) is a forest and such that for each pair i, j, |N (Fi)  V (Fj)|  3.
Proof. We add edges to G until every block of G is a petal graph. Then, we will color V (G) red and blue, and we will let each maximal monochromatic subgraph of G give the vertex set of a tree Fi. After removing our extra edges from G, the subgraphs F1, . . . , Ft will make a family of forests satisfying the conditions of the lemma.
We give a general procedure for how to color the vertices of a block H of G with red and blue. We let H consist of a stem v and a path P . If v is colored with either color, then we color the path P formed by the non-stem vertices of H so that P alternates between red and blue. If a vertex w  V (P ) is colored with either color, then extend the coloring of w to the entire path P formed by the non-stem vertices of H so that P alternates between red and blue. Then, we color v with either color. To color G, we begin by coloring a vertex of each component of G with an arbitrary color, and then we extend the coloring using the procedure we have described.
We argue that for a pair i, j, the tree Fi has at most three neighbors in Fj. If Fi has at most one neighbor in Fj, then we are done. Otherwise, choose vertices u, v  V (Fi) so that u has a neighbor x  V (Fj) and v has a neighbor y  V (Fj ) distinct from x. Since Fi is a tree, there exists a path P (possibly of length 0) in Fi from u to v, and similarly, there exists a path Q in Fj from x to y. Then, V (P )  V (Q) gives the vertex set of a cycle C in G, and C must belong to a single block H of G. It then follows that every vertex in N (Fi)  V (Fj) belongs to the block H. However, based on our construction, in any block H of G, one tree Fs forms a star containing the stem of H, and every other tree Fq has a single vertex. Thus it is easy to see that Fi has at most three neighbors in Fj.
Finally, we argue that the quotient graph G/(F1, . . . , Ft) is a forest. Suppose that this quotient graph contains a cycle C. We assume without loss of generality that F1 belongs to C, with neighbors F2 and F3. Using a similar argument to that above, there exists a cycle C in G that visits Fi, then Fi+1, and then later visits Fi+2 without once again visiting Fi (with i  {1, 2, 3} and addition "wrapping around"). Since C is two-connected, C must belong to a single block H of G. However, again, because H is partitioned by the trees Fi into a single star and an independent set, the cycle C cannot satisfy these properties. Therefore, the quotient graph G/(F1, . . . , Ft) is a forest.
Lemma 3.2 shows that the hypotheses of Theorem 2.5 hold for petunias with r = 3. Therefore, we can obtain an upper bound on the hat guessing number of petunias as follows.
Theorem 3.3. If G is a petunia, then HGs(G)  (3s2 + 3s + 3)3(s2+s+1)2 .
Proof. We partition G into forests Fi as described in Lemma 3.2. By Theorem 2.5 (and also by a result of Bosek et al. [3]), each forest Fi satisfies HGs(Fi)  (s + 1)s. Then, by applying Theorem 2.5 to each component of G with r = 3 and  = (s + 1)s + 1, we obtain the result.
6

In order to prove Theorem 1.2, we will need one more lemma. In the following lemma, we show that using the notion of petunias, we can find a useful vertex decomposition of any outerplanar graph.
Lemma 3.4. If G is an outerplanar graph, then V (G) can be partitioned into two sets A and B such that G[A] is a petunia, B is an independent set, and each vertex of A is adjacent to at most three vertices of B.
Proof. We prove the following stronger claim:
Let G be an outerplanar graph, and let uv be an edge of G oriented from u to v. Then V (G) can be partitioned into two sets A and B such that the following hold: (1) G[A] is a petunia containing uv; (2) B is an independent set; (3) u is not adjacent to any vertex of B; (4) v is adjacent to at most two vertices of B; (5) Every other vertex of G is adjacent to at most three vertices of B.
We prove the statement by induction on |V (G)|. If |V (G)|  2, implying that G is a forest, we let all vertices of G belong to A, and then all of the criteria hold. Now, suppose that |V (G)|  3, and let uv  E(G). We give G an outerplanar drawing. Since the class of petunias is closed under taking subgraphs, we may add edges to G until G is an outerplanar triangulation, and doing so will not make our task any easier. Since G is an outerplanar triangulation, it follows that G is 2-connected, and hence G contains a Hamiltonian cycle C separating the outer face of G from all other faces.
We begin to construct our sets A and B as follows. We first add all vertices in N [u] to A. Note that N [u] induces a petunia in G. Now, let t = deg(u), and write w1 and wt for the neighbors of u via C, and assume without loss of generality that the neighbors of u, in clockwise order, are w1, w2, . . . , wt. We observe that any given component K of G \ N [u] is separated from the rest of G by two vertices of the form wi, wi+1, for some 1  i  t - 1. We show an example of such a component K in Figure 1.
Now, if N [u] contains all vertices of G, then it is easy to check that we are done. Otherwise, let K be some component of G \ N [u], and let K be separated from the rest of G by wi, wi+1. Since G is an outerplanar triangulation, uwi and uwi+1 lie on some triangle T in the interior of C, so wi and wi+1 are adjacent. Furthermore, since wi and wi+1 separate some component K from the rest of G, it must follow that the edge wiwi+1 does not belong to C, and hence T shares the edge wiwi+1 with a second triangle T  in the interior of C. The triangle T  includes the vertices wi and wi+1, along with a third vertex xi. We add xi to B, and we add all neighbors of xi to A.
Now, let the neighbors of xi, in clockwise order, be y1, . . . , ys, with y1 = wi and ys = wi+1. Let yj and yj+1 be neighbors of xi along C. Since G is an outerplanar triangulation, it follows that G contains the edge yy+1 for 1    j - 1, as well as for j + 1    s - 1. Now, for 1    j - 1, we orient the edge yy+1 from y to y+1. Then, for j + 1    s - 1, we orient the edge yy+1 from y+1 to y. Finally, for each value   [s - 1] \ j, we apply the induction hypothesis to the outerplanar subgraph of G that is either 2-connected or isomorphic to K2 whose outer facial walk is given by the edge yy+1 along with the path from y to y+1 along C. By induction, all vertices of G are partitioned into the sets A and B.
We claim that all criteria of the induction statement are satisfied. First, we must show that G[A] is a petunia containing uv. By construction, A contains u and v. Also, clearly N [u] is a petunia, as G is outerplanar. Furthermore, each vertex y described in the process above must be a cut-vertex in G[A], so G[A] remains a petunia even after adding vertices using the induction hypothesis. Second, clearly no pair xi, xj is adjacent, so B is initially an independent set. Furthermore, as all neighbors of each xi are added to A, B remains an independent set even after applying the
7

u T

T

wi+1 = ys

ys-1

···

yj+1

xi

yj

· · · wi = y1

Figure 1. The figure shows part of the outerplanar graph G from the proof of Lemma 3.4. The black vertices in the figure belong to the set A, and the white vertex belongs to the set B. Each shaded region represents some outerplanar subgraph of G. We may partition V (G) as described in Lemma 3.4 by applying the induction hypothesis to each of the outerplanar graphs shown as a shaded region in the figure.
induction hypothesis. Third, by construction, u is not adjacent to any vertex of B. Fourth, if v = wi, then as G is outerplanar, v is initially adjacent to at most two vertices of B, namely xi and xi-1. Furthermore, each vertex wi is the tail of an arc in all outerplanar graphs containing wi for which the induction hypothesis is applied, and thus wi does not gain any neighbors in B after applying induction because of criterion (3).
Finally, we argue that each vertex z  A is adjacent to at most three vertices of B. If z is of the form wi or u, then (5) holds for z. Otherwise, if z is of the form y in the process described above, then z belongs to at most two outerplanar graphs H, H for which the induction hypothesis is called, and z belongs to an arc of both H and H. Furthermore, z is the head of at most one of these arcs. Therefore, by criteria (3) and (4), z gains at most two neighbors in B during induction. As we have assumed that z is not of the form u or wi, it follows that z is adjacent to at most one vertex of the form xi. Therefore, z has at most three neighbors in B. Finally, if none of the above holds, then z belongs to an outerplanar graph H on which induction is applied, and z is separated from all vertices xi by some edge yy+1. Therefore, by criterion (5), z has at most three neighbors in B. Thus the induction statement holds, and the proof is complete.
With Lemma 3.4 proven, we are ready to apply Lemma 2.2 and Theorem 3.3 to obtain an upper bound for the hat guessing number of outerplanar graphs. Letting s = 1 in the following theorem immediately implies Theorem 1.2.
Theorem 3.5. If G is an outerplanar graph, then
HGs(G)  (3(s + 1)6 + 3(s + 1)3 + 3)3((s+1)6+(s+1)3+1)2 .
Proof. We partition G using Lemma 3.4 so that G[A] is a petunia, B is an independent set, and each vertex of A has at most three neighbors in B. Since HGs(G[B]) = s, we follow Lemma 2.2
8

u1

ut

Li-1

Li v
Figure 2. The figure shows a vertex v  Li with u1 as its counterclockwise-most neighbor and with ut as its clockwise-most neighbor. We use green to color all vertices in Li-1 on the clockwise side of vu1 and on the counterclockwise side of vut.
and set d = 3 and s = (s + 1)3. Then, according to Lemma 2.2 and Theorem 3.3, HGs(G)  HG(s+1)3 (G[A])  (3(s + 1)6 + 3(s + 1)3 + 3)3((s+1)6+(s+1)3+1)2 .

4. Layered planar graphs
In this section, we compute an upper bound for the hat guessing number of layered planar graphs. Formally, we define layered planar graphs as follows.
Definition 4.1. Consider a planar graph H obtained from the following process. We begin with a 2-connected outerplanar graph G1 embedded in the plane so that the unbounded face is incident to all vertices of G1. Then, we choose some integer t  1, and for each 2  i  t, we draw a 2-connected outerplanar Gi inside some interior face of Gi-1 so that in the drawing of Gi, the unbounded face contains all vertices of Gi. Then, we add some set of edges between Gi-1 and Gi in such a way that does not introduce a crossing. If G is a subgraph of a graph H constructed in this way, then we say that G is a layered planar graph.
We obtain the following upper bound for the hat guessing number of layered planar graphs. Letting s = 1 in the following theorem immediately implies Theorem 1.3.
Theorem 4.2. If G is a layered planar graph, then log2 log2 log2 log2 HGs(G) < 2149s35.
Proof. We fix a drawing of G in the plane. We partition the vertices of G into levels Li as follows. First, we let L1 denote the set of vertices on the outer face of G. Then, for i  1, we let Li+1 denote the set of vertices on the outer face of G \ (L1  · · ·  Li). For each value i, we write Gi = G[Li]. Since G is a layered planar graph, we may assume that Gi is a 2-connected outerplanar graph for each level Li, and that every edge of G either has both endpoints in some Li or has one endpoint in some Li and the other endpoint in Li+1. If a vertex v  Li has a neighbor u, then we say that u is a parent of v if u  Li-1, a sibling of v if u  Li, and a child of v if u  Li+1.
Now, we will begin to partition the vertices of G into color classes. Initially, we let every vertex of G be colored blank. Then, for each vertex v in each level Li, let u1, . . . , ut be the parents of v in clockwise order. We let Kv denote the (possibly empty) subgraph of Gi-1 that is separated from the rest of Gi-1 by u1 and ut and that can be reached by travelling from v to u1 and then turning right. In other words, Kv is on the "clockwise side" of the arc vu1 and the "counterclockwise side" of vut, and if Kv is nonempty, it contains the vertices u2, . . . , ut-1. We color every vertex of Kv green, as shown in Figure 2. Observe that by planarity, since Gi and Gi-1 are 2-connected, each vertex of Kv can only have v as a child.
Next, for every vertex v  V (G), if v has at least three children, then we color v red. Since each green vertex has only one child, no vertex will be colored both green and red. Then, if a red vertex
9

v Li
Li+1
Figure 3. The figure shows a red vertex v  Li with several red children. We use pink to recolor the clockwise-most and counterclockwise-most red children of v.
v has at least one red child, then we use pink to recolor the clockwise-most and counterclockwisemost red child of v, as shown in Figure 3. Finally, we use blue to color all remaining blank vertices in a level Li with i even, and we use indigo to color all remaining blank vertices in a level Li with i odd.
Now, we make a series of claims about our coloring of G. The ultimate goal of these claims will be to show that we can apply Lemma 2.3 to obtain an upper bound for HGs(G).
Claim 4.3. The green vertices of G induce an outerplanar graph, and every green vertex has at most five neighbors in a color other than green.
Proof. We first show that each green vertex has at most five non-green neighbors. Let v be a green vertex. Since all parents of v except for the clockwise most and counterclockwise most parent are colored green, v has at most two non-green parents. If v  Li, then by construction, v belongs to a connected green subgraph in Gi that is separated from the rest of Gi by two non-green vertices. Therefore, v also has at most two non-green siblings. Finally we have observed previously that v has at most one child. Therefore, v has at most five non-green neighbors.
Now, we show that the green vertices of G induce an outerplanar graph. Since each Gi is an outerplanar graph, clearly the green vertices in any single level Li induce an outerplanar graph. Furthermore, by construction, for any two distinct green vertices u, v  Li, no green parent of u is equal to or adjacent to a green parent of v, and hence no ancestor of u in the green induced subgraph is equal to or adjacent to an ancestor of v in the green induced subgraph. Therefore, the green induced subgraph of G is a graph in which each block is an outerplanar graph contained in some level Li, and hence the green induced subgraph of G is outerplanar.
Claim 4.4. The blue vertices of G induce an outerplanar graph, and every blue vertex has at most six neighbors in indigo, red, or pink.
Proof. Clearly the blue vertices induce an outerplanar graph, as they induce a subgraph of the disjoint union of the outerplanar graphs Gi for even i.
Now, let v be a blue vertex. As v is not red or pink, v has at most two indigo, red, or pink children. As all but at most two parents of v are colored green, v has at most two indigo, red, or pink parents. We also observe that by construction, v has no indigo sibling.
Finally, we argue that v has at most two red or pink siblings. If Gi+1 is empty, then clearly v does not have a red or pink sibling, so we assume that Gi+1 is a 2-connected outerplanar graph. Since G is a layered planar graph, Gi has a cycle Ci such that E(Ci) and the interior of E(Ci) contain all edges of Gi. Suppose that v has at least three red or pink siblings. Assume that when starting outside Ci and then visiting the edges incident to v in clockwise order, we visit edges incident to three red or pink siblings u1, u2, u3, in order. Observe that since Gi is outerplanar, the edge vu2 separates the interior of Ci into two regions, one containing u1 and one containing u3. However, since Gi+1 is connected, the edge vu2 separates one of u1, u3 from Gi+1, contradicting
10

the assumption that both of these vertices have neighbors in Gi+1. Therefore, v has at most two red or pink siblings.
Claim 4.5. The indigo vertices of G induce an outerplanar graph, and every indigo vertex has at most six neighbors in red or pink.
Proof. The proof is similar to that of Claim 4.4.
Claim 4.6. The red vertices in G induce a petunia, and every red vertex has at most six pink neighbors.
Proof. Let v be a red vertex. As argued before, v has at most two non-green parents. By the same argument used in Claim 4.4, v has at most two pink siblings. Finally, if v  Gi, then since Gi+1 is 2-connected and outerplanar, v has at most two pink children.
Claim 4.7. The pink vertices in G induce a graph of maximum degree 6.
Proof. The proof is similar to that of Claim 4.6.
Now, we are ready to apply Lemma 2.3 and obtain an upper bound for the hat guessing number of planar graphs. Following Lemma 2.3, we let V1 denote the green vertices of G, V2 the blue vertices, V3 the indigo vertices, V4 the red vertices, and V5 the pink vertices. Then, we define the following values:
5 = 20s s4 = s65 = (20)6s7 4 = (3s24 + 3s4 + 3)3(s24+s4+1)2 + 1 < 22138s30 s3 = s64 < 22141s35 3 = (3(s3 + 1)6 + 3(s3 + 1)3 + 3)3((s3+1)6+(s3+1)3+1)2 + 1 < 222145s35 s2 = s63 < 222146s35 2 = (3(s2 + 1)6 + 3(s2 + 1)3 + 3)3((s2+1)6+(s2+1)3+1)2 + 1 < 2222147 s35 s1 = s52 < 2222148s35 1 = (3(s1 + 1)6 + 3(s1 + 1)3 + 3)3((s1+1)6+(s1+1)3+1)2 + 1 < 22222149 s35
We verify these estimates in the appendix. Since the upper bound given by this method is probably too large, we make no real effort to optimize our estimates.
Now, we must check that all of the hypotheses of Lemma 2.3 hold. It is easy to check from our claims that we have given appropriate definitions to each value si. (In fact, we may overestimate the values of s1, s2, s3, but this is fine.) Then, we show that each i is large enough as follows.
As the pink vertices induce a subgraph of maximum degree at most 6, it follows from Lemma 2.1 that HGs(G[V5]) < 20s. As G[V4] is a petunia, HGs4 < 4 by Theorem 3.3. Finally, as G[Vi] is outerplanar for i  {1, 2, 3}, HGsi(G[Vi]) < i for i  {1, 2, 3} by Theorem 3.5. Therefore, HGs(G) < 1, and the proof is complete.
5. Graphs of bounded genus
While it is still unknown whether the hat guessing number of planar graphs is bounded, it is straightforward to show that if HGs(H) is bounded for every planar graph H, then HGs(G) is also bounded for every graph G of bounded genus. We will use the following lemma of Mohar and
11

Thomassen, which follows from first principles of algebraic topology. For a graph G embedded on a surface S, we say that a cycle C in G is separating if S \ C has at least two connected components, or equivalently, if C is zero-homologous.

Lemma 5.1 ([16]). Let G be a graph embedded on a surface, and let x and y be two distinct vertices
of G. If P1, P2, and P3 are distinct internally disjoint paths with endpoints x and y, and if P1  P2 and P1  P3 are both separating cycles, then P2  P3 is also a separating cycle.

This lemma will allow us to use a straightforward inductive argument to prove the following theorem.

Theorem 5.2. If f is a function such that every planar graph H satisfies HGs(H) < f (s), then every graph G of genus g satisfies HGs(G) < f (32(6g-1)s6g ).

Proof. If g = 0, then G is planar, and there is nothing to prove. Otherwise, we assume that g  1.

Since G has no planar embedding, we must be able to find some non-separating cycle C in G. We

choose C to be a shortest non-separating cycle.

Now, we claim that every vertex v  V (G) \ V (C) has at most five neighbors in C. If |V (C)|  5,

then this claim clearly holds. Otherwise, suppose that C is of length at least six. If v has at least

six neighbors in C, then we must be able to choose two neighbors x, y  V (C) of v that are at

a distance of at least three along C. We define the path P1 = (x, v, y). We also define the path

P2 to be a shortest path from x to y along C, and we define P3 to be the path with edge set

E(C) \ E(P2).

We

observe

that

the

length

of

P1  P2

is

at

most

1 2

|V

(C

)|

+

2

<

|V

(C )|,

and

since

P3

has at most |V (C)| - 3 edges, the path P1  P3 has length at most |V (C)| - 1. Since C is a shortest

nonseparating cycle, it follows that P1  P2 and P1  P3 are both separating cycles. However, then

Lemma 5.1 implies that P2  P3 = C is a separating cycle, a contradiction. Thus our claim holds.

Now, we apply Lemma 2.2. We let A = V (G)\V (C) and let B = V (C). Observe that since C is a

nonseparating cycle, G[A] has genus at most g-1. Following Lemma 2.2, we set d = 5. Furthermore,

since G[B] has maximum degree 2, it follows from Lemma 2.1 that HGs(G[B]) < 3es < 9s, so we let s = (9s)5s = 310s6. Then, according to Lemma 2.2, HGs(G)  HGs(G[A]). By the induction

hypothesis,

H Gs (G[A]) < f (32(6g-1-1)s6g-1 ) = f (32·6g-1-2(310s6)6g-1 ) = f (312·6g-1-2s6g ) = f (32(6g -1)s6g ).

This completes the proof.

6. Conclusion
While we are not able to prove an upper bound for the hat guessing number of planar graphs, one principle that is clear from our method is that by bounding HGs for some small graph class, it is often possible to use such a bound along with some vertex partitioning method to obtain an upper bound for the hat guessing number of a larger graph class. Indeed, in order to obtain our upper bound for the hat guessing number of layered planar graphs, we started with an upper bound on HGs for forests, and then we extended this result to an upper bound for petunias, and then we extended this result to an upper bound for outerplanar graphs and finally for layered planar graphs. We hope that our upper bound in Theorem 4.2, along with some clever observations, will be enough to bound the hat guessing number of all planar graphs and give an affirmative answer to Question 1.1.
12

An obvious question remains that we have not yet addressed: Do our upper bounds in Theorems 1.2 and 1.3 really need to be so enormous? One of the main reasons for the sheer size of our upper bounds comes from our application of Erdos's edge density theorem in Lemma 2.4, and while we have shown that edge density arguments can be useful for bounding a graph's hat guessing number, we have by no means shown that they are necessary. However, He, Ido, and Przybocki [11] have shown that complete multipartite graphs are closely related to hat guessing on complete bipartite graphs and on cliques joined at a cut-vertex by working in an equivalent setting that considers "prism" subsets of Nr, and a similar idea appears in [3]. Therefore, we suspect that the hat guessing problem is closely related to classical Tura´n-type edge density problems, and while we do not believe that our upper bounds are best possible, we believe that even for outerplanar graphs, the correct upper bound for hat guessing number should be quite large. Therefore, we ask the following question, for which we suspect that the correct answer is at least 1000.
Question 6.1. What is the largest value HG(G) that can be achieved by an outerplanar graph G?
7. Acknowledgment
I am grateful to Bojan Mohar for reading an earlier draft of this paper and for suggesting Lemma 5.1 as a way to improve a previous version of Theorem 5.2.
References
[1] Noga Alon, Omri Ben-Eliezer, Chong Shangguan, and Itzhak Tamo. The hat guessing number of graphs. J. Combin. Theory Ser. B, 144:119­149, 2020.
[2] C. Avart, P. Komj´ath, T. L uczak, and V. Ro¨dl. Colorful flowers. Topology Appl., 156(7):1386­1395, 2009. [3] Bartlomiej Bosek, Andrzej Dudek, Michal Farnik, Jaroslaw Grytczuk, and Przemyslaw Mazur. Hat chromatic
number of graphs, 2019. [4] N. Bowler, J. Erde, F. Lehner, and M. Pitz. Bounding the cop number of a graph by its genus. Acta Math. Univ.
Comenian. (N.S.), 88(3):507­510, 2019. [5] Steve Butler, Mohammad T. Hajiaghayi, Robert D. Kleinberg, and Tom Leighton. Hat guessing games. SIAM
J. Discrete Math., 22(2):592­605, 2008. [6] P. Erdos. On extremal problems of graphs and generalized graphs. Israel J. Math., 2:183­190, 1964. [7] Michal Farnik. A hat guessing game. PhD thesis, Jagiellonian University, 2015. [8] Uriel Feige. You can leave your hat on (if you guess its color). Technical report, Weizmann Institute, 2004. [9] Zolta´n Fu¨redi and Mikl´os Simonovits. The history of degenerate (bipartite) extremal graph problems. In Erd¨os
centennial, volume 25 of Bolyai Soc. Math. Stud., pages 169­264. J´anos Bolyai Math. Soc., Budapest, 2013. [10] Maximilien Gadouleau and Nicholas Georgiou. New constructions and bounds for Winkler's hat game. SIAM J.
Discrete Math., 29(2):823­834, 2015. [11] Xiaoyu He, Yuzu Ido, and Benjamin Przybocki. Hat guessing on books and windmills, 2020. [12] Xiaoyu He and Ray Li. Hat guessing numbers of degenerate graphs. Electron. J. Combin., 27(3):Paper No. 3.58,
8, 2020. [13] Gwena¨el Joret, Marcin Kamin´ski, and Dirk Oliver Theis. The cops and robber game on graphs with forbidden
(induced) subgraphs. Contrib. Discrete Math., 5(2):40­51, 2010. [14] K. P. Kokhas and A. S. Latyshev. Cliques and constructors in the "hats" game. I. Zap. Nauchn. Sem. S.-
Peterburg. Otdel. Mat. Inst. Steklov. (POMI), 488(Kombinatorika i Teoriya Grafov. XI):66­96, 2019. [15] Aleksei Latyshev and Konstantin Kokhas. The hats game. the power of constructors, 2021. [16] Bojan Mohar and Carsten Thomassen. Graphs on Surfaces. Johns Hopkins series in the mathematical sciences.
Johns Hopkins University Press, 2001. [17] Joel Spencer. Asymptotic lower bounds for Ramsey functions. Discrete Math., 20(1):69­76, 1977/78. [18] Witold Szczechla. The three colour hat guessing game on cycle graphs. Electron. J. Combin., 24(1):Paper No.
1.37, 19, 2017. [19] P. Winkler. Games people don't play. In David Wolfe and Tom Rodgers, editors, Puzzlers' Tribute: A Feast for
the Mind, chapter 10, pages 301­313. A K Peters, Baltimore, 2002. [20] Xuding Zhu. The game coloring number of pseudo partial k-trees. Discrete Math., 215(1-3):245­262, 2000.
13

8. Appendix

Proof of Lemma 2.4. We induct on r. When r = 2, we must show that if G is a balanced bipartite

graph

on

2n

vertices

containing

at

least

3n2-

1 

edges,

then

G

contains

a

copy

of

K,.

By

a

classical

theorem of Kov´ari, So´s, and Tura´n, G contains a copy of K, as long as |E(G)|  ( - 1)1/(n -

 + 1)n1-1/ + ( - 1)n.

To

show

that

3n2-

1 

is

greater

than

this

lower

bound,

we

begin

with

the

following inequality, which can easily be verified graphically:

3 2

1-

1 

-



+

1

>

0.

Now,

since

( -

1)1/

<

3 2

for

all

,

and

since

n



,

we

have

(3

-

(

-

1)1/

)n1-

1 

-



+

1

>

0.

Next, since n > 0, we have

3n2-

1 

-

(

-

1)1/

n2-

1 

-

(

-

1)n

>

-(

-

1)

+1 

n1-

1 

.

Rearranging this equation gives us

3n2-

1 

>

(

-

1)1/

(n

-



+

1)n1-

1 

- ( - 1)n,

which is exactly what we need to finish the base case. Next, suppose that r  3. We will need to borrow a lemma from the original proof of Erdos.

Lemma 8.1. [6] Let S = {y1, . . . , yN } be a set of N elements, and let A1, . . . , An be subsets of

S. Let w > 0, and assume that

n i=1

|Ai|



nN w

.

If n  22w, then there exist  distinct sets

Ai1 , . . . , Ai

such

that

|Ai1

 · · ·  Ai| 

N 2w

.

Now,

suppose we have

a balanced r-partite

r-graph G with

rn

vertices

and

t



3nr-

1 r-1

edges.

We choose one of the r partite sets of G and name its vertices x1, . . . , xn. Next, we set N = nr-1,

and we let y1, . . . , yN denote the set of (r - 1)-tuples of vertices that can be obtained by choosing

exactly one vertex from each partite set of G outside of {x1, . . . , xr}. Then, for each xi, we let Ai

contain those yj for which xi  yj  E(G). We have

n

|Ai|

=

t



3nr-

1 r-1

.

i=1

We set w =

1 3

n

1 r-1

,

and

then

it

is easy

to verify that t 

nN w

and

that

n  22w,

so the hypotheses

of Lemma 8.1 hold. Hence, we may choose  vertices xi1, . . . , xi whose neighborhoods intersect in

at least

N 2w

=

3 2

nr-

1 r-2

>

3nr-

1 r-2

(r -1)-tuples. Then, by the induction hypothesis, we may find a copy of K(r-1) among these (r -1)tuples, and this K(r-1) along with the vertices xi1, . . . , xi form a copy of K(r). This completes the proof.

Proof of estimates in Theorem 4.2. Recall that 5 = 20s and s4 = (20)6s7. We will use the inequalities

(1)

(3s2 + 3s + 3)3(s2+s+1)2 + 1 < 2(3s)5

(2)

(3(s + 1)6 + 3(s + 1)3 + 3)3((s+1)6+(s+1)3+1)2 + 1 < 2(3s)13

for s  1. From (1), we see that

log2 4 < (3s4)5 = 35260530s35 < 2138s35.
14

Then, log2 s3 = log s + 6 log2 4 < 2141s35.
Then, using (2), log2 3 < (3s3)13, and so log2 log2 3 < 13 log2 3 + 13 log2 s3 < 2145s35.
The remaining bounds can be proven similarly using (2).
Department of Mathematics, Simon Fraser University, Vancouver, Canada Email address: pabradsh@sfu.ca
15

