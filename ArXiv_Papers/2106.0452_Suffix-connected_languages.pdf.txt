arXiv:2106.00452v1 [math.CO] 1 Jun 2021

SUFFIX-CONNECTED LANGUAGES
HERMAN GOULET-OUELLET
Abstract. Inspired by a series of papers initiated in 2015 by Berthé et al., we introduce a new condition called suffix-connectedness. We show that the groups generated by the return sets of a uniformly recurrent suffix-connected language lie in a single conjugacy class of subgroups of the free group. Moreover, the rank of the subgroups in this conjugacy class only depends on the number of connected components in the extension graph of the empty word. We also show how to explicitly compute a representative of this conjugacy class using the first order Rauzy graph. Finally, we provide an example of suffix-connected, uniformly recurrent language that contains infinitely many disconnected words.
1. Introduction
In [4], Berthé et al. introduced the notion of extension graph and used it to study the subgroups generated by the return sets in uniformly recurrent languages. One result achieved in that paper, dubbed the Return Theorem, states that if L is a uniformly recurrent language on the alphabet A such that all the extension graphs of L are trees, then the return sets of L are all bases of the free group on A [4, Theorem 4.5]. Moreover, they also show that part of this result holds under weaker assumptions: if we merely assume that the extension graphs of L are connected, then the return sets of L all generate the free group on A [4, Theorem 4.7]. The aim of this paper is to give a weaker condition under which a similar conclusion still holds. To do this, we introduce suffix extension graphs, a notion generalizing the extension graphs of [4]. This allows us to define a new condition called suffixconnectedness. Our main result is the following:
Theorem 1.1. Let L be a suffix-connected uniformly recurrent language on an alphabet A. Then the subgroups generated by the return sets of L all lie in the same conjugacy class and their rank is n - c + 1, where n = Card(A) and c is the number of connected components of the extension graph of the empty word.
Our proof is constructive, in the sense that we can also deduce a way to explicitly compute a representative for this conjugacy class. Moreover, the proof of Theorem 1.1 has two notable consequences that we wish to highlight now. The first
2010 Mathematics Subject Classification. 68Q45, 68R15. Key words and phrases. Tree sets, Extension graphs, Return words, Rauzy graphs, Stallings algorithm, Free groups. The author is grateful for the financial support provided by the Centre for Mathematics of the University of Coimbra (UIDB/00324/2020, funded by the Portuguese Government through FCT/MCTES), the Centre for Mathematics of the University of Porto (UIDB/00144/2020, funded by the Portuguese Government through FCT/MCTES), as well as a PhD grant from FCT/MCTES (PD/BD/150350/2019). Special thanks go to Jorge Almeida and Alfredo Costa for many helpful discussions and comments which greatly improved this paper.
1

2

H. GOULET-OUELLET

one is a characterization of suffix-connected, uniformly recurrent languages whose return sets generate the full free group.
Corollary 1.2. Let L be a suffix-connected and uniformly recurrent language on the alphabet A. Then the following statements are equivalent:
(1) All the return sets of L generate the free group on A. (2) Some return set of L generates a group of rank Card(A). (3) The extension graph of the empty word is connected.
The next corollary is a special case of our main result. It involves neutrality, which is a combinatorial condition also introduced in [4] (we will recall the definition in Section 8). A connected set is a language in which the extension graphs of nonempty words are connected, while a tree set is a language in which the extension graph of the empty word is a forest, and all other extension graphs are trees. These conventions differ slightly from [4], but are in line with other papers such as [3, 7]. The term dendric has also been used to refer to tree sets, for instance in [8]. A subset of the free group is called free if it forms a basis of the subgroup it generates.
Corollary 1.3. Let L be a uniformly recurrent language on the alphabet A. If L is connected and neutral, then the following conditions are equivalent:
(1) Some return set of L is a free subset of the free group on A. (2) All return sets of L are free subsets of the free group on A. (3) L is a tree set.
Since connectedness implies suffix-connectedness, the assumptions of the Return Theorem place us in the scope of both Corollary 1.2 and 1.3. It follows that the Return Theorem is a direct consequence of the above corollaries.
In order to further motivate this new suffix-connectedness condition, we give an example of a uniformly recurrent language which is suffix-connected but contains infinitely many disconnected elements. This language is defined by a primitive substitution. More precisely, we will show the following:
Theorem 1.4. The language of the primitive substitution
 : 0  0001 1  02 2  001
is suffix-connected and contains infinitely many disconnected words.
We will also see that, in the language of this substitution, the extension graph E() is connected. Therefore, as a result of Corollary 1.2, all the return sets in this language generate the full free group of rank 3. However, further computations reveal that the language of  has return sets of cardinality 3 and 4, which means that some but not all of them are free subsets of the free group.
This paper is structured as follows. In Section 2, we introduce suffix extension graphs and suffix-connectedness, while also recalling some relevant definitions in more details. Section 3 reviews some basic material about the groups generated by labeled digraphs. Section 4 is devoted to Rauzy graphs. Section 5 presents a technical result that makes up the core of the proof of our main result. In Section 6, we examine the relationship between Rauzy graphs and return sets. In Section 7, we put everything together and give the proof of Theorem 1.1. Section 8 discusses the proof of the two corollaries above. Finally, Section 9 is devoted to our suffixconnected example.

SUFFIX-CONNECTED LANGUAGES

3

2. Suffix-connectedness
In this paper, L denotes a language on a finite alphabet A of cardinality n, and F (A) denotes the free group on A. We will always suppose that L is recurrent and that A  L. We recall that a language L is recurrent if it is closed under taking factors, and if for every two words u, v  L, there exists a non-empty word w such that uwv  L. The left extensions and right extensions of order k of w  L, are:
Lk(w) = {u  L  Ak : uw  L}, Rk(w) = {v  L  Ak : wv  L}.
The extension graph of order (k, l) of w  L is a bipartite graph over the disjoint union of Lk(w) and Rl(w) (the union of disjoint copies of Lk(w) and Rl(w)). In this graph, there is an edge between u  Lk(w) and v  Rl(w) if uwv  L. We denote this graph by Ek,l(w). Note that all extension graphs are simple and undirected. We abbreviate R1, L1 and E1,1 respectively by R, L and E. In the absence of further clarifications, the term extension graph of w refers to E(w). A word is connected if its extension graph is connected, and it is called disconnected otherwise. A language is connected if all its non-empty words are connected, and it is disconnected otherwise.
A word w  L is called left special if Card(L(w)) > 1. Similarly, w is called right special if Card(R(w)) > 1. By a bispecial word, we mean a word which is both left and right special.
Remark 2.1. If w is not bispecial, then E(w) is a star graph, and in particular a tree. Hence, only bispecial factors can be disconnected.
Given a word w  A and 0  i < |w|, we denote by w(i) the i-th letter of w. In particular, the first letter of w is w(0). Given 0  i  j  |w|, we denote w[i : j] the factor of w defined by:
w[i : j] = w(i)w(i + 1) . . . w(j - 1)
Note that |w[i : j]| = j -i, w[i : i] is the empty word and w[0 : |w|] = w. Let u  A with |u| = k. We say that an index j is an occurrence of u in w if w[j : j + k] = u. We also define the tail and the init of a non-empty word w by putting:
tail(w) = w[1 : |w|], init(w) = w[0 : |w| - 1].
We view tail and init as maps A+  A. With this, we are now ready to introduce suffix extension graphs.
Definition 2.2. For w  L and 1  d  |w| + 1, the depth d suffix extension graph of w is the extension graph Ed,d(taild-1(w)).
The set L(w) naturally embeds in the suffix-extension graphs of w. Indeed, let u be the prefix of length d - 1 of w, which means that u satisfies w = u taild-1(w). Then a  au is an injective map L(w)  Ld(taild-1(w)), with the latter set being viewed as a subset of Ed,d(taild-1(w)). We call this the natural embedding of L(w) in the depth d suffix extension graph.
Definition 2.3. A word w is called suffix-connected if the natural embedding of L(w) in Ed,d(taild-1(w)) lies in one connected component, for some 1  d  |w|+1. A language is called suffix-connected if all its non-empty words are suffix-connected.

4

H. GOULET-OUELLET

1

0

0

1

00

11

10

01

01

10

010

101

110

110

001

101

011

011

010

100

0011

0100

1011

0010

1101

0011

0100

1100

0010

1011

1100

1101

0101

1010

1001

1001

0110

0110

1010

0101

E1,1(010)

E2,2(10)

E3,3(0)

E4,4()

Figure 1. Suffix extension graphs of the word 010 in the language of the Thue-Morse substitution. The dashed vertices represent the natural embeddings of L(010).

We note that this definition is sensitive to both increases and decreases in the depth parameter. That is, for a given word w, it may happen that some of the natural embeddings L(w) lie in a single connected component, while others do not. The next example is a good illustration of this behaviour. It features a language defined by a primitive substitution, and such languages are well known to be uniformly recurrent (see for instance [10, Proposition 1.2.3]).

Example 2.4. Let us consider the following binary substitution, known as the Thue-

Morse substitution:

µ:

0 1

 

01 10

.

Let L be the language defined by µ. That is, L is the set of factors of all words of the form µn(a) for n  N and a  {0, 1}. Figure 1 gives all the suffix extension graphs of the word 010  L, which show that L is not suffix-connected.
On the other hand, Figure 2, gives some extension graphs of 01100  L. These graphs show that the natural embeddings of a given word can alternate between being connected and disconnected as the depth increases.

Replacing tail by init and L by R yields the dual notions of prefix extension graphs and prefix-connectedness. Note that the depth 1 suffix and prefix extension graphs of w both coincide with E(w), so a connected word or language is both prefix and suffix-connected.

3. Stallings equivalence
Let us start this section by clarifying some basic terminology. A labeled digraph over the alphabet A (or, more simply, a digraph) is a diagram of sets G of the following form:

SUFFIX-CONNECTED LANGUAGES

5

1 1
0

00

10

10

11

001 101
110
110 101

1011

1101

1101

1100

0011

1011

E1,1(01100)

E2,2(1100)

E3,3(100)

E4,4(00)

Figure 2. First four suffix extension graphs of the word 01100 in the language of the Thue-Morse substitution. The dashed vertices represent the natural embeddings of L(01100).


A

E (G)
 
V (G)

One can think of V as the set of vertices, E as the set of edges, and A, the alphabet, as the set of labels. The maps ,  and  give us respectively the origin, terminus and label of a given edge. For our purposes, we may assume that there are no redundant edges, meaning that (, , ) are jointly injective. This means in effect that E may be considered a subset of V × A × V whenever convenient.
Given an edge e = (x, a, y), we consider its formal inverse e-1 = (y, a-1, x). From now on, we use the term edge both for elements of E(G) and for their formal inverses. Two edges are said to be consecutive if the last component of the first is equal to the first component of the second. A path is a sequence of consecutive edges. We can naturally extend the maps ,  to paths, and talk about consecutive paths. Two consecutive paths can be composed, and any path can be inverted; we write respectively pq and p-1. A self-consecutive path is called a loop. As expected, if p, q are consecutive, then so are q-1, p-1 and the relation (pq)-1 = q-1p-1 holds.
The labeling map  also naturally extends, mapping the set of all paths to the free group F (A). This map satisfies (pq) = (p)(q) and (p-1) = (p)-1. We write p : x u y as a shorthand for (p) = x, (p) = y, (p) = u. The set of all labels of loops over a given vertex x forms a subgroup of F (A), which we call the group of G at x. Note that under the assumption that G is connected (any two vertices can be joined by a path), all the groups of G lie in the same conjugacy class of subgroups of F (A).
Let  be an equivalence relation on the vertices of a digraph G. Then  can also be seen as an equivalence relation on E(G),

(x, a, y)  (x , b, y )  x  x , a = b, y  y .

The quotient digraph G/ is then defined by:

V(G/) = V(G)/, E(G/) = E(G)/,

together with the following adjancency and labeling maps:

(x/) = (x)/, (x/) = (x)/, (x/) = (x).

The definition of G/ can be summarized by the following commutative diagrams:

6

H. GOULET-OUELLET

A  E(G)

E(G)  V(G)

E(G)  V(G)





E (G/)





E(G/)  V(G/)





E(G/)  V(G/)

The natural projection G  G/ is a digraph morphism, meaning that it preserves the maps , , . If, conversely,  : G  H is a digraph morphism, then the quotient G/ ker() is isomorphic to Im(), where ker() = {(x, y) : (x) = (y)}. Note that for a digraph morphism  : G  G to be onto, it needs to be onto on both V(G ) and E(G ). The latter condition can be written as follows:

(x, a, y)  E(G ), (x , a, y )  E(G), (x ) = x  (y ) = y.

We say that an equivalence relation  on V(G) is group-preserving if the group of G at x is equal to the group of G/ at x/, for all x  V(G). We also call group-preserving a digraph morphism whose kernel is a group-preserving relation. Note that the group of G at x is always a subgroup of the group of G/ at x/. Therefore, to prove that  is group-preserving, one only needs to prove the reverse inclusion. Moreover, in the case of a connected digraph, this inclusion needs only to be checked on a single vertex.
The family of group-preserving equivalence relations of a digraph G also has the property of being closed under taking subrelations. Indeed, let us suppose that 1 is group-preserving and consider 2  1. Then, the canonical surjection of 1 factors through that of 2, giving us the following commutative diagram:
G 1 G/1
2

G/2
Let us fix x  V(G) and let H, H1, H2 be respectively the group of G at x; the group of G/1 at x/1; and the group of G/2 at x/2. Then the diagram above implies H  H2  H1, while the fact that 1 is group-preserving implies H = H1. Thus, H2 = H and 2 is also group-preserving.
A well-known algorithm due to Stallings implies that a digraph always has a greatest group-preserving equivalence relation. We now proceed to give a description of this equivalence relation, starting with the following definition.

Definition 3.1. The Stallings equivalence of G is the least equivalence relation on V(G) closed under the two following rules:
(F) If (x, y), (u, x ), (y , v) are related, and (x, a, x ), (y, a, y ) are edges in G, then (u, v) are related.
(F') If (x, y), (u, x ), (y , v) are related, and (x , b, x), (y , b, y) are edges in G, then (u, v) are related.
We denote the Stallings equivalence by S.
Note that if two equivalence relations are closed under either rule (F) or (F'), then so is their intersection (this follows immediately from the definitions). Moreover, the total relation V(G) × V(G) is trivially closed under the two rules. Hence, the relation S is simply the intersection of all equivalence relations on V(G) that are closed under (F) and (F').

SUFFIX-CONNECTED LANGUAGES

7

x

y

x

y

u a

v a

u b

v b

x

y

(F)

x

y

(F')

Figure 3. The rules defining Stallings equivalence. The arrows represent edges, the thick lines represent existing relations, and the dashed lines represent the relations deduced from each rule.

By a trivially-labeled path, we mean a path whose label is the identity element of F (A). The next result relates Stallings equivalence with trivially-labeled paths, and can be seen as a reformulation of Stallings algorithm.
Proposition 3.2. Let G be a connected digraph. The equivalence S is, alternatively,
(1) the equivalence relation induced by trivially-labeled paths; (2) the greatest group-preserving equivalence of G.
For the proof of this result, the following definition will be useful: given an equivalence relation  on V(G), an -path in G is a sequence of edges p = (e1, . . . , ek) satisfying (ei+1)  (ei). The notions of label and length extend in a straightforward way to -paths. We also use the notation p : x u y for -paths, to mean (p) = x, (p) = y and (p) = u. Finally, we adopt the convention that an -path of length 0 is a pair x  y.
Proof of Proposition 3.2. (1) Let us denote by  the relation induced by triviallylabeled paths and by  the relation induced by trivially-labeled S-paths. Clearly  is contained in . Let us show that  is contained in S.
We proceed by induction on the length of the trivially-labeled S-path. Note that by definition, an S-path of length 0 is nothing but a pair x  y, so the basis of the induction is trivial. Let us suppose that there is a trivially-labeled S-path p : x  y of length k  1. Write p = (e1, . . . , ek). Since p is triviallylabeled, k is even and there must exist i such that (ei) = a-1 and (ei+1) = a, where a is either a letter, or the inverse of a letter. Write ei = (u , a-1, u) and ei+1 = (v, a, v ), where u S v. If a  A, then we may use rule (F) to conclude u S v . Otherwise, one uses rule (F') to obtain the same conclusion. It follows that p = (e1, . . . , ei-1, ei+2, . . . , ek) is also a trivially-labeled S-path between x and y. Since p has length k - 2 < k, we conclude by induction that x S y.
We finish the proof of (1) by showing that S is contained in . By definition of S, it suffices to show that  is closed under the rules (F) and (F'). Suppose that u  x , x  y, y  v, and that there are two edges e = (x, a, x ) and f = (y, a, y ). Consider trivially-labeled paths p1 : u  x , q : x  y and p2 : y  v. Then, the composition p1e-1qf p2 is a trivially-labeled path in G between u and v. Thus, u  v, which proves  is closed under (F). The proof for (F') is similar.
(2) We first show that S is a group-preserving equivalence relation, and then we show it is the greatest. Let us fix any path p : x/S  y/S in the quotient

8

H. GOULET-OUELLET

G/S. We say that an S-path q in G lifts p if q : x  y with x S x , y S y and (p) = (q). Note that any path in the quotient G/S admits such a lift in G. If q = (e0, . . . , ek) lifts p, we put D(q) = {0  i < k : (ei) = (ei+1)}. Clearly, q is a path if and only if D(q) is empty. Assume j = max(D(q)), and consider a trivially-labeled path r : (ej)  (ej+1) in G, which we know exists by Part (1). Let q = q1q2 be the factorization of q where |q1| = j + 1. Then, q = q1rq2 is an S-path between x and y satisfying (q ) = (q) and D(q ) = D(q) \ {j}. Thus, we may assume that q is a path. Composing on both ends with trivially-labeled paths x  x and y  y, we get a lift of p which is a path between x and y in G. This result applied to loops shows that S is group-preserving.
Finally, let us suppose that  is another group-preserving congruence, and let x  y. Choose any path p : x  y. Then p/ is a loop over y/ in G/. Since  is group-preserving, there is a loop q over y with (q) = (p/) = (p). It follows that pq-1 is a trivially-labeled path between x and y, so x S y.
From now on, we will use the three equivalent descriptions of S interchangeably.

4. Rauzy graphs

Recall that we defined the two maps init and tail by init(x) = x[0 : |x| - 1] and
tail(x) = x[1 : |x|]. For k  N, let us also define the map evalk by evalk(x) = x(k). Note that init and tail are defined on A+, while evalk is defined on A>k.

Definition 4.1. Let L be a recurrent language on A and m, k  N with k  m. The k-labeled Rauzy graph of level m of L is the digraph Gm,k defined by the diagram:

evalk
A

L  Am+1
init
tail
L  Am

Special cases of these labeled Rauzy graphs have appeared in the litterature, including in [4] with k = m, and in [1] with m = 2k.
The maps init, tail and evalk used to define the Rauzy graphs are jointly injective, and moreover the following diagrams commute:

A2 init A+

A>k+1 init A>k

A>k+1 tail A>k

tail
A+ init

tail
A

evalk

evalk
A

evalk+1

evalk
A

Therefore, init and tail also define onto digraph morphisms for m  1:

init : Gm,k  Gm-1,k

(0  k  m - 1)

tail : Gm,k  Gm-1,k-1

(1  k  m).

These morphisms will allow us to relate the groups defined the Rauzy graphs. In the next definition, we introduce a convenient notation for these groups.

Definition 4.2. Let (u, v) be such that uv  L, |u| = k and |u| + |v| = m. We denote by Hu,v the group of Gm,k at uv. We call Hu,v a Rauzy group of L.

The fact that tail and init define digraph morphisms immediately implies that:

Hu,v  Htail(u),v, Hu,v  Hu,init(v).

SUFFIX-CONNECTED LANGUAGES

9

We further note that Hua,v = a-1Hu,ava. Since we are assuming that L is recurrent, the Rauzy graphs are connected and it follows that Hu,v and Hu ,v lie in the same conjugacy class whenever |uv| = |u v |.

5. Paths in suffix extension graphs
For this section, it is useful to introduce a local version of suffix-connectedness. We do this in the next definition.
Definition 5.1. Let m, e  N with 1  e  m + 1. We say that L is (m, e)-suffixconnected if for every w  L  Am, there exists 1  d  e such that the natural embedding of L(w) in Ed,d(taild-1(w)) lies in a single connected component.
Remark 5.2. This local version of suffix-connectedness has the following feature: suppose that 1  e  e  m + 1 and that L is (m, e)-suffix-connected; then L is also (m, e )-suffix-connected. In particular, if we suppose that L is suffix-connected, then it must be (m, m + 1)-suffix-connected for all m  1.
The main result of this section is the following proposition, which is the main ingredient in the proof of Theorem 1.1:
Proposition 5.3. Assume that L is recurrent and (m-1, e)-suffix-connected, where m  1 and 1  e  m. Then, ker(tail) is a group-preserving equivalence relation of Gm,k whenever e  k  m.
The proof relies on the following lemma:
Lemma 5.4. Let L be a recurrent language on A, m  N, 0  k  m, d  1 and x  L  Am+d. Then there exists a path px in Gm,k such that:
px : initd(x) x[k:k+d] taild(x)
Proof. We proceed by induction on d. If d = 1, then x itself is an edge in Gm,k providing the required path.
For the induction step, we assume that d > 1. Let x = init(x) and x = taild-1(x). Note that |x | = |x| - d + 1 = m + 1, so x is an edge in Gm,k, which we see as a path of length 1. Moreover, the induction hypothesis gives us a path p such that
p : initd-1(x ) x [k:k+d-1] taild-1(x )
Recalling that init and tail commute, we find that:
taild-1(x ) = taild-1  init(x) = init  taild-1(x) = init(x ).
Hence, p and x are consecutive, and we may form the composition p = p x . Note that p is a path between initd(x) and taild(x), as required. Moreover, the label of this path is given by:
x [k : k + d - 1]x (k) = x[k : k + d - 1]x(k + d - 1) = x[k : k + d],
and this concludes the proof.
We are now ready to prove the proposition above.

10

H. GOULET-OUELLET

22

01

01

12

12

20

21

21

101

1

011

2 10

i 012

010

1

0

0

2

112

2

122 v,viii

1

2

2

221

2

212 0

222 vi

ix

0

11

22

E2,2(tail(12))

120

1

201

ii

iii

1
G3,3

220 iv,vii

Figure 4. A trivially-labeled path between a pair of words in ker(tail) induced by a path in a depth 2 suffix extension graph. The Roman numerals indicate the order in which the vertices are visited in the Rauzy graph. This takes place in the language defined by the primitive substitution 0  12, 1  2, 2  01.

Proof of Proposition 5.3. Let us fix a pair of vertices identified by the digraph morphism tail : Gm,k  Gm-1,k-1, that is to say two words ax, bx  L  Am where x  L  Am-1 and a, b  A. We want to show ax S bx, which amounts to find a trivially-labeled path in Gm,k between ax and bx.
By assumption, there exists d  e such that the natural embedding of L(x) in Ed,d(taild-1(x)) lies in one connected component. Let us write y = taild-1(x), and let u, v be the natural embeddings of a, b  L(x) inside Ed,d(y). In other words, u and v satisfy ax = uy and bx = vy. Let us consider a path in Ed,d(y) joining u and v. Since Ed,d(y) is bipartite, this path must have the following form:
u = s0, t0, s1, t1, . . . , tj-1, sj = v,
where si  Ld(y), ti  Rd(y). The fact that this forms a path in Ed,d(y) means that, for each 0  i < j, we have:
siyti, si+1yti  L.
Let us put wi = siyti and zi = si+1yti. By Lemma 5.4, there exist paths:

pi : initd(wi) wi[k:k+d] taild(wi)

qi : initd(zi) zi[k:k+d] taild(zi)

We notice that initd(wi) = siy, taild(wi) = yti = taild(zi), initd(zi) = si+1y. Therefore, pi, qi-1 are consecutive and their composition is a path siy  si+1y. Moreover, since k  e  d, it follows that
wi[k : k + d] = (yti)[k - d : k] = zi[k : k + d].
Therefore, piqi-1 is trivially-labeled. Composing these paths for i = 0, . . . , j - 1 gives us a trivially-labeled path between ax = uy = s0y and sjy = vy = bx.
By combining Proposition 5.3 with Remark 5.2, it then follows that for each m  1, the map tail defines a group-preserving morphism:
tail : Gm,m  Gm-1,m-1.

SUFFIX-CONNECTED LANGUAGES

11

But clearly, the class of all group-preserving morphisms is closed under composi-

tion. Therefore, in a suffix-connected language, the following is a group-preserving

morphism for all m  1:

tailm-1 : Gm,m  G1,1.

We immediately deduce the following:

Corollary 5.5. Let L be a suffix-connected recurrent language and u  L with u = . Then Hu, = Hb,, where b is the last letter of u.
Let us highlight another particular case of this result. The condition of being (m, 1)-suffix-connected is equivalent to being m-connected, meaning that E(w) is connected for all w  L  Am, which in turn is equivalent to the dual condition of being (m, 1)-prefix-connected. Combining Proposition 5.3 with its dual for the special case e = 1, we obtain the following result, which is reminescent of [4, Proposition 4.2]:

Corollary 5.6. If L is a (m - 1)-connected recurrent language, where m  1, then:
(1) For 0  k  m - 1, ker(init) is a group-preserving equivalence relation of Gm,k ;
(2) For 1  k  m, ker(tail) is a group-preserving equivalence relation of Gm,k.

6. Return sets

Let us recall that the return set to (u, v) in L is the set of all words r  L such that urv  L, urv starts and ends with uv, and contains exactly two occurrences of uv. We denote this set by Ru,v. For basic properties of return sets, see [9].
Definition 6.1. Let (u, v) be such that uv  L. The subgroup of F (A) generated by Ru,v is denoted by Ku,v. We call this a return group of L.
Our main result for this section relates the return groups with the Rauzy groups.

Proposition 6.2. Let L be a recurrent language and let u, v be such that uv  L.
(1) Ku,v  Hu,v. (2) If Ru,v is finite and s is one of its longest elements, then Hu,sv  Ku,v.
The following lemma recalls several properties of Rauzy graphs that will be relevant. By a positive path, we mean a path which consists only of edges in E(G) or, equivalently, which contains no formal inverses.

Lemma 6.3. Let L be a recurrent language and let u, v be such that uv  L, |u| = k and |u| + |v| = m.
(1) Any element w  L is the label of a positive path in Gm,k. (2) Any label w of a positive path in Gm,k of length at most m + 1 is in L. (3) If p : x  uv is a positive path in Gm,k, then (p) is suffix-comparable with
u. Moreover, there is at least one such path satisfying (p) = u. (4) If q : uv  y is a positive path in Gm,k, then (q) is prefix-comparable with
v. Moreover, there is at least one such path satisfying (q) = v.

All of these properties follow from the definition of Gm,k in a straightforward manner. Parts (1) and (2) are standard and can be found for instance in [4, Section 4.1]. Parts (3) and (4) are analogous to [1, Lemma 4.5].
We are now ready to prove the proposition. Let us mention that Part (2) of the proposition is inspired by the proof of [4, Theorem 4.7], which relied partly on the

12

H. GOULET-OUELLET

fact that return sets of the form Ru, are prefix codes. However, this property no longer holds for general return sets and we had to find a way to avoid it. This is essentially what is accomplished by the very last paragraph of the proof.
Proof of Proposition 6.2. (1) Let k = |u|, m = |u| + |v|, and fix r  Ru,v. Then urv  L is the label of a positive path p in Gm,k by Part (1) of Lemma 6.3. Consider the factorization p = q1p q2, where (q1) = u, (p ) = r and (q2) = v. Write (p ) = x1 and (p ) = x2. Consider the factorization x1 = u1v1, where |u1| = k. Since (q1) = x1, it follows from Part (3) of Lemma 6.3 that u1 is suffixcomparable with (q1) = u. As |u| = k = |u1|, we conclude that u1 = u. Similarly, (p q2) = x1, so Part (4) implies that v1 is prefix-comparable with (p q2) = rv. Since r  Ru,v, the word rv starts with v, and since |v| = m - k = |v1|, we conclude that v1 = v. Thus, x1 = uv. A similar argument yields x2 = uv, so p is a loop over uv, and Ru,v  Hu,v. This proves (1).
(2) Let m = |u| + |s| + |v|, and consider a positive path in Gm ,k of the form p : uvx  uvy. We start by proving the following claim: w = (p) is a concatenation of elements of Ru,v.
To prove this claim, let us first consider two positive paths q1 : x1 u uvx and q2 : uvy v x2, whose existence is a consequence of Part (3) and (4) of Lemma 6.3. Since (pq2) = uvx, Part (4) of Lemma 6.3 implies that (pq2) is prefix-comparable with vx; thus, it starts with v. Similarly, since (q1p) = uvy, Part(3) of Lemma 6.3 implies that (q1p) is suffix-comparable with u; thus, it ends with u. In particular, this implies
uwv = (q1)(pq2) = (q1p)(q2)  uvA  Auv.
We now prove the claim by induction on |w| = |p|. If |w|  |s|, then uwv is the label of the positive path q1pq2 in Gm ,k, which has length at most m . Hence, Part (2) of Lemma 6.3 implies that uwv  L. This, taken together with the fact that uwv belongs to uvA  Auv, implies that w is a concatenation of elements of Ru,v. This establishes the basis of the induction.
For the inductive step, let us suppose that |w| > |s|. Let p be the prefix of p of length m of q1pq2, and let z = (p ). By Part (2) of Lemma 6.3, z  L. Moreover, z  uvA, so it is prefix-comparable with some element of uRu,vv. But by assumption, |z| is the maximal length of an element of uRu,vv. Therefore, it follows that z has at least two occurrences of uv. Since z is a proper prefix of uwv, we deduce that uwv has an occurrence of uv at position 0 < j < |s|. Consider the factorization p = p1p2 where |p1| = j, and let x = (p1) = (p2). Since j is an occurrence of uv in uwv = (q1pq2) and |q1p1| = |u| + j, it follows that (q1p1) ends with u. Consider the factorization x = u x , where |u | = |u|. By Part (3) of Lemma 6.3, u is suffix-comparable with (q1p1), and since |u | = |u|, it follows that u = u. Similarly, the fact that j is an occurrence of uv in uwv, with uwv = (q1p1p2q2) and |q1p1| = |u| + j, implies that (p2q2) starts with v. By Part (4) of Lemma 6.3, it follows that x is prefix-comparable with (p2q2), and hence with v. However, recall that x  L  Am where m = |u| + |s| + |v|:
|x | = |x | - |u| = |s| + |v|  |v|.
Therefore, v is a prefix of x , and x = vt for some word t. Hence, we conclude that p1, p2 satisfy:
p1 : uvx  uvt, p2 : uvt  uvy.

SUFFIX-CONNECTED LANGUAGES

13

Since 0 < j < |s| < |w|, we have |p1| < |p| and |p2| < |p|. Thus, by the induction hypothesis, both (p1) and (p2) are product of words in Ru,v. And, therefore, so is w. This finishes the proof of the claim.
We finish the proof of Part (2) of the proposition by showing that it follows from that claim. First, recall that Gm ,k is strongly connected, in the sense that any two vertices can be joined by a positive path. Moreover, the groups of a strongly connected digraph are generated by the labels of positive loops [12, Corollary 4.5]. Since the claim above shows in particular that the labels of positive loops over usv in Gm ,k lie in Ku,v, the result follows.

7. Proof of the main result
Let us first recall the statement of our main result, Theorem 1.1: if L is a suffixconnected uniformly recurrent language on A, then all the return groups of L lie in the same conjugacy class and their rank is n - c + 1, where n = Card(A) and c is the number of connected components of E().
The proof is split in two lemmas. In the first one, we apply the results obtained in the previous sections to show that (under the assumptions of Theorem 1.1) all the return groups of L belong to the same conjugacy class. The second lemma finishes the proof by showing that the groups in this conjugacy class have rank n - c + 1.
Lemma 7.1. Let L be a uniformly recurrent suffix-connected language. Then, the return groups of L lie in the conjugacy class of subgroups of F (A) generated by the groups of the Rauzy graph G1,1.
Proof. Consider a pair (u, v) such that uv  L and uv = . By Corollary 5.5, Huv, = Hb,, where b is the last letter of uv. Using the conjugacy relation between Rauzy groups, we then have:
Hu,v = vHuv,v-1 = vHb,v-1,
and this equality holds for any such pair (u, v). Since L is uniformly recurrent, we may choose an element s  Ru,v of maximum
length and by Proposition 6.2:
Hu,sv  Ku,v  Hu,v.
Applying the conclusion of the previous paragraph to the pair u, sv while noting that s  Ku,v  Hu,v, we get:
Hu,sv = svHb,v-1s-1 = sHu,vs-1 = Hu,v.
Hence, Ku,v = Hu,v = vHb,v-1.
The next lemma concludes the proof of Theorem 1.1. It also gives an effective way of computing the Stallings equivalence of G1,1 and, in turn, the Stallings equivalence can be used to find a basis for any of the groups defined by G1,1.
Lemma 7.2. Let L be a recurrent language. Then, the groups of the Rauzy graph G1,1 have rank n - c + 1, where n = Card(A) and c is the number of connected components of E().

14

H. GOULET-OUELLET

Proof. A well-known consequence of Stallings algorithm is that the rank of any group generated by a connected digraph G is
Card(E(G/S)) - Card(V(G/S)) + 1
(see [11, Lemma 8.2]). Thus, we need only to show that the quotient G1,1/S has c vertices and n edges.
Let us start by showing that G1,1/S has c vertices. By definition, we have V(G1,1) = A = L(). Let  be the relation defined as follow: for a, b  A, we have a  b exactly when, viewed as elements of L(), a and b lie in the same connected component of E(). Note that the relation  has precisely c classes because every connected component of E() contains at least one vertex in L(). Therefore, it suffices to show that  = S.
We now prove the inclusion   S. Since E() is bipartite, any path in E() between elements of L() has even length, and thus it suffices to argue for elements related by paths of length 2. Let us assume that a, b  L() = A are related by a path of length 2 inside E(). By definition of E(), the existence of such a path means that there is some c  A such that ac, bc  L. But recall that E(G1,1) = L  A2, so we may view e = ac and f = bc as edges in G1,1, both of which have label c. The path (e, f -1) is then a trivially-labeled path between a and b, so a S b as required.
Let us prove the inclusion S  . By definition of S, we only need to show that  is closed under the two rules (F) and (F'). We argue for each separately. Let us fix a, b, c, c , d, d  A such that a  c , b  d , c  d.
(F) We assume that there are edges e : c  c , f : d  d such that (e) = (f ). Note that the maps tail and eval1 agree on A2, so by definition  =  in the Rauzy graph G1,1. Thus, under our current assumptions, c = d . Hence, a  c  b and a  b by transitivity.
(F') We assume that there are edges e : c  c, f : d  d such that (e) = (f ). Since  =  in G1,1, we deduce that d = c. By definition, E(G1,1) = L  A2, e = c c  L and f = d d = d c  L. In particular, there is an edge in E() joining c and c, and another one joining d and c. Hence, a  c  d  b and a  b by transitivity.
It only remains to show that G1,1/S has n edges. We do this by showing that the labeling map  : G1,1/S  A is a bijection. Fix a letter a  A. Since L is recurrent, there exists b  A with ba  L. Hence, there is at least one edge labeled a in G1,1, and therefore also in G1,1/S. Hence,  : G1,1/S  A is surjective. Now suppose that G1,1 has two edges e, f labeled a. As noted before,  =  in G1,1, so (e) = a = (f ). Applying rule (F'), we conclude that (e) S (f ). In particular, e/S = f /S, which proves that the labeling map  : G1,1/S  A is injective.

8. Proof of the corollaries
Let us start this section by recalling the statement of Corollary 1.2: if L is suffixconnected and uniformly recurrent, then the following statements are equivalent:
(1) All the return sets of L generate the full free group F (A). (2) Some return set of L generates a group of rank Card(A). (3) The extension graph of the empty word is connected.

SUFFIX-CONNECTED LANGUAGES

15

c d =c





a

b

cd (F)

d d =c

c d=c





a

b

cd (F')

d d=c

Figure 5. The rules (F) and (F') as they appear in the proof of Lemma 7.2 when showing that S  .

Proof of Corollary 1.2. (1) implies (2). Trivial. (2) implies (3). By Theorem 1.1, all return groups of L have rank n - c + 1
where c is the number of connected components of E() and n = Card(A). Under the assumption (2), we therefore have n = n - c + 1 and c = 1.
(3) implies (1). If E() is connected, then by Corollary 5.6, there is a grouppreserving morphism G1,1  G0,0. But note that G0,0 has a single vertex with loops labeled by the letters of A. Thus, the group generated by G0,0 is equal to the full free group F (A), and so are all the groups of the level 1 Rauzy graph G1,1. But recall that, for a suffix-connected language, all the return groups lie in the conjugacy class generated by the level 1 Rauzy groups (see Lemma 7.1), and so the result follows.
Before proving Corollary 1.3, we need some preliminary material. A word w  L is called neutral if:
1 - (E(w)) = 0,
where (E(w)), the characteristic of E(w), is the difference between the number of vertices and edges in E(w). A neutral language is a language in which all nonempty words are neutral. The next result, quoted from [7, Corollary 5.4], will be useful to prove Corollary 1.3.
Lemma 8.1. If L is recurrent and neutral, then for all u, v with uv  L,
Card(Ru,v) = Card(A) - (E()) + 1.
With this lemma in mind, let us recall the statement of Corollary 1.3: if L is uniformly recurrent, connected and neutral, then the following statements are equivalent:
(1) Some return set of L is a free subset of the free group F (A). (2) All return sets of L are free subsets of the free group F (A). (3) L is a tree set.
Proof of Corollary 1.3. We first recall the following fact, which is a straightforward consequence of the well-known Hopfian property of F (A): a finite subset of F (A) is free if and only its cardinality agrees with the rank of the subgroup it generates. Moreover, note that under our assumptions, the return sets of L all have the same cardinality (by Lemma 8.1), as well as the same rank (by Theorem 1.1). Therefore if some return set is free, then all return sets are free, that is to say (1) and (2) are equivalent.

16

H. GOULET-OUELLET

To prove the equivalence of (2) and (3), we use the following fact about graphs: a simple graph G is a forest if and only if it has exactly (G) connected components [5, Exercise 2.1.7 (b)]. On the one hand, this implies that in a connected neutral language, the extension graph of any non-empty word must be a tree (since neutrality implies (E(w)) = 1). Thus, a neutral connected language is a tree set if and only if E() is a forest, if and only if (E()) = c, where c denotes the number of connected components of E(). This is also equivalent to the following equality:
Card(A) - (E()) + 1 = Card(A) - c + 1.
Let us fix u, v with uv  L. Lemma 8.1 implies that Card(Ru,v) is equal to the lefthand side of the previous equation, while Theorem 1.1 implies that rank(Ku,v) is equal to the right hand side. Since (2) holds exactly when Card(Ru,v) = rank(Ku,v) for all such u, v, the result follows.

9. Suffix-connected example
This section is devoted to the proof of Theorem 1.4. We consider the following substitution on the alphabet A = {0, 1, 2}:

 : 0  0001
1  02 . 2  001
Note that  is primitive (since for every a, b  A, a occurs in 3(b)), and that (A) is a prefix code (no word in (A) is a proper prefix of another). In particular, this implies that  is injective, a fact that will be used several times. We recall that the language defined by  is the subset of all words w  A+ such that w is a factor of n(a) for some a  A and n  N. For the current section, L denotes the language of . As we already mentioned, it is well known that the language of a primitive substitution is uniformly recurrent. We will show that L is suffix-connected, and deduce that all the return sets of L generate the full free group F (A).
The proof, being a bit lengthy, is organized in 5 steps. Let us give a quick outline of each step:
(1) We show that every right special factor of length at least 2 either ends with 00 and satisfies R(x) = {0, 1}; or ends with 10 and satisfies R(x) = {0, 2}. Similarly, we show that every left special factor of length at least 3 either starts with 000 and satisfies L(x) = {1, 2}; or starts with 001 and satisfies L(x) = {0, 1}.
(2) We show that L contains only 4 bispecial factors starting with 001 and we compute them.
(3) We show that if x is a bispecial factor that starts with 000, then

E(x) =

E((x)0) E((x)00)

if x ends with 00, if x ends with 10.

(4) We define inductively a sequence of words (wk)kN of increasing lengths, and we show that the disconnected elements of L are precisely the members
of that sequence.
(5) We define a sequence of integers (dk)kN such that L(wk) embeds in one connected component of Edk,dk (taildk-1(wk)).

SUFFIX-CONNECTED LANGUAGES

17

Some of these steps involve the computation of the sets L  Ak for several values of k, some of them quite large. We will omit the details of these computations and provide only the results. These computations can be checked either by hand (e.g. with the algorithm described in [2, Section 3.2]), or perhaps more appropriately using SageMath [6]. At the time of writing, a SageMath web interface can be accessed at the address https://sagecell.sagemath.org. To compute the set L  Ak, simply evaluate the following line of code in the web interface:
WordMorphism({0:[0,0,0,1],1:[0,2],2:[0,0,1]}).language(k).
Step 1. We prove the following claim.
Claim. Let x be a right special factor of L of length at least 2. Then one of the two following alternatives hold:
(1) x ends with 00 and R(x) = {0, 1}. (2) x ends with 10 and R(x) = {0, 2}. Dually, let y be a left special factor of L of length at least 3. Then one of the two following alternatives hold: (1) y starts with 000 and L(y) = {1, 2}. (2) y starts with 001 and L(y) = {0, 1}.
Proof of the claim. Direct computations reveal that:
L  A3 = {000, 001, 010, 020, 100, 102, 200}.
Hence, the only two right special factors in L  A2 are 00 and 10, and they satisfy respectively:
R(00) = {0, 1}, R(10) = {0, 2}.
Since the sets R(x) are weakly increasing under taking suffixes, the first part follows. Similarly, we find:
L  A4 = {0001, 0010, 0100, 0102, 0200, 1000, 1001, 1020, 2000}.
Therefore L  A3 contains only two left special factors, 000 and 001, satisfying respecitvely:
L(000) = {1, 2}, L(001) = {0, 1}.
Since the sets L(x) are weakly increasing under taking prefixes, the second part follows as well.
Step 2. We now know that all long enough bispecial factors must start with either 000 or 001, and end with either 00 or 10. We restrict the possibilities even further by proving the following claim:
Claim. The only four bispecial factors of L starting with 001 are:
0010, 00100, 00100010, 001000100010.
The proof of this claim makes use of the concept of cutting points, by which we mean the following: in a word of the form (z), a cutting point is an index 0  j  |(z)| - 1 such that j = |(z1)|, for some prefix z1 of z. We observe that in the specific case of , the cutting points are located exactly after the occurrences of the letters 1 and 2. The following elementary lemma will be useful.
Lemma 9.1. Let (z) = u1 . . . un be a factorization such that |u1 . . . uk| is a cutting point for all 1  k < n. Then there is a factorization z = z1 . . . zn such that (zi) = ui for all 1  i  n.

18

H. GOULET-OUELLET

1

2

0

0

1

2

0

1

2

0

1

2

0 1
1
0 2

1

0

0

2

E()

E(0)

E(00)

E(0010)

Figure 6. Extension graphs of all the bispecial words of length at most 4 in L.

Proof. By assumption, u1 . . . uj-1, u1 . . . uj  (A) for all 1  j  n. Since (A) is a prefix code, we have uj  (A) and we may write uj = (zj) for some zj. Then (z) = (z1 . . . zn) and as  is injective, z = z1 . . . zn as required.
Proof of the claim. Let us start by noting that the only bispecial factors of L with length at most 4 are:
, 0, 00, 0010.
This can be proven simply by inspecting the sets L  Ak for 2  k  6. The extension graphs of these four words can be found in Figure 6. From now on, we work only with bispecial factors of length at least 5.
Let us suppose that u is bispecial, |u|  5 and 001 is a prefix of u. We distinguish two cases: u = 001x10 and u = 001x00.
We start by the case u = 001x10. Let x = x1. By Step 1, we know that 0u, 1u  L. Thus, there exist z1, z2  L such that:
(z1) = s10001x 0t1, (z2) = s21001x 0t2.
Since 0000 / L, it follows that s1 ends with either 1 or 2. Therefore |s1| is a cutting point in (z1). Similarly, there is a cutting point in (z1) at the end of x . It follows from Lemma 9.1 that z1 has a factor of the form 0y1 such that (y1) = x . With similar arguments, we conclude that z2 has a factor of the form 2y2 such that (y2) = x . Since  is injective, we find y1 = y2 = y, and L(y)  {0, 2}. By Step 1, it follows that |y| < 3, which leaves us with only thirteen possibilities. Further accounting for the fact that 2  L(y) and (y) = , we narrow it down to only two possibilities, namely y = 0 and y = 00. Trying out both values, we obtain either:
u = 001(0)0 = 00100010; or
u = 001(00)0 = 001000100010.
A direct computation shows that both of those words are bispecial. Finally, we treat the case u = 001x00. By Step 1, u0 = 001x000  L. Since
0000 / L, it follows that x cannot end with 0. Moreover, we also have 0u, 1u, u1  L, so there exist z1, z2, z3  L such that:
(z1) = s10001x00t1, (z2) = s21001x00t2, (z3) = s3001x001t3.
Again, since 0000 / L, s1 cannot end with 0. Recalling that cutting points are located exactly after the occurrences of 1 or 2, we apply Lemma 9.1 to conclude

SUFFIX-CONNECTED LANGUAGES

19

1

0

0

2

1

0

0

1

1

0

0

2

1

0

0

2

E(0010)

E(00100)

E(00100010)

E(001000100010)

Figure 7. Extension graphs of all bispecial factors of L starting with 001.

that there exist: a factor of z1 of the form 0y1 such that (y1) = x; a factor of z2 of the form 2y2 such that (y2) = x; and a factor of z3 of the form y32 such that (y3) = x. Since  is injective, y1 = y2 = y3 = y, and L(y)  {0, 2}, 2  R(y). By Step 1, we conclude that |y| < 3, which again leaves us with thirteen possible values for y. Accounting for the fact that 2  R(y) and 2  L(y) narrows this to only two possibilities: y =  and y = 0. Testing both possibilities, we find that y = 0 does not yield a bispecial factor, leaving us with only one bispecial factor for that case:
u = 001()00 = 00100.
All in all, we exhausted all cases and found four bispecial factors:

0010, 00100, 00100010, 001000100010. This proves the claim.

We give the extension graphs of these four bispecial factors in Figure 7. The longest among these, which has length 12, is the only one which is disconnected. We also saw that all the bispecial factors of L of length at most 4 are connected, and it is not hard from there to complete the picture and show that 001000100010 is both the longest bispecial factor starting with 001 and the smallest disconnected factor of L. This can be done by explicit computations for the only three missing bispecial factors of length at most 12, which are 00010, 000100 and 000100010.

Step 3. Next, we give conditions ensuring stability of some extension graphs under x  (x)0 or x  (x)00.

Claim. Let x be a bispecial factor of L starting with 000. Then:

E(x) = E((x)0) E((x)00)

if x  A00 if x  A10.

Proof of the claim. Let us put:

(x)0 if x  A00

y= (x)00

if x  A10.

Let  be the permutation of A = {0, 1, 2} fixing 0 and exchanging 1, 2. We readily deduce from Step 1 that (a) is a suffix of (a), for all a  L(x). Similarly, if x  A00, then 0(b) is a prefix of (b), for all b  R(x); and if x  A10, then 00(b) is a prefix of (b), for all b  R(x). In particular, (a)y(b) is a factor of (axb). Thus,
axb  L = (axb)  L = (a)y(b)  L.

20

H. GOULET-OUELLET

This shows that  : E(x)  E(y) is a graph morphism, and that y is bispecial. Moreover, it follows from Step 1 that  is bijective on vertices. It remains only to show that  is onto on edges.
Let us suppose that (a)y(b)  L for a, b  A. We need to show that axb  L. The fact that (a)y(b)  L implies:

z  L, (z) = s(a)y(b)t.
Note that y = (x)0 or (x)00. In both cases, (x) is a prefix of y ending with 1 or 2. Moreover, we have (a)  {1, 2} by Step 1. Thus, in the factorization s(a)y(b)t given above, there must be one cutting point at the start of y, and one at the end of (x). By Lemma 9.1, this implies that z has a factor of the form cx d, where:
(1) (x ) = (x); (2) (a) is a suffix of (c); (3) (d) starts with 0(b) if x  A00; or 00(b) if x  A10.
Injectivity of  implies x = x , so c  L(x) and d  R(x). Using Step 1, we can then deduce from a case-by-case analysis that a = c and b = d. This proves that  is onto on edges, thus finishing the proof.

Step 4. Recall that the longest bispecial factor of L that starts with 001 is also its smallest disconnected element. We will see that all disconnected elements of L arise from this word. Consider the sequence of words {wk}kN defined by:

w0 = 001000100010,

wk+1 =

(wk)00 (wk )0

if k is even; if k is odd.

For the purpose of the proof below, it is useful to notice that wk ends with 10 if k is even, and with 00 if k is odd. We now prove the following claim.

Claim. A word w  L is disconnected if and only if w = wk for some k  N.
Proof. We already saw that w0 is disconnected, and one can check via explicit computations that so is w1. Since wk starts with 000 whenever k  1, it follows from Step 3 that wk is disconnected for all k  N.
For the converse, we proceed by induction on |w|. The smallest disconnected word, w0, provides the basis for the induction. Let us consider a disconnected word w  L such that |w| > |w0| = 12. Since w0 is also the longest bispecial factor starting with 001 (see Step 2), we may assume that w starts with 000.
We start by treating the case w  A00. By Step 1, we know that:

L(w) = {1, 2}, R(w) = {0, 1}.
Let us write w = w 00. Since w0  L, it follows that w cannot end with 0. Let us consider z1, z2, z3, z4  L such that:
(z1) = s12wt1, (z2) = s21wt2, (z3) = s3w0t3, (z4) = s4w1t4.
By repeatedly applying Lemma 9.1, we deduce that: · z1 has a factor of the form 1x1 such that (x1) = w . · z2 has a factor of the form ax2 such that (x2) = w and a  {0, 2}. · z3 has a factor of the form x30 such that (x3) = w . · z4 has a factor of the form x42 such that (x4) = w .

SUFFIX-CONNECTED LANGUAGES

21

1

0

0

2

1

1

2

0

1

0

2

2

E(w0)

E(wk), k  1 odd E(wk), k  1 even

Figure 8. Extension graphs of the disconnected words of L.

Since  is injective, we deduce x1 = x2 = x3 = x4 = x, and x is bispecial. Note that |x|  2 would imply |w| = |(x)| + 2  10, which is a contradiction. Thus, we may assume |x|  3. Since 2 is a right extension of x, we deduce by Step 1 that x  A10. By Step 4, E(x) = E((x)00) = E(w); thus, x is disconnected. By induction, x = wk for some k  N, and since x ends with 10, k is even. Therefore w = (wk)00 = wk+1.
The case w  A10 is handled in a similar fashion. Let us go quickly over the argument. This time, we have
L(w) = {1, 2}, R(w) = {0, 2}.
We write w = w 0. Take z1, z2, z3, z4  L such that:
(z1) = s12wt1, (z2) = s21wt2, (z3) = s3w0t3, (z4) = s4w2t4.
Again, it follows from Lemma 9.1 that:
· z1 has a factor of the form 1x1 such that (x1) = w . · z2 has a factor of the form ax2 such that (x2) = w and a  {0, 2}. · z3 has a factor of the form x3a such that (x3) = w and a  {0, 2}. · z4 has a factor of the form x41 such that (x4) = w .
By injectivity of , we have x1 = x2 = x3 = x4 = x and x is bispecial. Moreover, |x|  2 would imply |w| = |(x)|+1  9, which contradicts our standing assumption that |w| > 12. Thus, we may assume |x|  3. Since 1 is a right extension of x, it follows from Step 1 that x ends with 00, so by Step 3, E(x) = E((x)0) = E(w). This implies that x is disconnected, so by induction x = wk for some k  N. As x ends with 00, k is odd and w = (wk)0 = wk+1.
This, combined with the graph isomorphism identified in Step 3, allows us to explicitly compute the extension graphs of all the disconnected words of L. These extension graphs are shown in Figure 8.
Step 5. Now that we know exactly which are the disconnected words of L, it remains to show that these words are suffix-connected. For k  N, let us write dk = |k(001)| + 1 and yk = taildk-1(wk). This means that wk = k(001)yk and the depth dk suffix extension graph of wk is precisely Edk,dk (yk). For the case k = 0, we have d0 = 4 and y0 = 000100010. Notably, the depth 4 suffix extension graph of w0, which is shown in Figure 9, is connected, hence w0 is suffix-connected at depth 4. We will show that wk is suffix-connected at depth dk for all k  N.
Let us first note that the natural embedding of L(wk) in Edk,dk (yk) is given by right multiplication by k(001). Before concluding the proof of Theorem 1.4, we

22

H. GOULET-OUELLET

1

0

0

2

10

00

00

20

100

001

000

200

0001 0102 1001

2000 0010

E1,1(001000100010) E2,2(01000100010) E3,3(1000100010) E4,4(000100010)
Figure 9. Suffix extension graphs of w0 = 001000100010 at depth up to 4. The dashed vertices represent the natural embeddings of L(w0).

need to establish the following technical lemma, which gives some properties of the words xk = init(k(2)).

Lemma 9.2. For all k  N, the following hold:

(1) xk+1 =

(xk)00 (xk )0

if k is even; if k is odd.

(2) xk0 is a prefix of k(0).

Proof. (1) If k is even, then k(2) = xk2 and k+1(2) = xk+11. It follows that

xk+11 = (xk2) = (xk)001. Hence, the result follows. Similarly, if k is odd, k(2) = xk1, k+1(2) = xk+12, and

xk+12 = (xk1) = (xk)02.

(2) We proceed by induction on k. The basis, k = 0, is obvious. Let us assume k(0) = xk0tk, for some tk  A. Hence,

k+1(0) = (xk0tk) = (xk)0001(tk) =

xk+1 01(tk ) xk+1 001(tk )

if k even; if k odd.

By the recursive definition of wk and a straightforward inductive argument involving Part (1) of the lemma, we have k(y0)xk = yk for all k  N. Moreover, note that xk is a prefix of both k(2000) and k(0010), the former by definition
and the latter by part (2) of the lemma. Since 2000 and 0010 are right extensions of y0 (see Figure 9), it follows that x-k 1k(2000) and x-k 1k(0010) are right extensions of yk. With these observations in mind, we are ready to conclude the proof
of Theorem 1.4. We do this by establishing the following claim.

Claim. For k  1, there is a path in Edk,dk (yk) between 1k(001) and 2k(001).
Proof of the claim. Consider the map k : Ed0,d0 (y0)  Edk,dk (yk) defined as follows: an element u  Ld0 (y0) = {0001, 0102, 1001} is mapped to the suffix of length dk of k(u), and an element v  Rd0 (y0) = {2000, 0010} is mapped to the prefix of length dk of x-k 1k(v). We first need to show that this map is well-defined. This amounts to show that |k(u)|  dk for all u  L(y0), and |k(v)| - |xk|  dk for

SUFFIX-CONNECTED LANGUAGES

23

all v  R(y0). The former condition is obvious, and the latter boils down to a few computations:
|k(0010)| - |xk| = |k(001)| + |k(0)| - |k(2)| + 1
> |k(001)| + 1 = dk;
|k(2000)| - |xk| = |k(2000)| - |k(2)| + 1
= |k(000)| + 1
> |k(001)| + 1 = dk.
Note that k maps {0001, 1001} onto the natural embedding of L(wk). Since Ed0,d0 (y0) is connected, it suffices to show that k defines a graph morphism. Take u  Ld0 (y0) and v  Rd0 (y0), and suppose that uy0v  L. Then, it follows that k(uy0v)  L. Since k(u) is a suffix of u and xkk(v) is a prefix of v, we conclude that k(u)ykk(v) = k(u)k(y0)xkk(v) is a factor of k(uy0v). Therefore, it must also be in L, and k : Ed0,d0 (y0)  Edk,dk (yk) is a graph morphism.
With some extra work, we were able to show that the map k defined in the previous proof is in fact a graph isomorphism. To prove this, we made use of the following observation, which is a consequence of the Cayley-Hamilton theorem: for any word x  A, the sequence (|k(x)|)kN follows the linear recurrence determined by the characteristic polynomial of . This is a general observation which holds for any substitution, and we believe it could be useful for establishing suffixconnectedness in harder cases.

10. Conclusion

Let us end this paper by suggesting a few ideas for future reasearch. Firstly, we feel that the proof presented in Section 9, on account of its ad-hoc and technical nature, is somewhat unsatisfactory. We hope it could be improved.

Question 10.1. Is there a more systematic approach to show that a given language is suffix-connected?

In particular, it could be interesting to study other examples of suffix-connected languages defined by primitive substitutions, and see how much of Section 9 can be recycled. According to our computations, the languages defined by the following primitive substitutions are likely to be suffix-connected while also having infinitely many disconnected elements:

0  100

1 2

 

032 232

;

3  03

0  01

1 2

 

2 3

;

3  02

0  12

1 2

 

2 01

.

In [8], Dolce and Perrin introduced the notion of an eventually dendric language, which requires all but finitely many extension graphs to be trees. This suggests the analogous notion of an eventually suffix-connected language, in which all but finitely many words are suffix-connected.

Question 10.2. Can we find a generalization of Theorem 1.1 for eventually suffixconnected languages?

24

H. GOULET-OUELLET

Finally, Dolce and Perrin also showed that the class of eventually dendric languages is closed under two operations, namely conjugacy and complete bifix decoding [8]. We wonder if analogous results hold for suffix-connected languages.
Question 10.3. Is the class of suffix-connected languages closed under complete bifix decoding or conjugacy?

References

[1] J. Almeida and A. Costa, A geometric interpretation of the Schützenberger group of a mini-

mal subshift, Ark. Mat. 54 (2016), no. 2, 243­275.

[2] S. Balchin and D. Rust, Computations for symbolic substitutions, J. Integer Seq. 20 (2017).

[3] V. Berthé, C. De Felice, V. Delecroix, F. Dolce, J. Leroy, D. Perrin, C. Reutenauer, and

G. Rindone, Specular sets, Theoret. Comput. Sci. 684 (2017), 3­28.

[4] V. Berthé, C. De Felice, F. Dolce, J. Leroy, D. Perrin, C. Reutenauer, and G. Rindone,

Acyclic, connected and tree sets, Monatsh. Math. 176 (2015), no. 4, 521­550.

[5] J. A. Bondy and U. S. R. Murty, Graph theory with applications, Macmillan London, 1976.

[6] The Sage Developers, SageMath, the Sage Mathematics Software System (Version 9.2), 2020,

https://www.sagemath.org.

[7] F. Dolce and D. Perrin, Neutral and tree sets of arbitrary characteristic, Theoret. Comput.

Sci. 658 (2017), 159­174.

[8]

, Eventually dendric shift spaces, Ergodic Theory Dynam. Systems (2020), 1­26.

[9] F. Durand, A characterization of substitutive sequences using return words, Discrete Math.

179 (1998), no. 1-3, 89­101.

[10] N. Pytheas Fogg, V. Berthé, S. Ferenczi, C. Mauduit, and A. Siegel (eds.), Substitutions in

dynamics, arithmetics and combinatorics, Springer Berlin Heidelberg, 2002.

[11] I. Kapovich and A. Myasnikov, Stallings foldings and subgroups of free groups, J. Algebra

248 (2002), no. 2, 608­668.

[12] B. Steinberg, Fundamental groups, inverse Schützenberger automata, and monoid presenta-

tions, Comm. Algebra 28 (2000), no. 11, 5235­5253.

University of Coimbra, CMUC, Department of Mathematics, and University of
Porto, CMUP, Department of Mathematics Email address: hgouletouellet@student.uc.pt

