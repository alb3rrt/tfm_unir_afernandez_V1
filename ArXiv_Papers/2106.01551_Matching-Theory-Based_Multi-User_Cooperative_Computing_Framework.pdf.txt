1
Matching-Theory-Based Multi-User Cooperative Computing Framework
Ya Zhou, Guopeng Zhang, Kezhi Wang and Kun Yang

arXiv:2106.01551v1 [cs.GT] 3 Jun 2021

Abstract--In this paper, we propose a matching theory based multi-user cooperative framework to minimize the overall energy consumption of all the user equipments (UEs), where the UEs can be classified into the following roles: resource demander (RD), resource provider (RP), and standalone UE (SU). We first determine the role of the UE by leveraging the roommate matching method. Then, by adopting college admission based algorithm, we divide the UEs into multiple cooperation groups, each consisting of one RP and multiple RDs. Next, we propose the rotation swap operation to further improve the performance without deteriorating the system stability. Finally, we present an effective task offloading algorithm to minimize the energy consumption of all the cooperation groups. The simulation results verify the effectiveness of the proposed scheme.
Index Terms--multi-user cooperative computing, matching theory, computing task offloading.
I. INTRODUCTION
W ITH the rapid deployment of the computationallyintensive tasks, e.g., virtual reality, the requirement for user equipment (UE) in terms of battery life and computing resource are also increasing. Although traditional fixed infrastructure-based mobile edge computing (MEC) may help to provide computing resources to UEs, they may be inaccessible in some situations, like disasters or emergency cases where infrastructures are unavailable. Multi-user cooperative computing (MUCC), or cooperative computation framework [1]­[3] has recently been proposed and may be applied to allow the user to utilize available computing resources from neighboring UE.
In cooperative computation framework, the UEs can be classified as one of the following roles: 1) resource demander (RD), which has a computationally-intensive task to be processed; 2) resource provider (RP), which has available computing resource to provide for other RDs; and 3) standalone UE (SU), which may do the task itself. The authors in [4] proposed a one-to-one cooperation scheme aiming at minimizing the long-term weighted energy consumption of two UEs. Additionally, the cooperation model proposed in [5] contains an RP, an RD, and a MEC server. The RD has the
This work was supported in part by the National Natural Science Foundation of China (Grant nos. 61971421).
Ya Zhou and Guopeng Zhang are with the School of Computer Science and Technology, China University of Mining and Technology, Xuzhou 221116, China (e-mail: zhou ya@cumt.edu.cn; gpzhang@cumt.edu.cn).
Kezhi Wang is with the Department of Computer and Information Science, Northumbria University, Newcastle NE1 8ST, U.K. (e-mail: kezhi.wang@northumbria.ac.uk).
Kun Yang is with the School of Computer Science and Electronic Engineering, University of Essex, Colchester CO4 3SQ, U.K. (e-mail: kunyang@essex.ac.uk).

option to offload the task to the MEC server or the RP to minimize the task completion time. Also, the authors in [6] proposed a one-to-multiple cooperation scheme, which allows an RD to partition its task into multiple parts and offload them to multiple RPs for parallel execution. In [7], an RD is allowed to select one RP from a group of potential RPs to minimize its energy consumption.
However, the above works have not addressed the following issues: (1) how to determine the role of a UE, i.e., as an RD, an RP, or a SU; (2) how to determine the association between the RDs and the RPs; and (3) how each RP allocates its computing and communication resources to the served RDs. Against the above background, the main contribution of this paper is as follows:
1) We first propose the roommates [8] based matching algorithm to address the role assignment for all the UEs.
2) Then, we adopt the college admission [9] based algorithm to address the user association problem. To further improve the performance of the system, we propose the rotation swap operation without deteriorating the stability of the system.
3) Next, we propose a successive convex approximation (SCA) based multi-user task offloading algorithms to minimize the energy consumption of the whole system.
The remainder of this paper is organized as follows. The system model is described in Sec. II. The energy minimization problem, as well as the algorithm to solve the problem, is given in Sec. III. The performance of the algorithm is validated in Sec. IV. Finally, the paper is summarized in Sec. V.
II. SYSTEM MODEL
We consider a multi-user cooperative computing system consisting of a set N {1, 2, . . . , N } of N UEs, which can establish connections with each other via direct communications. A discrete-time system model is considered. Let T {t = 1, 2, ...} denote the index set of the time slot sequences. The length of slot t (t  T ) is  . In slot t, UE m (m  N ) has a computing task to be executed, which is represented by m = (Lm, Cm), where Lm (in bits) denotes the amount of task data to be processed, whereas Cm (in CPU cycles/bit) denotes the number of CPU cycles required to be executed for each data bit. To complete task m with minimal energy in a time slot, the CPU frequency of UE m can be adjusted to fm = CmLm/ , by using the dynamic voltage and frequency scaling (DVFS) technique [4]. Let m denote

2

RP NOMA Link
RD1 RD2

Computing power
Slot t-1

Slot t

Local workload Accepted workload Offloaded workload Task data offloading

Fig. 1. The task offloading process in a cooperation group.

the effective capacitance coefficient of the CPU of UE m. Then, the energy spent by UE m is as

EmË = mfm2 CmLm = mCm3 L3m/ 2, m  N . (1)

In each time slot, the UEs in set N can be divided into the following three subsets, i.e., the RD set N , the RP set N È, and the SU set N Ë. Then, we have

N x  N y = , x, y  { , È, Ë} and x = y. (2)

N NÈ NË = N.

(3)

We assume that RD i (i  N ) can partition its task i into two parts. One part is processed locally, while the other part is offloaded to RP j (j  N È) for cooperative computing. Let li,j denote the amount of task data offloaded from RD i to RP j. Then, we have

0  li,j  Li, i  N , j  N È.

(4)

We define the indicator function ½0li,jLi  {0, 1} to
represent the association between the RDs and the RPs. If
RD i offloads part of its task i to RP j, ½0<li,jLi = 1, otherwise, ½li,j=0 = 0.
We also assume that RD i can choose at most one RP j to offload task i, that is

½li,j  1, i  N .

(5)

jN È

In addition, we assume that RP j can provide computing resources no more than aj (aj  1) to RDs, that is

½li,j  aj , j  N È.

(6)

iN

The set of RDs that are associated with RP j can thus be
denoted by Mj i  N ½| li,j = 1 .
Next, we introduce the task offloading process in a cooperation group composed of RP j and the associated RDs in set Mj. As illustrated in Fig. 1, the task offloading will span the following two consecutive slots.
Slot t - 1 (Task data offloading): At the beginning of slot t - 1, all the RDs in set Mj simultaneously transfer their task data to RP j by using non-orthogonal multiple access (NOMA)
communications [10]. In order not to cause serious co-channel
interference, the system allocates orthogonal channels (of the same size of w MHz) for different RPs to receive task data. Let pi,j denote the transmit power of RD i associated with RP j, and gi,j the channel gain between RD i and RP j. When the successive interference cancellation (SIC) method [10] is used, RP j can decode the information bits of all the served

RDs in set Mj according to their index order. The achievable data rate of RD i is given by

ri,j = w log2 1 +

pi,j gi,j nMj\{i} pn,j gn,j + 2

,

(7)

where 2 is the noise power at the receiver of RP j. For correct receiving the task data of RD i of li,j bits, the lower bound of the transmit power of RD i is obtained as [10]

pi,j

=

2 gi,j

2 - 1 2 li,j

1

w

w

 P , nMj \{i} ln,j

Max i

(8)

where PiMax is the maximum transmit power of RD i. By using eq. (8), the energy consumption of RD i in slot
t - 1 for task data offloading is obtained as

EiT,xj = pi,j , i  Mj , j  N È.

(9)

Slot t (Cooperative computing): After collecting the task

data of all the RDs in Mj, RP j can increase the CPU

frequency as fj = Lj + ½ l iMj li,j i,j / for completing
the accepted tasks as well as its task in slot t. The energy

spent by RP j for processing the tasks is given by



3

EjÈ = j Cj3 Lj +

½li,j li,j  / 2, j  N È. (10)

iMj

Since the size of the result is small, the energy spent by RP

j for feeding back the result is ignored.

In the meanwhile, RD i (i  Mj) can save

its energy by decreasing the CPU frequency to fi =

Li - ½ È jN l li,j i,j / for processing the remaining part
of task i. Therefore, the energy spent by RD i for local

execution in slot t is given by



3

EiCx = iCi3 Li -

½li,j li,j  / 2, i  N . (11)

jNÈ

Then, the total energy spent by RD i to complete task i is given by

Ei

½ = EiCx + jN È

li,j EiT,xj ,

i  N

.

(12)

III. PROBLEM PRESENTATION AND SOLUTION

Our objective is to minimize the overall energy consumption of all the UEs in the system, which can be given by

min ½ li,j , li,j

iN

Ei

+ jN È EjÈ + nN Ë EnË

(13)

s.t.

(2), (3), (4), (5), (6), (8).

This problem is a mixed integer nonlinear programming (MINLP), which is very difficult to solve in general.
In this section, we analyze problem (13) from the perspective of matching theory and give an efficient solution to address it. The main method is as follows. We first determine the role of each UE in the cooperation framework. Then, we decide the association between the RDs and the RPs. Next, we minimize the energy consumption of each cooperation group for the whole system.

3

A. User role assignment

We regard an RP and the associated RD as a pair of roommates, and the UEs who do not get matched as the SUs. We define benefit as the measure for two agents if they can be matched. Assume UE m (m  N ) is matched to UE k (k  N and m = k), where UE m and UE k respectively act as the RD and the RP in the cooperation, then, they will get the same benefit as

Um,k = Uk,m = max
li,j

EmË + EkË - Em + EkÈ

.

(14)

where EmË + EkË denotes the total energy consumption of UEs m and k when they work independently, whereas Em + EkÈ denotes the total energy consumption when they cooperate. Hence, the proposed benefit function (14) gives
the maximum energy that UEs m and k can save through

cooperation. This problem is a special one-to-one cooperation

case of problem (17) raised in Sec. III.C, and, can then be

solved by using the proposed SCA-based method.

In the proposed roommates matching problem, any UE m can rank the other UEs in set N according to the benefits

that they can get from matching with other UEs. Following
(14), the preference list for UE m to choose roommates is set as P Lm = Um(1,)k, · · · , Um(N,N--1)1 , where Um(1,)k and Um(N,N--1)1 denote the most preferred and the least preferred UEs for
UE m, respectively. Then, the user role assignment can be

determined by using the classical Irving algorithm [8], which

is presented in Appendix A.

Then, the RP and RD in each successful matching pair can be put into sets N È and N , respectively. The UEs which

can not successfully match a roommate are put into the SU set N Ë, rather than simply rejected as in the Irving algorithm. As a result, the UE set N is partitioned into three subsets N , N È and N Ë. If two UEs i and j (i, j  N and i = j) both

have the incentive to leave their current partners and form a

new pair with each other, these two UEs form a blocking pair (i, j). One can see that the matching result is stable if there

exists no blocking pair.

Lemma 1. The matching result of the proposed user role assignment algorithm is stable.

Proof. Please refer to Appendix B.

B. User association
Using the resulting RD and RP sets, we consider that one RP can serve multiple RDs in each time slot. Therefore, the user association can be seen as a multi-to-one two-side matching problem, which can be transformed into the college admission problem [9], as it provides an effective approach to get stable multi-to-one matching. In the college admission based solution, each college has a fixed number of places, and students sequentially make proposals to each of their most preferred available colleges. If a college receives an application from a student that benefits more than its current set of applicants, it will accept the application and drop its least preferred current applicant. This process continues until all students are matched to colleges.

In the user association problem, the two disjoint UE sets, i.e., the RP set N È and the RD set N correspond to the college set and the student set, respectively. The benefit that RD i can get after associating with RP j is shown as the energy saving for RD i with the help of RP j, then, one has

Ui,j

=

max
li,j

EiË - Ei

.

(15)

The benefit, or the energy saving which RP j can get is given by

UjÈ,i

=

max
li,j

EiË + EjË - Ei + EjÈ

.

(16)

Following (15), the preference list of RD i is defined as

PLi , which is a ranking of RD i over all in descending order according to Ui,j j
following (16), the preference list of RP j

the RPs in set N È  N È . Similarly, is defined as PLÈj ,

which is a ranking of RP j over all the RDs in set N in

descending order according to UjÈ,i i  N . Then, the user

association problem can be mapped into the college admission

problem. It can be solved by using the Gale-Shapley (GS)

algorithm, which is presented in Appendix C.

Although the matching result obtained by using the GS

algorithm is stable, some RDs may not match their preference

based on their preference lists [11], [12]. Next, we propose

the rotation swap operation which allows RDs to associate

with other RPs with better performance through exchanging

their currently matched RPs without losing the stability. Before

presenting the operation, some definitions and notations are

given below.

Definition 1. Cabal: a cabal K = {k1, ..., kx, ..., kK } is a subset of N , such that  (kx-1) kx (kx) according to PLkx , kx  K (x - 1 = K when x = 1).
Definition 2. Accomplice: the accomplice set H(K) of cabal K is a subset of N , such that h  H(K) if 1) h / K, for any kx  K if (kx) h (h) and h (kx) kx, or 2) h  K and h = kl (kl  K), for any kx  K and x = l if (kx) kl (kl-1) and kl (kx) kx+1.
Definitions 1 and 2 show that the RDs in set H(K) may have prevented the RDs in set K from matching their more
preferred RPs. Therefore we propose the falsify operation, which enables the RDs in set H(K) to help the RDs in set K
match more preferred RPs.
Let s i n denote that RD i prefers RP s over RP n in PLi . Let  (i) denote the partner of RD i obtained by using the GA algorithm. Assume S(i) denotes the partner of RD i obtained by further performing the rotation swap operation. If S(i) i (i), we say that matching S is "at least as good as" matching , which is denoted by S  . We rewrite the preference list of RD i as PLi = PLL (i), (i), PLR (i) , where PLL (i) and PLR (i) denote the RPs that are ranked higher and lower than (i), respectively. Then, the falsify operation is to move RP  (  PLL (i)) from PLL (i) to PLR (i). Let r PLi denote the random permutation of PLi . Then, we can have the following Lemma.

4

Algorithm 1 Rotation Swap Operation (RSO)
Initialization: Let  = 0, where 0 is the matching result obtained by performing the Irving as well as the GS algorithm.
1: while there exists cabal K in  do 2: Find accomplice H(K) of cabal K according to Definition 2.

We obtain the partial derivatives of the Fi,j with respect to li,j and ln,j as

li,j Fi,j = N0 ln   iMj li,j .

(19)

and

3: for all RD i  K do

4: 5:

if i  H (K) - K then RD i falsifies its preference list PLi as

ln,j Fi,j = N0 ln   -  iMj li,j nMj \{i} ln,j . (20)

r(PLL (i) - ), (i), r(PLR (i) + ) , where respectively. Then, we get the following Lemma.

 = {c | (m)  (K), m c m + 1}.

6:

else

Lemma 3. li,j Fi,j and ln,j Fi,j are Lipschitz continuous

7:

RD i (i = il, il  K) falsifies its preference list PLi on li,j and ln,j with the constants LC and LF , respectively,

as r(PLL (i) - ), (i - 1), r(PLR (i) + ) , where where  = {c | (m)  (K), w l (m - 1), l w m + 1}.

LC

and

LF

are

the

Lipschitz

constants.

8:

end if

Proof. Please refer to Appendix E.

9: end for

10: Perform the GS algorithm over the modified preference lists If the first derivative of a non-convex function is Lipschitz

11:

of if

tthheereUeExsi,stasnndoojbtainNtÈhe snuecwh

matching that (j)

result S. j S(j)

then

12:

 = S.

13: end if

14: end while

continuous on the variables with the corresponding Lipschitz constants and each variable is nonempty, closed, and convex, then, the non-convex function can be converted to a convex one by SCA [10]. Lemma 3 indicates that Fi,j meets this rule

15: return Matching result .

and thus can be converted to a convex one by using SCA. Let Dj l1,j, ..., l|Mj|,j T denote the offloading strategy
profile of the RDs in set Mj. Let t = 1, 2, ... denote the

Lemma 2. Let J  N . If all the RDs in set J (i  J ) submit their falsified lists in the form r PLL (i) -  ,  (i) , r PLR (i) +  , then S  .

iterative numbers. Then, li,j[t] represents the amount of task data offloaded from RD i to RP j in the tth iteration. By using
eqs. (19) and (20), we derive the gradient of pi,j on Dj[t] as

Proof. Please refer to Appendix D.

Dj [t]pi,j =

 pi,j  l1,j [t]

,

 pi,j  l2,j [t]

,

...,

 pi,j l|Mj|,j [t]

T
.

(21)

Lemma 2 shows that if the RDs which have matched RPs change the location of their rejected RPs in the preference list, the matching result will not change. The proposed rotation

According to [13], a strongly convex function to approximate pi,j can then be constructed as

swap operation is presented in Algorithm 1, wherein lines 3-9, the RDs in set H help the RDs in set K match their

pi,j

pi,j [t]

+

1 2

(Dj

-

Dj [t])T

(Dj

-

Dj [t])

2Dj[t]pi,j +

more preferred RPs through the falsify operation. Line 10 performs the GS algorithm with the modified preference list

 2

||Dj

-

Dj [t]|

|2

+

(Dj

-

Dj [t])T

Dj[t]pi,j .

(22)

and obtains a new stable matching result S. Since the rotation swap operation only benefits RDs, lines 11-13 ensures that the operation does not increase the overall energy consumption of the system. The algorithm performs end without the cabal.

where   0 is required. Now, we can approximate constraint

(8) as

pi,j  PiMax, i  Mj.

(23)

By replacing constraint (8) with constraint (23), problem

(17) is converted to a convex one and can be solved by using

C. Resource allocation

convex optimization tools, e.g., CVX [14].

After solving the above user role assignment and the association problems, all the UEs can be divided into multiple cooperation groups, each consisting of one RP and multiple RDs. Therefore, problem (13) can be rewritten as

min
li,j , pi,j

EjÈ

+

iMj

Ei

(17)

s.t. (4), (8).

The above Problem (17) is non-convex due to the nonconvexity of constraint (8). We define N0 = 2/gi,j and  = 21/w. Then, constraint (8) can be converted to the
following form

Fi,j = pti,j -PiMax = N



-  iMj li,j

nMj \{i} ln,j

 0.

(18)

IV. SIMULATION RESULTS
This section shows the performance of the proposed method. We consider a 100 × 100 m2 rectangular area, where multiple
UEs are randomly distributed. Other parameters used in the
simulation are given below. The effective capacitance coefficient is m = 10-28. The noise power is 2 = 10-9. The maximum transmit power of the UE is PmMax = 0.1 W. The duration of a time slot is  = 0.2 s. The number of CPU cycles required to execute one task bit is Cm = 500. The bandwidth is W = 1 MHz. The channel power gain is 0.001/d3, where d is the distance between two UEs (in meters). The maximum connection constraint of the UE is am = 2.
For comparison purpose, we also show the local computing
solution, the one-to-one random-matching method, the pure
Irving algorithm (i.e., the one-to-one roommate matching

5

System energy consumption (Joule)

20 15 10

Local computing Random matching Pure Irving algorithm Irving plus GS algorithm Our proposed method

5

0 10

20

30

40

50

60

70

80

Number of UEs

Fig. 2. The variation of energy consumption with the number of UEs.

amount of tasks offloaded by both UEs 4 and 10 are increased, thus reducing their energy consumption and further reducing the total energy consumption of the system.
V. CONCLUSION
In this paper, we have proposed a matching theory based multi-user cooperative framework, which can minimize the overall energy consumption of all the UEs. To achieve this objective, firstly, we have presented the roommate matching based solution to determine the role of each UE. Then, we have proposed a college admission based algorithm to divide all the UEs into multiple cooperation groups, with the help of rotation swap operation. In each group, we have further proposed an effective task offloading algorithm to determine the resource allocation of all the UEs. The simulation result has shown that our proposed solution outperforms other benchmark methods.

APPENDIX A THE USER ROLE ASSIGNMENT ALGORITHM

(a) Before performing the RSO.

(b) After performing the RSO.

Fig. 3. User role assignment and user association.

The amount of task data (bits) The amount of task data (bits)

x10^6 1.25
1.00

Local executed task Offloaded task Received task

0.75

0.50

0.25

0.00

64

8 5 10

917

The index of UEs

23

(a) Before performing the RSO.

Fig. 4. Task offloading results.

x10^6 1.25
1.00

Local executed task Offloaded task Received task

0.75

0.50

0.25

0.00

6 10

845

917

The index of UEs

23

(b) After performing the RSO.

method), and the Irving plus GS algorithm (i.e., the multipleto-one matching without performing the rotate swap operation (RSO) presented in Algorithm 1). The amount of task data for each UE is randomly distributed in [0, 1] Mbits.
Fig. 2 shows the overall energy versus the number of the UEs. One can see that the energy consumption of all the methods increase as the number of UEs increases. Our proposed method outperforms the other methods in all situations.
Next, we show how the proposed RSO influences the system performance when there are 10 UEs. Figs. 3(a) and 3(b) show the user role assignment and the user association before and after performing the RSO, respectively, while Figs. 4(a) and 4(b) show the task offloading data before and after performing the RSO, respectively.
From Figs. 3(a) and 3(b), one can see that the UE sets {6, 8, 9}, {1, 4, 5, 7, 10}, and {2 , 3 } are identified as the RP, RD, and SU sets, respectively. Before performing the RSO, the cooperation groups in the system are (6, 4), (8, 5, 10) and (9, 1, 7), respectively. After performing the RSO, UEs 4 and 10 exchange their associated RPs, thus updating the cooperation groups as (6, 10) and (8, 4, 5), respectively. Then, from Figs. 4(a) and 4(b), one can see that after performing the RSO, the

Algorithm 2 User Role Assignment

Initialization: let UL = N , where UL is the set of the unmatched

UEs in a multi-user cooperative computing system.

1: while UL is not empty do

2: Choose UE m (m  UL) from set UL;

3: if UE m is rejected by all the UEs in PLm then

4:

Remove UE m from set UL;

5:

Go back to Step 1;

6: end if

7: UE m proposes to match UE k (k  PLm), which is the

most favorite partner of UE m that does not reject UE m;

8: if UE k holds no proposal or prefers UE m to previous

proposal UE s (s  PLk) then

9:

UE k matches UE m and rejects UE s;

10:

Remove UE m from set UL;

11:

Add UE s in set UL;

12: else

13:

UE k rejects UE m;

14: end if

15: end while

16: Each successfully matched UE retains the matching UE and

rejects all the other UEs in the preference list;

17: for all successful matching pairs in the system do

18: Put the UEs acting as the resource providers (RPs) in the

matching pairs into set N ;

19:

Put the UEs acting matching pairs into

as set

tNheÈr;esource

demanders

(RDs)

in

the

20: 21:
22:

end for Put the
return

non-matched UE sets N

,UNEsÈi,natondseNt

NË . Ë ;

APPENDIX B THE PROOF OF LEMMA 1
We prove this Lemma by contradiction. Assuming that the matching result is not a stable matching, then at least one blocking pair (m, k), m, k  N and m = k exists in the matching result. We analyze the following two cases.
1) In the first case, we consider that UE k is unmatched and never receives a request from UE m. It indicates that UE m prefers its current partner to UE k. Therefore, pair

6

(m, k) cannot constitute the blocking condition (given in the paragraph above Lemma 1 of the paper). 2) In the second case, we consider that UE k is matched successfully and the unilaterally blocking condition that UE k prefers UE m to its current partner is satisfied. In such a case, UE m is either unmatched or prefers UE k to the current partner. Then, UE m should request computing resource from UE k or pair (m, k) should be removed. In either case, all the UEs located after UE m in the preference list of UE k (including the current partner of UE k) will be rejected by UE k, which causes a contradiction.

APPENDIX C THE GALE-SHAPLEY ALGORITHM

Algorithm 3 The Gale-Shapley Algorithm

Initialization: let UL = N , where UL is the set of the unmatched

UEs.

1: while UL is not empty do

2: Choose RD i (i  UL) from set UL;

3: if RD i is rejected by all RPs in PLi then

4:

Remove RD i from set UL;

5:

Go back to Step 1;

6: end if

7: RD i proposes to match RP j (j  PLi ), which is the most favorite RP of RD i that does not reject RD i;

8: if RP j holds the number of proposals less than the maximum

limit aj then

9:

RP j matches RD i;

10:

Remove RD i from set UL;

11: else if RP j holds more than aj proposals and prefers RD i

12:

to

one of its current proposal RDs then RP j selects the least preferred RD m

(m



PLÈj )

from

the current proposal SDs and rejects it;

13:

Add RD m to set UL;

14:

RP j matches RD i;

15:

Remove RD i from set UL;

16: else

17:

RP j rejects RD i.

18: end if

19: end while

20: return UE association.

APPENDIX D THE PROOF OF LEMMA 2
Considering that all the RPs in PLL (i) have rejected the request of RD i, we prove this Lemma by analyzing the following two cases.
1) In the first case, RD i does not propose to match the RPs in PLR (i). Therefore, the random permutation of PLL (i) and PLR (i) has no effect on the result.
2) In the second case, we assume that the shift operation is performed for the RPs in PLL (i). Hence, part of them is moved from PLL (i) to PLR (i), and, the newly obtained PLL (i) and PLR (i) are randomly permuted. As RD i still holds the same partner as before, the current matching S is at least the same as .

APPENDIX E THE PROOF OF LEMMA 3
Let x = li,j and G (li,j ) = li,j Fi,j . Due to the monotonic increasing of G (li,j), one can get

lim G (x)  G (x)  lim G (x) .

(24)

x0

xLi

For any x1, x2  [0, Li], one can further derive that

|G (x1) - G (x2)|  G (Li) - G (0) .

(25)

Since |x1 - x2|  Li, it is easy to derive that

|G (x1) - G (x2)|  LCLi,

(26)

where

LC

=

G (Li) - Li

G (0) ,

(27)

is the Lipschitz constant of G (x). Now, we have proved that li,j Fi,j is Lipschitz continuous
on li,j with the Lipschitz constant LC. The Lipschitz continuity of ln,j Fi,j can be proved in a similar way which is
omitted here.

REFERENCES
[1] X. Chen and J. Zhang, "When d2d meets cloud: Hybrid mobile task offloadings in fog computing," in 2017 ICC, May 2017, pp. 1­6.
[2] P.-Q. Huang, Y. Wang, K. Wang, and Z.-Z. Liu, "A bilevel optimization approach for joint offloading decision and resource allocation in cooperative mobile edge computing," IEEE Trans. Cybern., vol. 50, no. 10, pp. 4228­4241, 2020.
[3] Y. Pan, C. Pan, K. Wang, H. Zhu, and J. Wang, "Cost minimization for cooperative computation framework in mec networks," IEEE Trans. Wireless Commun., pp. 1­1, 2021.
[4] Q. Lin, F. Wang, and J. Xu, "Optimal task offloading scheduling for energy efficient d2d cooperative computing," IEEE Commun. Lett., vol. 23, no. 10, pp. 1816­1820, Oct 2019.
[5] X. Cao, F. Wang, J. Xu, R. Zhang, and S. Cui, "Joint computation and communication cooperation for energy-efficient mobile edge computing," IEEE Internet Things J., vol. 6, no. 3, pp. 4188­4200, Jun. 2019.
[6] D. Wu, F. Wang, X. Cao, and J. Xu, "Wireless powered user cooperative computation in mobile edge computing systems," in 2018 GC Wkshps, Dec 2018, pp. 1­7.
[7] Z. Sheng, C. Mahapatra, V. C. M. Leung, M. Chen, and P. K. Sahu, "Energy efficient cooperative computing in mobile wireless sensor networks," IEEE Trans. on Cloud Comput., vol. 6, no. 1, pp. 114­126, Jan 2018.
[8] R. W. Irving, "An efficient algorithm for the "stable roommates" problem," J Algorithms, vol. 6, no. 4, pp. 577­595, 1985.
[9] A. E. Roth, "The college admissions problem is not equivalent to the marriage problem," J. Econom. Theory, vol. 36, no. 2, pp. 277­288, 1985.
[10] Z. Ding, J. Xu, O. A. Dobre, and H. V. Poor, "Joint power and time allocation for noma­mec offloading," IEEE Trans. Veh. Technol., vol. 68, no. 6, pp. 6207­6211, June 2019.
[11] Y. Gu, Y. Zhang, M. Pan, and Z. Han, "Matching and cheating in device to device communications underlying cellular networks," IEEE J. Sel. Areas Commun., vol. 33, no. 10, pp. 2156­2166, Oct 2015.
[12] B. Wang, Y. Sun, S. Li, and Q. Cao, "Hierarchical matching with peer effect for low-latency and high-reliable caching in social iot," IEEE Internet Things J., vol. 6, no. 1, pp. 1193­1209, Feb 2019.
[13] F. Facchinei, S. Sagratella, and G. Scutari, "Flexible parallel algorithms for big data optimization," in 2014 ICASSP, May 2014, pp. 7208­7212.
[14] M. Grant and S. Boyd, "CVX: Matlab software for disciplined convex programming, version 2.1," http://cvxr.com/cvx, Mar. 2014.

