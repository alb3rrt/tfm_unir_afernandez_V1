arXiv:2106.00312v1 [math.LO] 1 Jun 2021

MAXIMAL TOWERS AND ULTRAFILTER BASES
IN COMPUTABILITY THEORY
STEFFEN LEMPP, JOSEPH S. MILLER, ANDRÉ NIES, AND MARIYA I. SOSKOVA
Abstract. The tower number t and the ultrafilter number u are cardinal characteristics from set theory, They are based on combinatorial properties of classes of subsets of  and the almost inclusion relation  between such subsets. We consider analogs of these cardinal characteristics in computability theory.
We say that a sequence Gn n of computable sets is a tower if G0 = , Gn+1  Gn, and Gn Gn+1 is infinite for each n. A tower is maximal if there is no infinite computable set contained in all Gn. A tower Gn n is an ultrafilter base if for each computable R, there is n such that Gn  R or Gn  R; this property implies maximality of the tower. A sequence Gn n of sets can be encoded as the "columns" of a set G  . Our analogs of t and u are the mass problems of sets encoding maximal towers, and of sets encoding towers that are ultrafilter bases, respectively. The relative position of a cardinal characteristic broadly corresponds to the relative computational complexity of the mass problem. We use Medvedev reducibility to formalize relative computational complexity, and thus to compare such mass problems to known ones.
We show that the mass problem of ultrafilter bases is equivalent to the mass problem of computing a function that dominates all computable functions, and hence, by Martin's characterization, it captures highness. On the other hand, the mass problem for maximal towers is below the mass problem of computing a non-low set. We also show that some, but not all, noncomputable low sets compute maximal towers: Every noncomputable (low) c.e. set computes a maximal tower but no 1-generic 02-set does so.
We finally consider the mass problems of maximal almost disjoint, and of maximal independent families. We show that they are Medvedev equivalent to maximal towers, and to ultrafilter bases, respectively.

Contents

1. Introduction

2

2. Basics of the mass problems TB

5

3. Complexity of T and of U

7

Date: June 2, 2021. 2020 Mathematics Subject Classification. Primary 03D30. Key words and phrases. sequences of computable sets, mass problems, Medvedev reducibility, cardinal characteristics, highness, ultrafilters. Lempp was partially supported by Simons Collaboration Grant for Mathematicians #626304. Miller was partially supported by grant #358043 from the Simons Foundation. Nies was partially supported by the Marsden fund of New Zealand, grant 19-UOA-346. Soskova was partially supported by NSF Grant DMS-1762648. The authors thank Jörg Brendle and Noam Greenberg for helpful discussions during a workshop at the Casa Matemática Oaxaca in August 2019, where this research received its initial impetus.
1

2

LEMPP, MILLER, NIES, AND SOSKOVA

4. Maximal independent families in computability

11

5. The co-computably enumerable case

13

6. Ultrafilter bases for other Boolean algebras

17

References

19

1. Introduction
Cardinal characteristics measure how far the set-theoretic universe deviates from satisfying the continuum hypothesis. They are natural cardinals greater than 0 and at most 20. For instance, the bounding number b is the least size of a collection of functions f :    such that no single function dominates the entire collection.1 Related is the dominating number d, the least size of a collection of functions f :    such that every function is dominated by some function in the collection. Here, for functions f, g :   , we say that g dominates f if g(n)  f (n) for sufficiently large n. An important program in set theory is to prove less than or equal-relations between characteristics in ZFC, and to separate them in suitable forcing extensions.
Analogs of cardinal characteristics in computability theory were first studied by Rupprecht [14, 15] and further investigated by Brendle, Brooke-Taylor, Ng, and Nies [2]. An article by Greenberg, Kuyper, and Turetsky [7], in part based on Rupprecht's work, provides a systematic approach to the two connected settings of set theory and computability, at least for certain types of cardinal characteristics. The relevant characteristics are given by binary relations, such as the domination relation  between functions; their computability-theoretic analogs are ordered by reducibilities that measure relative computability. A well understood example of this is how the relation  gives rise to the bounding number b() and the dominating number d(), and their analogs in computability, which are highness and having hyperimmune degree. A general reference in set theory is the survey paper by Blass [1]. The recent brief survey by Soukup [18] contains a diagram displaying the ZFC inequalities between the most important characteristics in this setting, along with b() and d().
In this paper, we consider cardinal characteristics that do not fit into the framework of Rupprecht, and Greenberg et al. [7]. In particular, we initiate the study of the computability-theoretic analogs of the ultrafilter, tower, and independence numbers. These characteristics are defined in the setting of subsets of  up to almost inclusion ; we give definitions below.
The ultrafilter number u is the least size of a subset of [] with upward closure a nonprincipal ultrafilter on . We note that one cannot in general require here that the subset is linearly ordered by . Recall that an ultrafilter F on  is a P -point if for each partition Cn of  such that Cn  F for each n, there is A  F such that Cn  A is finite for each n. An ultrafilter with a linear base is a P -point. Shelah (see Wimmers [19]) has shown that the non-existence of P -points is consistent with ZFC, so it is consistent that a version of u relying on linear bases would be undefined.
The tower number t is the minimum size of a subset of [] that is linearly ordered by  and cannot be extended by adding a new element below all given
1This is less commonly, but perhaps more sensibly, called the unbounding number.

MAXIMAL TOWERS AND ULTRAFILTER BASES IN COMPUTABILITY

3

elements. To define the pseudointersection number p, the requirement in the definition of towers that the sets in the class be linearly ordered under  is weakened to requiring that every finite subset of the class has an infinite intersection. So, trivially, p  t. In celebrated work, Malliaris and Shelah [12] showed (in ZFC) that p = t (see also [18]). It is not hard to see that ZFC proves t  u. It is consistent that t < u (see [1] for both statements).
A class C of subsets of  is independent if any intersection of finitely many sets in C or their complements is infinite. The independence number i is the least cardinal of a maximal independent family. There has been much work recently on i in set theory, in particular, the descriptive complexity of maximal independent families, such as in Brendle, Fischer, and Khomskii [3].
1.1. Comparing the complexity of the analogs in computability. The main setting for our analogy is given by the Boolean algebra of computable sets modulo finite differences. We consider maximal towers, the closely related maximal almost disjoint sets, and thereafter ultrafilter bases and maximal independent sets. As already demonstrated in the above-mentioned papers [14, 15, 2, 7], the relative position of a cardinal characteristic tends to correspond to the relative computational complexity of the associated class of objects.
Note that the usual formal definitions of computation relative to an oracle only directly apply to functions f :   , and to subsets of  (simply called sets from now on, and identified with their characteristic functions). The complexity of other objects is studied indirectly, via names that are functions on  giving discrete representations of the object in question. A particular choice of names has to be made. For instance, real numbers can be named by rapidly converging Cauchy sequences of rational numbers.
The witnesses for cardinal characteristics are always uncountable. In contrast, in our setting, the analogous objects are countable. They will be considered as sequences of sets rather than unordered collections. For, a single set X can be used as a name for such a sequence of sets: Let X[n] denote the "column" {u : u, n  X}.2 To every set X, we can associate a sequence Xn n in a canonical way by setting Xn = X[n]. (When introducing terminology, we will sometimes ignore the difference between Xn n and X.) An alternate viewpoint is that a set X is a name for the unordered collection of sets in its coded sequence. Although such a name includes more information than is in the unordered family, this information is suppressed when we quantify over all names; our results can be read in this context.
With this naming system, one can now use sequences as oracles in computations. We view the combinatorial classes of sequences as mass problems. To measure their relative complexity, we compare them via Medvedev reducibility s: Let C and D be sets of functions on , also known as mass problems. We say that C is Medvedev reducible to D and write C s D if there is a Turing functional  such that g  C for each g  D. Less formally, we say that functions in D uniformly compute functions in C. We will also refer to the weaker Muchnik reducibility: C w D if each function in D computes a function in C.
With subsequent research in mind, we will set up our framework to apply to general countable Boolean algebras rather than merely the Boolean algebra of the

2For definiteness, we employ the usual computable Cantor pairing function x, n . Note that x, n  x, n. This property is useful in simplifying notation in some of the constructions below.

4

LEMPP, MILLER, NIES, AND SOSKOVA

computable sets. Throughout, we fix a countable Boolean algebra B of subsets of  closed under finite differences. Our basic objects will be sequences of sets in B. We will obtain meaningful results already when we fix a countable Turing ideal I and let B be the sets with degree in I. While we mainly study the case when B consists of the computable sets, in Section 6, we briefly consider two other cases: the K-trivial sets and the primitive recursive sets.
1.2. The mass problem TB of maximal towers.
Definition 1.1. We say that a sequence Gn n of sets in B is a B-tower if G0 = , Gn+1  Gn, and Gn Gn+1 is infinite for each n. If B consists of the computable sets, we use the term tower of computable sets.
Definition 1.2. We say that a function p is associated with a tower G if p is increasing and p(n)  in Gi for each n.
The following fact is elementary.
Fact 1.3. A tower G uniformly computes a function p associated with it.
Proof. Let  be the Turing functional such that G(0) = min(G0), and G(n+1) is the least number in in+1 Gi greater than G(n). This  establishes the required uniform reduction.
Definition 1.4. Given a countable Boolean algebra B of sets, the mass problem TB is the class of sets G such that Gn n is a B-tower that is maximal, i.e., such that for each infinite set R  B, there is n such that R Gn is infinite.
Clearly, being maximal implies that no associated function is computable. In particular, a maximal tower is never computable. (Note that our notion of maximality only requires that the tower cannot be extended from below, in keeping with our set-theoretic analogy.)
1.3. The mass problem UB of ultrafilter bases. We now define the mass problem UB corresponding to the ultrafilter number. Since all filters of our Boolean algebras are countable, any base will compute a linearly ordered base by taking finite intersection. So we can restrict ourselves to linearly ordered bases. This is not always possible in the set theory setting, as discussed in the introduction.
Definition 1.5. Given a countable Boolean algebra B of sets, let UB be the class of sets F such that F is a B-tower as in Definition 1.1 and for each set R  B, there is n such that Fn  R or Fn  R. We will call a set F in UB a B-ultrafilter base.
Each ultrafilter base is a maximal tower. In the cardinal setting, one has t  u. Correspondingly, since UB  TB, we trivially have TB s UB via the identity reduction. The following indicates that for many natural Boolean algebras, ultrafilter bases necessarily have computational strength.
Proposition 1.6. Suppose that the degrees of sets in B form a Turing ideal K. Then for each B-ultrafilter base F and associated function p in the sense of Definition 1.2, the function p is not dominated by a function with Turing degree in K.
Proof. Assume that there is a function f  p in K. The conditions n0 = 0 and nk+1 = f (nk) + 1 define a sequence that is computable from some oracle in K, and

MAXIMAL TOWERS AND ULTRAFILTER BASES IN COMPUTABILITY

5

for every k we have that [nk, nk+1) contains an element of ik Fi. So the set
E = [n2i, n2i+1)
i
is in K, and clearly Fn  E and Fn  E for each n. Therefore, F is not a B-ultrafilter base.
1.4. The Boolean algebra of computable sets. We finish the introduction by summarizing our results in the case that B is the Boolean algebra of all computable sets. By Theorem 3.1, every non-low set computes a set in TB, and this is uniform. This is not a characterization, however, because by Corollary 5.3, every noncomputable c.e. set computes a maximal tower. On the other hand, we know that there are noncomputable (necessarily low) sets that do not compute maximal towers; in particular, no 1-generic 02-set does so. This is because 1-generic 02-sets are index guessable by Theorem 3.4, and by Proposition 2.4, no index guessable set can compute a maximal tower. Here, an oracle G is index guessable if  can find a computable index for Ge uniformly in e, provided that Ge is computable. We do not know whether index guessability characterizes the oracles that are unable to compute a maximal tower. It seems unlikely; index guessability appears to be stronger than necessary.
As already mentioned, in the setting of cardinal characteristics, t < u is consistent with ZFC. Since non-low oracles can be computably dominated, it follows from Proposition 1.6 that there is a member of TB that does not compute any member of UB. In other words, UB w TB in the case that B consists of the computable sets.
The separation above only uses the fact that members of UB are not computably dominated; in fact, they are high. As we show in Theorems 3.6 and 3.8, UB is Medvedev equivalent to the mass problem of dominating functions. In Section 4, we prove that the mass problem IB of maximal independent families is also Medvedev equivalent to the mass problem of dominating functions. Thus, in the case that B is the Boolean algebra of computable sets, we have UB s IB. Interestingly, we do not have a direct proof. Contrast this with the equivalence of TB and AB, the mass problem of maximal almost disjoint families; this equivalence is direct and holds for an arbitrary Boolean algebra, as we will see presently.

2. Basics of the mass problems TB
2.1. The equivalent mass problems TB and AB. Recall that in set theory, the almost disjointness number a is the least possible size of a maximal almost disjoint (MAD) family of subsets of . In our analogous setting, we call a sequence Fn n of sets in B almost disjoint (AD) if each Fn is infinite and Fn  Fk is finite for distinct n and k.
Definition 2.1. In the context of a Boolean algebra B of sets, the mass problem AB is the class of sets F such that Fn n is a maximal almost disjoint (MAD) family in B. Namely, the sequence is AD, and for each infinite set R  B, there is n such that R  Fn is infinite.
Fact 2.2. AB s TB s AB.
Proof. We suppress the subscript B. To check that A s T , given a set G, let Diff(G) be the set F such that Fn = Gn Gn+1 for each n. Clearly, the operator

6

LEMPP, MILLER, NIES, AND SOSKOVA

Diff can be seen as a Turing functional. If G is a maximal B-tower, then F = Diff(G) is MAD. For, if R  B is infinite, then R Gn is infinite for some n, and hence R  Fi is infinite for some i < n.
For T s A, given a set F , let G = Cp(F ) be the set such that
x  Gn  i < n [x  Fn].
Again, Cp is a Turing functional. If F is an almost disjoint family of sets from B, then G is a B-tower, and if F is MAD, then G is a maximal tower.

Recall that a maximal tower is not computable. Hence no MAD family is computable. (This corresponds to the cardinal characteristics being uncountable.)

2.2. Descriptive complexity and index complexity for maximal towers. For the rest of this section, as well as the subsequent three sections, we will mainly be interested in the case that B is the Boolean algebra of all computable sets. We will omit the parameter B when we name the mass problems. In the final section, we will consider other Boolean algebras.
Besides looking at the relative complexity of mass problems such as T and U, one can also look at the individual complexity of their members (as sets encoding sequences). Recall that a characteristic index for a set M is a number e such that M = e. The following two questions arise:
(1) How low in the arithmetical hierarchy can the set be located? (2) How hard is it to find characteristic indices for the sequence members?

Arithmetical complexity.
Fact 2.3. No maximal tower G is c.e., and no MAD set is co-c.e.
Proof. For the first statement, note that otherwise there is a computable function p associated with G. The range of p would extend the tower G.
For the second statement, note that the reduction Cp, introduced above to show that T s A, turns a co-c.e. set F into a c.e. set G.
We will return to Question (1) in Section 5, where we show that c.e. MAD sets exist in every nonzero c.e. degree, and that some ultrafilter base is co-c.e.

Complexity of finding characteristic indices for the sequence members. In several constructions of towers Gn n below, such as in Corollary 5.3 and Theorem 5.4, the oracle  is able to compute, given n, a characteristic index for Gn. The oracle  does not suffice by the following result.
Proposition 2.4. Suppose that G is a maximal tower. The oracle  is not able to compute, from input n, a characteristic index for Gn.
Proof. Assume the contrary. Then there is a computable function f such that lims f(n,s) is the characteristic function of Gn. Let G be defined as follows. Given n and x, compute the least s > x such that f(n,s),s(x) . If the output is not 0, put x into Gn. Clearly G is computable. Since Gn = Gn for each n, G is a maximal tower, contrary to Fact 2.3, or to the earlier observation that maximal towers cannot be computable.

MAXIMAL TOWERS AND ULTRAFILTER BASES IN COMPUTABILITY

7

3. Complexity of T and of U

In this section, we compare our two principal mass problems, maximal towers
and ultrafilter bases, to well-known benchmark mass problems: non-lowness and
highness. We also define index guessability. No index guessable oracle computes a maximal tower. We show that every 1-generic 02-set is index guessable.
As we said above, we restrict ourselves to the case that B is the Boolean algebra
of computable sets.

3.1. Maximal towers, non-lowness, and index guessability. We now show
that each non-low oracle computes a set in T . The result is uniform in the sense of mass problems. Let NonLow denote the class of oracles Z such that Z T .

Theorem 3.1. T s NonLow.

Proof. In the following, x, y, and z denote binary strings; we identify such a string x
with the number whose binary expansion is 1x. For example, the string 000 is identified with 8, the number with binary representation 1000. Define a Turing functional  for the Medvedev reduction as follows: Set Z = G, where for each n,

Gn = {x : n  s := |x|  Zs  n = x  n}.

Here Z denotes the jump of Z, which is computably enumerated relative to Z in

a standard way. Note that, for each n, for sufficiently large s, the string Zs  n settles. So it is clear that for each n, we have Gn+1  Gn and Gn Gn+1 is

infinite. Also Gn is computable. Suppose now that R is an infinite set such that R  Gn for each n. Then for

each k,

Z(k) = lim x(k) = lim x(k),

xGk,|x|>k

xR,|x|>k

and hence Z T R. So if Z  NonLow, then R cannot be computable, and hence Z  T .

Remark 3.2. The proof above yields a more general result. Suppose that K is a countable Turing ideal and B is the Boolean algebra of sets with degree in K. Then TB s NonLowK, where NonLowK := {Z : R  K [Z T R]}.
We next introduce a property of oracles that we call index guessability; it implies that an oracle does not compute a maximal tower. As usual, let e e be an effective list of the Turing functionals with one input, and write e for e. Note that if L is a 02-oracle, then  can compute from e a characteristic index for Le in case that the function Le is computable. To be index guessable means that  suffices.
Definition 3.3. We call an oracle L index guessable if  can compute from e an index for Le whenever Le is a computable function. In other words, there is a functional  such that
Le is computable  Le = (;e). No assumption is made on the convergence of (; e) in case Le is not a computable function.

Clearly, being index guessable is closed downward under T . A total function is computable if and only if its graph is computable, in a uniform way. So for index

8

LEMPP, MILLER, NIES, AND SOSKOVA

guessability of L, it suffices that there is a Turing functional  such that (; e) provides an index for Le in case it is a computable {0, 1}-valued function.
Every index guessable oracle D is low. To see this, for i  , let Bi = {t : i  Dt}. If i  D then Bi is cofinite, otherwise Bi = . There is a computable function g such that Dg(i) is the characteristic function of Bi. To show that D T , on input i, let  compute a computable index r(i) for Bi. Now use  again to determine limk r(i)(k), which equals D(i).
By Proposition 2.4, an index guessable oracle D does not compute a maximal tower. The following provides examples of such oracles.
Theorem 3.4. If L is 02 and 1-generic, then L is index guessable.
Proof. Suppose that F = Le and F is a computable set. Let Se be the c.e. set of strings  above which there is a e-splitting in the sense that
Se = { : (p)(1  )(2  ) e1 (p) = e2 (p)}.
Suppose that Se is dense along L. Then we claim that the set
Ce = { : (p) e (p) = F (p)}
is also dense along L, i.e., for every k, there is some  L  k such that   Ce. Indeed, let  L  k be a member of Se and let p, 1, and 2 witness this. Let i for i = 1 or 2 be such that ei(p) = F (p). Then i L  k is in Ce. The set Ce is c.e. and hence L meets Ce, contradicting our assumption that F = Le .
It follows that Se is not dense along L. In other words, there is some least ke such that there is no splitting of e above L  ke. On input e, the oracle  can compute ke and L  ke. This allows  to find an index for F , given by the following procedure: To compute F (p), find the least  L  ke such that e (p)  (in | | many steps). Such a  exists because Le (p) . By our choice of ke, it follows that e (p) = Le (p) = F (p).

We summarize the known implications:
1-generic 02  index guessable  computes no maximal tower  low.
The last arrow does not reverse by Theorem 5.1 below; the others might. In particular, we ask whether any oracle that computes no maximal tower is index guessable. This would strengthen Theorem 3.1. Note that the following potential weakening of index guessability of L still implies that the oracle computes no maximal tower: For each S T L such that each Sn is computable, there is binary computable function f such that Sn = lims f(n,s) for each n.
Aside. We pause briefly to mention a potential connection of our topic to computational learning theory. One says that a class S of computable functions is EX-learnable if there is a total Turing machine M such that lims M (f  s) exists for each f  S and is an index for f . For an oracle A, one says that S is EX[A]learnable if there is an oracle machine M that is total for each oracle and such that lims M A(f  s) exists for each f  S and is an index for f . One calls an oracle A EX-trivial if EX = EX[A]. Slaman and Solovay [16] showed that A is EX-trivial if and only if A is 02 and has 1-generic degree. This used an earlier result of Haught that the Turing degrees of the 1-generic 02-sets are closed downward.

MAXIMAL TOWERS AND ULTRAFILTER BASES IN COMPUTABILITY

9

3.2. Ultrafilter bases and highness. Let Tot = {e : e is total}. Let DomFcn denote the mass problem of functions h that dominate every computable function and also satisfy h(s)  s for all s. Note that a set F is high if and only if Tot T F . To represent highness by a mass problem in the Medvedev degrees, one can equivalently choose the set of functions dominating each computable function, or the set of approximations to Tot, i.e., the {0, 1}-valued binary functions f such that lims f (e, s) = Tot(e). This follows from the next fact; we omit the standard proof.
Fact 3.5. DomFcn is Medvedev equivalent to the mass problem of approximations to Tot = {e : e is total}.
We show that exactly the high oracles compute ultrafilter bases, and that the reductions are uniform. By Fact 3.5, it suffices to show that U s DomFcn. We will obtain the two Medvedev reductions through separate theorems, with proofs that are unrelated.
Theorem 3.6. Every ultrafilter base uniformly computes a dominating function. In other words, U s DomFcn.
Our proof is directly inspired by a proof of Jockusch [8, Theorem 1, (iv) = (i)], who showed that any family of sets containing exactly the computable sets must have high degree.
Lemma 3.7. There is a uniformly computable sequence P0, P1, . . . of nonempty 01-classes such that for every e,
· if e is total, then Pe contains a single element, and · if e is not total, then Pe contains only bi-immune elements.
Proof. Note that each Martin-Löf (or even Kurtz) random set is bi-immune: For an infinite computable set R, the class of sets containing R is a 01-null class and hence determines a Kurtz test. A similar fact holds for the class of sets disjoint from R.
For each s, let ns be the largest number such that e,s converges on [0, ns). We build the 01-class Pe in stages, where Pe,s is the nonempty clopen set we have before stage s of the construction. Let Pe,0 = 2.
Stage 0. Start constructing Pe as a nonempty 01-class containing only MartinLöf random elements.
Stage s. If ns = ns-1, continue the construction that is currently underway, which will produce a nonempty 01-class of random elements.
On the other hand, if ns > ns-1, fix a string  such that []  Pe,s and || > s. Let Pe,s+1 = []. End the construction that we have been following and start a new construction for Pe, starting at stage s + 1, as a nonempty 01-subclass of [] containing only Martin-Löf random elements.
It is clear that if e is total, then Pe will be a singleton. Otherwise, there will be a final construction of a nonempty 01-class of randoms which will run without further interruption.
Of course, when Pe is a singleton, its lone element must be computable.
Proof of Theorem 3.6. For any set C, let SC = {X  2 : C  X}. Note that if C is computable (or even merely c.e.), then SC is a 01-class. Let Qe = {X : X  Pe} be the 01-class of complements of elements of Pe.

10

LEMPP, MILLER, NIES, AND SOSKOVA

Now let F be an ultrafilter base. We have that
e is total  (i)(n) [Fi [0, n] is a subset of some X  Pe or its complement]
 (i)(n) [Pe  SFi [0,n] =  or Qe  SFi [0,n] = ].
Even though SFi [0,n] is a 01-class, we cannot hope to compute an index using F . However, SFi [0,n] is a 01[F ]-class uniformly in i, n. Using the fact that the nonemptiness of a 01[F ]-class is a 01[F ]-property, we see that Tot = {e : e is total} is 02[F ]. Note that the 02-index does not depend on F . Since Tot is also 02, it is 02[F ] via a fixed pair of indices, and hence Turing reducible to F  via a fixed reduction. One direction of the usual proof of the (relativized) Limit Lemma now shows that we can uniformly compute an approximation to Tot from F . Hence, from F we can uniformly compute a dominating function by Fact 3.5.

Theorem 3.8. Every dominating function uniformly computes an ultrafilter base. In other words, U s DomFcn.
Proof. Let e e be an effective listing of the {0, 1}-valued partial computable functions defined on an initial segment of . Let Ve,k = {x : e(x) = k} so that (Ve,0, Ve,1) is an effective listing that contains all pairs of computable sets and their complements.
Let T = {0, 1, 2}<. Uniformly in   T , we will define a set S. We first explain the basic idea and then modify it to make it work. The basic idea is to start with S =  and build S k = S  Ve,k for k = 0, 1 and e = ||, that is, we split S according to the listing above. We then consider the leftmost path g so that Sg  e is infinite for each e. A dominating function h can eventually discover each initial segment of this path and use this to compute a set F such that Fe = Sg  e for each e.
The problem is that both S  Ve,0 and S  Ve,1 could be finite (because e is not a proper index of a computable set). In this case we still need to make sure
that Fe Fe+1 is infinite. So the rightmost option at level n is a set S 2 = S that simply removes every other element from S. The sets S k for k  1 will be subsets of S.
We now provide the details. The set S is enumerated in increasing fashion, and possibly finite. So each S is computable, but not uniformly in . All the sets and functions defined below can be interpreted at stages.
Let S,s = [0, s). If we have defined (at stage s) the set S = {r0 < · · · < rk},
let S contain the numbers of the form r2i. Let S 2 = S. Let S k = S  Ve,k for k = 0, 1, e = ||. We define a uniform list of Turing functionals e so that the sequence he (t) t is nondecreasing and unbounded, for each e and each oracle function h such that h(s)  s for each s. We will let Fe = {he (t) : t  }.
Definition of e. Given an oracle function h, we will write as for he (s). Let a0 = 0. Suppose s > 0 and as-1 has been defined. Check if there is   T of length e such that |S,h(s)|  s. If there is no such , let as = as-1. Otherwise, let  be leftmost such. If max S,h(s) > as-1, let as = max S,h(s). Otherwise, again let as = as-1.
Note that the sequence {as}s< is unbounded because for the rightmost string   T of length e, the set S,t consists of the numbers in [0, t) divisible by 2e. We

MAXIMAL TOWERS AND ULTRAFILTER BASES IN COMPUTABILITY

11

may combine the functionals e to obtain a functional  such that (h)e = Fe for each h with h(s)  s for each s.
Claim 3.9. If h  DomFcn, then F = h  U.
To verify this, let g  2 denote the leftmost path in {0, 1, 2} such that the set Sg  e is infinite for every e. Note that g is an infinite path, because for every , if the set S is infinite then so is S 2.
Fix e and let  = g  e. Let p(s) be the least stage t such that S,t has at least s elements. Since h dominates the computable function p, we will eventually always pick  in the definition of as = he (s). Hence Fe = S. This implies that Fe is computable and Fe+1  Fe. Clearly, if S is infinite, then S  S for every   . Thus Fe+1  Fe.3
Now let R be a computable set. Pick e such that R = Ve,0 and R = Ve,1. If g(e) = 0, then Sg  e+1  Ve,0 and hence Fe+1  R. Otherwise, Sg  e+1  Ve,1 and hence Fe+1  R.

4. Maximal independent families in computability

In this short section, we determine the complexity of the computability-theoretic analog of the independence number i for the Boolean algebra of computable sets. It turns out that in the context of the computable sets, maximal independent families behave in a way similar to ultrafilter bases.
Given a sequence Fn n, for each binary string  we write

(1)

F =

Fi 

F i.

(i)=1

(i)=0

We call (a set F encoding) such a sequence independent if each set F is infinite.

Definition 4.1. Given a Boolean algebra of sets B, the mass problem IB is the class of sets F such that Fn n is a family that is maximal independent, namely, it is independent, and for each set R  B, there is  such that F  R or F  R.

In the following, we let B be the Boolean algebra of computable sets, and we drop the parameter B as usual. An easy modification of the proof of Theorem 3.6 yields the following

Theorem 4.2. Every maximal independent family F uniformly computes a dominating function. In other words, I s DomFcn.
Proof. Define the 01-classes Pe as in Lemma 3.7. As before let Qe = {X : X  Pe} be the 01-class of complements of elements of Pe. Recall that for any set C, we let SC = {X  2 : C  X}. Now we have that
e is total  ()(n) [F [0, n] is a subset of some X  Pe or its complement]
 ()(n) [Pe  SF [0,n] =  or Qe  SF [0,n] = ]
As before, this shows that from F one can uniformly compute a dominating function.

3Here, A  B means that A  B and B A is infinite. We define  similarly.

12

LEMPP, MILLER, NIES, AND SOSKOVA

Theorem 4.3. Every dominating function h uniformly computes a maximal independent family. In other words, I s DomFcn.
In fact, we will prove that a dominating function h uniformly computes a set F such that the =-equivalence classes of the sets Fe freely generate the Boolean algebra of computable sets modulo finite sets.
Proof. As in the proof of Theorem 3.8, let e e be an effective listing of the {0, 1}-valued partial computable functions defined on an initial segment of , and let Ve,k = {x : e(x) = k} for k = 0, 1.
In Phase e of the construction, we will define a computable set Fe such that Fe = he for a Turing functional e determined uniformly in e. Suppose we have defined i for i < e, and thereby the sets F defined in (1), where  is a string of length e.
The idea for building Fe is to try to follow Ve,0 while maintaining independence from the previous sets. We apply this strategy separately on each F. Using h as an oracle we compute recursively an increasing sequence rne n. We carry out the attempts on intervals [rne , rne+1). If Ve,0 appears to split F on the current interval, then we follow it; otherwise, we merely make sure that Fe remains independent from F on the interval by putting one number in and leaving another one out. To decide which case holds, we consult the dominating function.
We now provide the details for Phase e. As e is fixed, we drop the superscripts e. By  we will always denote a string of length e. Let r0 = 0. If rn has been defined, let rn+1 > rn be the least number r such that for each 
(a) |[rn, r)  F|  2, and (b) if there are u, w  dom(e,h(rn))  F with rn  u < w such that e(u) = 1
and e(w) = 0, then r > w for the least such w. We define Fe(x) = he (x) for x  [rn, rn+1) as follows. For each ,
· if condition (b) holds and e is defined on [rn, rn+1), then let Fe(x) = e(x); · otherwise, if x = min([rn, rn+1)  F), let Fe(x) = 1, else let Fe(x) = 0.
Verification. By induction on e, one verifies that F is infinite for each  with || = e, and that the sequence rne n defined in Phase e of the construction is infinite. Thus he is total for each function h. So F T h where Fe = he , and F is an independent family.
Claim 4.4. Each set Fe is computable.
We verify this by induction on e. Suppose it holds for each i < e. So F is computable for || = e.
First assume that e is partial. Then for sufficiently large n, condition (b) does not apply, and so the sequence rn n and hence Fe are computable.
Now assume that e is total. Let
De = { : || = e  |F  Ve,0| = |F  Ve,1| = }.
Define a function p by letting p(m) be the least stage s such that for each   De, condition (a) holds with rn = m and r = s, and for each   De, there are u, w  dom(e,s) such that m  u < w as in condition (b). (Let p(m) = 0 if m is not of the form rn.) Since F is computable for each  of length e, the function p is computable. Since h dominates p, for sufficiently large n, we will define rn+1 by checking e at a stage h(rn)  p(rn); since we chose the witnesses minimal, rn+1

MAXIMAL TOWERS AND ULTRAFILTER BASES IN COMPUTABILITY

13

is determined by stage p(rn). So we might as well check e at that stage and do not need h. Hence the sequence rn n and therefore Fe are computable.
Claim 4.5. Suppose that e is total. Then for each string  =  a of length e + 1, F  Ve,0 or F  Ve,0 = .
If   De, then this is immediate since F  Ve,i for some i. Otherwise, Phase e of the construction ensures that F 0 = F  Ve,0.
By the last claim, the =-equivalence classes of the Fe freely generate the Boolean algebra of the computable sets modulo finite sets. In particular, F is a maximal independent family.
As mentioned in the introduction, we do not know at present whether there is a "natural" Medvedev equivalence between the two mass problems U and I as is the case for A and T . This would require direct proofs avoiding the detour via the mass problem of dominating functions. For what it is worth, the cardinal characteristics u and i are incomparable (i.e., ZFC cannot determine their order).

5. The co-computably enumerable case

Recall from Fact 2.3 that no maximal tower, and in particular no ultrafilter base, can be computably enumerable. In contrast, in this section we will see that even ultrafilter bases can have computably enumerable complement. As in the previous sections, we are restricting our attention to the Boolean algebra of all computable sets.
Recall that a coinfinite c.e. set A is called simple if it meets every infinite c.e. (or, equivalently, computable) set; A is called r-maximal if A  R or A  R for each computable set R. Each r-maximal set is simple. For more background, see, e.g., Soare [17].

5.1. Computably enumerable MAD sets, and co-c.e. towers. We will show that if A is a noncomputable c.e. set, then there is a co-c.e. maximal tower G T A. Given that it is more standard to build c.e. rather than co-c.e. sets, it will be convenient to first build a c.e. MAD set F T A and then use the Medvedev reduction in Fact 2.2 to get a co-c.e. maximal tower. We employ a priority construction with requirements that act only finitely often.

Theorem 5.1. For each noncomputable c.e. set A, there is a MAD c.e. set F T A.

Proof. The construction is akin to Post's construction of a simple set. In particular,
it is compatible with permitting.
Let Me e be a uniformly c.e. sequence of sets such that M2e = We and M2e+1 =  for each e. We will build an auxiliary c.e. set H T A and let the c.e. set F T A be defined by F [e] = H[2e]  H[2e+1]. The purpose of the sets M2e+1 is to make the sets H[2e+1], and hence the sets F [e], infinite. The construction also ensures that H, and hence F , is AD, and that n H[n] is coinfinite.
As usual, we will write He for H[e]. We provide a stage-by-stage construction to
meet the requirements

Pn : Me

Hi infinite  |He  Me|  k, where n = e, k .

i<n

(Note that the union is over all i such that i < n, not i < e.) At stage s, we say that Pn is permanently satisfied if |He,s  Me,s|  k.

14

LEMPP, MILLER, NIES, AND SOSKOVA

Construction. Stage s > 0. See if there is n < s such that Pn is not permanently satisfied, and, where n = e, k , there is x  Me,s i<n Hi,s such that
x > max(He,s-1), x  2n, and As  x = As-1  x.
If so, choose n least, and put x, e into H (i.e., put x into He).
Verification. Each He is enumerated in increasing fashion and hence computable. Each Pn is active at most once. This ensures that e He is coinfinite: For each N ,
if x < 2N enters this union, then this is due to the action of a requirement Pn with n < N , so there are at most N many such x.
To see that a requirement Pn for n = e, k is met, suppose that its hypothesis holds. Then there are potentially infinitely many candidates x that can go into He. Since A is noncomputable, one of them will be permitted.
Now, by the choice of M2e+1 and the fact that e He is coinfinite, each H2e+1, and hence each Fe, is infinite. By construction, for e < m, we have |He  Hm|  m. So the family described by H, and therefore also the one described by F , is almost disjoint.
To show that F is MAD, it suffices to verify that if Me is infinite then Me  Fp is infinite for some p. If all the Pe,k are permanently satisfied during the construction, we let p = e. Otherwise, we let k be least such that Pn is never permanently satisfied where n = e, k . Then its hypothesis fails, so Me  i<n Hi.
Since an index guessable set computes no MAD set by Proposition 2.4, we obtain the following
Corollary 5.2. No noncomputable, c.e. set L is index guessable.
Downey and Nies have given a direct proof of this fact (see [6]).
Corollary 5.3. For each noncomputable c.e. set A, there is a co-c.e. set G T A such that G  T , i.e., Gn n is a maximal tower.
Proof. Let F be the MAD set obtained above. Recall the Turing reduction Cp showing that T s A in Fact 2.2. The set G = Cp(F ), given by
x  Gn  i < n [x  Fn]
is as required.
5.2. Co-c.e. ultrafilter bases.
Theorem 5.4. There is a co-c.e. ultrafilter base F .
Proof. We adapt the construction from the proof of the main result in [11], which states that there is an r-maximal set A such that the index set CofA = {e : We  A = } is 03-complete. Both the original and the adapted version make use of the fact that we are given a c.e. index for a computable set and also one for its complement (see the pairs (Ve,0, Ve,1) below). Our proof can also be viewed as a variation on the proof of Theorem 3.8 in the setting of co-c.e. sets. We remark that by standard methods, one can extend the present construction to include permitting below a given high c.e. set.
We build a co-c.e. tower F by providing uniformly co-c.e. sets Fe for e   that form a descending sequence with Fe  Fe+1. We achieve the latter condition by

MAXIMAL TOWERS AND ULTRAFILTER BASES IN COMPUTABILITY

15

agreeing that whenever we remove x from Fe at a stage s, we also remove it from all Fi for i > e. Furthermore, no element is ever removed from F0, so F0 = .
Let (Ve,0, Ve,1) e be an effective listing of all pairs of disjoint c.e. sets as defined in the proof of Theorem 3.8. The construction will ensure that the following requirements are met:
Me : Fe Fe+1 is infinite, Pe : Ve,0  Ve,1 =   Fe+1  Ve,0  Fe+1  Ve,1.
This suffices to establish that F is an ultrafilter base. The tree of strategies is T = {0, 1, 2}<. Each string   T of length e is tied
to Me and also to Pe. We write  : Me and  : Pe to indicate that we view  as a strategy of the respective type.
Streaming. For each string   T with || = e, at each stage of the construction, we have a set S, thought of as a stream of numbers used by . Each time  is initialized, S is removed from Fe+1, and S is reset to be empty. Also, S is enlarged only at stages at which  appears to be on the true path. We will verify the following properties:
(1) S = ; (2) if  is not the empty node, then S is a subset of S- (where - is the
immediate predecessor of ); (3) at every stage, S  S =  for incomparable strings  and ; (4) x is in Fe+1 at the time a number x first enters S; (5) if  is along the true path of the construction, then S is an infinite com-
putable set.
Note that S is d.c.e. uniformly in . The set S is finite if  is to the left of the true path of the construction; S is an infinite computable set if  is along the true path; and S is empty if  is to the right of the true path.
The intuitive strategy  : Pe: Only strategies associated with a string of length  e can remove numbers from Fe+1. A strategy  : Pe thins out S by removing some of its elements from Fe+1. It regards the set of remaining numbers as its private version of Fe+1. It has to make sure that no strategies  to its right remove numbers from Fe+1 that it wants to keep. On the other hand, it can only process a number x once it knows whether x is in Ve,0 or Ve,1. The solution to this conflict is that  reserves a number x from the stream S, which by initialization withholds it from any action of such a . It then waits until all numbers  x are in Ve,0  Ve,1. If that never happens for some reserved x, then  is satisfied finitarily with eventual outcome 2. Otherwise, it will eventually process x: If x  Ve,0, it continues its attempt to build Fe+1 inside Ve,0; else it continues to build Fe+1 inside Ve,1. It takes outcome 0 or 1, respectively, according to which case applies. Each time the apparent outcome is 0, the content of the output stream based on the assumption that the true outcome is 1 is removed from Fe+1. So if 0 is the true outcome, then indeed Fe+1  Ve,0.
The intuitive strategy  : Me simply removes every other element of S from Fe+1. Then  : Pe actually only works with the stream of remaining numbers. There is no further interaction between the two types of strategies. (Note here that making Fe+1 smaller is to the advantage of Pe.) Recall that if  is initialized, S is removed from Fe+1, and S is reset to be empty.

16

LEMPP, MILLER, NIES, AND SOSKOVA

Construction. Stage 0. Let 0 be the empty string. Let Fe =  for each e. Initialize all
strategies. Stage s > 0. Let S,s = [0, s). Stage s consists of substages e = 0, . . . , s - 1,
during which we inductively define s, a string of length s.
Substage e. We suppose that  = s  e and S have been defined.
The strategy  : Me acts as follows. If at the current stage S = {r0 < · · · < rk} and rk is new in S, it puts rk into S if and only if k is even; otherwise, rk is removed from Fe+1.
The strategy  : Pe picks the first applicable case below. Case 1: Each reserved number of  has been processed: If there is a number x from S greater than 's last reserved number (if any) and greater than the last stage  was initialized, pick x least and reserve it. Note that x < s since by definition S,s = [0, s). Initialize  2, and let  2 be eligible to act next. Note that if Case 1 does not apply then  has a unique reserved, but unprocessed number x. Case 2: [0, x]  Ve,0  Ve,1 and x  Ve,0: Let t be the greatest stage < s at which  was initialized. Add x to S 0 and remove from Fe+1 all numbers in the interval (t, x) that are not in S 0. Declare that  has processed x. Let  0 be eligible to act next. Case 3: [0, x]  Ve,0  Ve,1 and x  Ve,1: Let t be the greatest stage < s at which  was initialized or  0 was eligible to act. Add x to S 1 and remove from Fe+1 all numbers in the interval (t, x) that are not in S 1. Declare that  has processed x. Let  1 be eligible to act next. Case 4: Otherwise, that is, [0, x]  Ve,0  Ve,1: Let t be the greatest stage < s at which  was initialized, or  0 or  1 was eligible to act. Let S 2 = S  (t, s). Let  2 be eligible to act. We define s(e) = i where  i, 0  i  2, has been declared eligible to act next. If e + 1 < s, then carry out the next substage. Else initialize all the strategies  such that s <L  and end stage s.
Verification. By construction and our convention above, Fe is co-c.e., and Fe  Fe+1 for each e.
Let g  2 denote the true path, namely, the leftmost path in {0, 1, 2} such that e s [g  e s]. In the following, given e, let  = g  e, and let s be the largest stage s such that  is initialized at stage s. Note that s exists: The only concern would be that  has the form ~ 2 and we are at substage |~| in Case 1; however,  can only be initialized once in that way unless r <L  at a later stage r, namely, when the number ~ has reserved is processed.
We verify a number of claims.
Claim 5.5. The "streaming properties" (1)­(5) hold.
(1) and (2) hold by construction. (3) Assume this fails for incomparable  and , so x  S  S at stage s. We may as well assume that  =  i and  =  k where i < k. By construction, k  1 is not possible, so k = 2. Since x  S i and i  1, x was reserved by  at some stage t  s. So x can never enter S 2 by the initialization of  2 when x was reserved.

MAXIMAL TOWERS AND ULTRAFILTER BASES IN COMPUTABILITY

17

(4) is true by construction. (5) holds inductively, by the definition of the true path and because S is enumerated in increasing fashion at stages  s.
Claim 5.6. Fe = S.
The claim is verified by induction on e. We show that for all x > s we have x  Fe if and only if x  S. It holds for e = 0 because F0 = S = . For the inductive step, let  = g (e + 1).
First, we verify that Fe+1  (s , )  S. Suppose that x > s and x  Fe+1. Then x  Fe and x > s, so by the inductive hypothesis x  S. By construction, any element x that is not promoted to S is also removed from Fe+1 unless x is the last element  reserves. However, if x is the last reserved element, then necessarily  =  2 and this strategy is initialized when this element is reserved, so x < s contrary to our assumption.
Next, we verify that S (s , )  Fe+1. Suppose that x  S and x > s . Then x  S, so by the inductive hypothesis x  Fe. At a stage s  s, an element x of S cannot be removed from Fe+1 by a strategy  >L  because S  S =  by (3) as verified above and since  can only remove elements from S. So x can only be removed by  : Me or  : Pe.
If  : Me removes x from Fe+1, then x  S, which contradicts that x  S . So, by construction, the only way x can be removed from Fe+1 is by the strategy  : Pe, but since x > s this would mean that x is not promoted to S either contrary to our assumption.
Claim 5.7. Each requirement Me is met, namely, Fe Fe+1 is infinite.
To see this, recall that  = g  e. By the foregoing claim, the action of  : Me removes infinitely many elements of S  Fe from Fe+1.
Claim 5.8. Each requirement Pe is met.
Suppose the hypothesis of Pe holds. Then every number that  reserves is eventually processed. So either g(e) = 0, in which case Fe+1  Ve,0 by Claim 5.6, or g(e) = 1, in which case Fe+1  Ve,1, also by Claim 5.6.

6. Ultrafilter bases for other Boolean algebras
As mentioned, we have set up our framework to apply to general countable Boolean algebras rather than merely the Boolean algebra of the computable sets mainly with subsequent research in mind. In this last section of our paper, we provide two results in the setting of other Boolean algebras of sets.
Recall that K(x) denotes the prefix-free complexity of a string x, and that a set A   is K-trivial if c n K(A  n)  K(0n)+c. For more background on K-trivial sets, see, e.g., Nies [13, Ch. 5] or Downey and Hirschfeldt [5, Ch. 11]. Note that by combining results of various authors, the K-trivial degrees form a Turing ideal in the 02-degrees (see, e.g., Nies [13, Sections 5.2, 5.4]). Thus the K-trivial sets form a Boolean algebra.
Theorem 6.1. There is a 02-ultrafilter base for the Boolean algebra of the Ktrivial sets.

18

LEMPP, MILLER, NIES, AND SOSKOVA

Proof. Kucera and Slaman [10] noted that there is a 02-function h that dominates all functions that are partial computable in some K-trivial set. We use h in a
variation of the proof of Theorem 3.8.
Let Ve,0, Ve,1 e be a uniform listing of the K-trivials and their complements given by wtt-reductions to ; such a listing exists by Downey, Hirschfeldt, Nies, and Stephan [4] (see also [13, Theorem 5.3.28]). Let T = {0, 1}<.
For each   T , we define a (possibly finite) K-trivial set S. Let S = .
Suppose we have defined the set S = {r0 < r1 < · · · }. Let S contain the
numbers of the form r2i. Let S k = S  Ve,k for e = || and k = 0, 1. Note that all these sets are K-trivial.
Uniformly recursively in , we build sets Fe, given by nondecreasing unbounded sequences of numbers ae0  ae1  . . .. Suppose we have defined aek-1. Let   T be the leftmost string of length e such that S has at least k + 1 elements less than h(k). If  exists, let aek be the k-th element of S, unless this is less than aek-1, in which case we let aek = aek-1.
Let g  2 denote the leftmost path in {0, 1} such that for every e, the set
Sg  e is infinite. Fix e and let  = g  e. Let p(k) be the (k + 1)-st element of S.
Since h dominates the function p, eventually in the definition of Fe we will always pick . Hence Fe = S. In particular, Fe is K-trivial. Also, the sequences aek k are unbounded for each e, so F is 02. Clearly, if S is infinite then S  S for   . So Fe+1  Fe.
To verify that F is an ultrafilter base for the K-trivials, let R be a K-trivial set.
Pick e such that R = Ve,0 and R = Ve,1. If g(e) = 0 then Sg  e+1  Ve,0, and hence Fe+1  R. Otherwise Sg  e+1  Ve,1, and hence Fe+1  R.

Remark 6.2. Any ultrafilter base for the K-trivials must have high degree. We can see this by modifying the proof of Theorem 3.6: Every Martin-Löf random set X is Martin-Löf random relative to every K-trivial (i.e., K-trivial sets are low for ML-randomness). Hence neither X nor X contains an infinite K-trivial subset.

Finally, we consider the Boolean algebra of primitive recursive sets. One says that an oracle L is of PA degree if it computes a completion of Peano arithmetic. Recall that L is of PA degree if and only if it computes a separating set for each disjoint pair of c.e. sets.
Theorem 6.3. An oracle C computes an ultrafilter base for the primitive recursive sets if and only if C is of PA degree relative to .
Proof. We modify the proof of Jockusch and Stephan [9, Theorem 2.1]. They call a set S   p-cohesive if S is cohesive for the primitive recursive sets. Their theorem states that S is p-cohesive if and only if S is of PA degree relative to . : Suppose that C computes an ultrafilter base F for the primitive recursive sets. Let g T F be a function associated with F as in Definition 1.2. Then the range S of g is p-cohesive. Hence S and therefore C is of PA relative to  by one implication of [9, Theorem 2.1]. : We modify the proof of the other implication of [9, Theorem 2.1]. Let Ai i be a uniformly recursive list of all the primitive recursive sets. We call i a primitive recursive index for Ai (or index, for short). By our hypothesis on C, there is a

MAXIMAL TOWERS AND ULTRAFILTER BASES IN COMPUTABILITY

19

function g T C such that

|Ai  An| < |Ai  An|  g(i, n) = 0 |Ai  An| < |Ai  An|  g(i, n) = 1

(because the conditions on the left are both 02, and so C computes a separating set for them).
We inductively define a C-computable sequence of indices en n. Let e0 be an index for . If en has been defined and Aen = {r0 < r1 < · · · } (possibly finite), let en be an index, uniformly obtained from en, such that Aen = {r0, r2, . . .}. Now let

Aen+1 Aen+1

= =

Aen Aen

 An  An

if if

g(en, n) g(en, n)

= =

0, 1.

and

By induction on n, one verifies that Aen is infinite and Aen+1  Aen . Since g T C, the numbers en have a uniformly C-computable approximation en,x x.
Let the ultrafilter base F T C be given by Fn(x) = Aen,x (x). Then Fn = Aen is primitive recursive. Since Fn+1  An or Fn+1  An for each n, the set F is an ultrafilter base for the primitive recursive sets.

References
[1] Andreas R. Blass. Combinatorial cardinal characteristics of the continuum. In: Matthew Foreman and Akihiro Kanamori, editors, Handbook of Set Theory, volume 1, pages 395­489. Springer, Dordrecht Heidelberg London New York, 2010.
[2] Jörg Brendle, Andrew D. Brooke-Taylor, Keng Meng Ng, and André O. Nies. An analogy between cardinal characteristics and highness properties of oracles. In: Proceedings of the 13th Asian Logic Conference: Guangzhou, China, pages 1­28. World Scientific, 2013. http://arxiv.org/abs/1404.2839 .
[3] Jörg Brendle, Vera V. Fischer, and Yurii D. Khomskii. Definable maximal independent families. Proceedings of the American Mathematical Society, 147(8):3547­3557, 2019.
[4] Rodney G. Downey and Denis R. Hirschfeldt and André O. Nies, and Frank Stephan. Trivial reals. In Proceedings of the 7th and 8th Asian Logic Conferences, pages 103­131, Singapore, 2003. Singapore University Press.
[5] Rodney G. Downey and Denis R. Hirschfeldt. Algorithmic randomness and complexity. Springer­Verlag, Berlin, 2010. 855 pages.
[6] André O. Nies (editor). Logic Blog 2019. Available at http://arxiv.org/abs/2003.03361, 2019.
[7] Noam Greenberg, Rutger Kuyper, and Daniel D. Turetsky. Cardinal invariants, non-lowness classes, and Weihrauch reducibility. Computability, 8(3-4):305­346, 2019.
[8] Carl G. Jockusch, Jr. Degrees in which the recursive sets are uniformly recursive. Canad. J. Math., 24:1092­1099, 1972.
[9] Carl G. Jockusch, Jr. and Frank Stephan. A cohesive set which is not high. Math. Log. Quart., 39:515­530, 1993.
[10] Antonín Kucera and Theodore A. Slaman. Low upper bounds of ideals. J. Symbolic Logic, 74:517­534, 2009.
[11] Steffen Lempp, André O. Nies, and D. Reed Solomon. On the filter of computably enumerable supersets of an r-maximal set. Archive for Mathematical Logic, 40(6):415­423, 2001.
[12] Maryanthe Malliaris and Saharon Shelah. General topology meets model theory, on p and t. Proceedings of the National Academy of Sciences, 110(33):13300­13305, 2013.
[13] André O. Nies. Computability and Randomness, volume 51 of Oxford Logic Guides. Oxford University Press, Oxford, 2009. 444 pages. Paperback version 2011.
[14] Nicholas A. Rupprecht. Effective correspondents to cardinal characteristics in Cicho's diagram. PhD thesis, University of Michigan, 2010.
[15] Nicholas A. Rupprecht. Relativized Schnorr tests with universal behavior. Arch. Math. Logic, 49(5):555­570, 2010.

20

LEMPP, MILLER, NIES, AND SOSKOVA

[16] Theodore A. Slaman and Robert M. Solovay. When oracles do not help. In Proceedings of the fourth annual workshop on Computational learning theory, pages 379­383. Morgan Kaufmann Publishers Inc., 1991.
[17] Robert I. Soare. Recursively Enumerable Sets and Degrees. Perspectives in Mathematical Logic, Omega Series. Springer­Verlag, Heidelberg, 1987.
[18] David Soukup. Two infinite quantities and their surprising relationship. arXiv preprint arXiv:1803.04331, 2018.
[19] Edward L. Wimmers. The Shelah P-point independence theorem. Israel Journal of Mathematics, 43:28­48, 1982.

(Lempp, Miller, Soskova) Department of Mathematics, University of Wisconsin­Madison, 480 Lincoln Drive, Madison, WI 53706, USA
Email address: lempp@math.wisc.edu Email address: jmiller@math.wisc.edu Email address: msoskova@math.wisc.edu
(Nies) Department of Computer Science, University of Auckland, Private bag 92019, Auckland, New Zealand
Email address: andre@cs.auckland.ac.nz

