Towards Efficient Compressive Data Collection in the Internet of Things
Peng Sun, Liantao Wu , and Zhi Wang§ School of Science and Engineering, The Chinese University of Hong Kong, Shenzhen, P. R. China
Shanghai Institute of Fog Computing Technology (SHIFT), ShanghaiTech University, P. R. China §State Key Laboratory of Industrial Control Technology, Zhejiang University, P. R. China Email: sunpeng@cuhk.edu.cn, wult@shanghaitech.edu.cn, zjuwangzhi@zju.edu.cn

arXiv:2106.00509v1 [cs.IT] 29 May 2021

Abstract--It is of paramount importance to achieve efficient data collection in the Internet of Things (IoT). Due to the inherent structural properties (e.g., sparsity) existing in many signals of interest, compressive sensing (CS) technology has been extensively used for data collection in IoT to improve both accuracy and energy efficiency. Apart from the existing works which leverage CS as a channel coding scheme to deal with data loss during transmission, some recent results have started to employ CS as a source coding strategy. The frequently used projection matrices in these CS-based source coding schemes include dense random matrices (e.g., Gaussian matrices or Bernoulli matrices) and structured matrices (e.g., Toeplitz matrices). However, these matrices are either difficult to be implemented on resourceconstrained IoT sensor nodes or have limited applicability. To address these issues, in this paper, we design a novel simple and efficient projection matrix, named sparse Gaussian matrix, which is easy and resource-saving to be implemented in practical IoT applications. We conduct both theoretical analysis and experimental evaluation of the designed sparse Gaussian matrix. The results demonstrate that employing the designed projection matrix to perform CS-based source coding could significantly save time and memory cost while ensuring satisfactory signal recovery performance.
Index Terms--Internet of Things, data collection, compressive sensing, sparse Gaussian matrix
I. INTRODUCTION
With the prevalence of smart devices, sensors, RFID tags, etc., and the broad deployment of wireless communication infrastructures, the Internet of Things (IoT) is undergoing an unprecedentedly rapid development [1], [2]. Recent years have witnessed a wide range of IoT applications, such as environmental monitoring, intelligent transportation systems, smart cities, and smart homes [3], to name a few.
Data collection is the fundamental operation in IoT to underpin various applications. The IoT sensor nodes (e.g., smart devices, sensors) need to periodically report their sensed data to a fusion center (FC), where information aggregation and extraction tasks are performed. Generally, IoT sensor nodes are resource-constrained. More precisely, they have limited computational capability, storage capacity, and power supply. Therefore, it is of crucial importance to achieve efficient data collection in IoT. Many real-world signals of interest (e.g., temperature, noise level, air quality level, and traffic speed) present inherent structural properties (e.g., sparsity). Thus, compressive sensing (CS) [4] has been widely used to achieve efficient information acquisition and transmission in IoT, as it

promises accurate recovery of high-dimensional sparse signals from only a small number of random measurements.
Thus far, a significant amount of research efforts have been devoted to utilizing CS for compressive data collection in IoT [5]­[8]. Most of the existing works leverage CS as a channel coding scheme to deal with data loss during information collection in IoT. For instance, the work in [8] mined and analyzed four different data loss patterns and proposed an environmental space-time improved compressive sensing (ESTICS) algorithm to reconstruct the massive missing data accurately. Our previous work [6] modeled the random data loss during transmission over a lossy wireless link as a CS measurement process, where the correctly received data samples determine the corresponding projection matrix. Some recent works (e.g., [9]) have started to employ CS as a source coding strategy to further improve the accuracy and energy efficiency of information collection. A simple and straightforward CS-based source coding scheme is to perform random projection on the original sensed signals at the IoT sensor nodes before transmission, where some proper projection matrices are utilized.
In CS-based source coding schemes, the projection matrix is a critical factor for achieving satisfactory signal reconstruction performance. Specifically, the CS theory establishes that the projection matrix needs to be incoherent with the transform basis, where the original signal has a sparse representation, to guarantee accurate signal recovery. Frequently used projection matrices in CS can be divided into three categories. The first one is standard dense random matrices, e.g., random Gaussian or Bernoulli matrices. Elements in these matrices are independently and identically distributed random variables with certain distribution functions, i.e., Gaussian distribution or Bernoulli distribution. Existing works have demonstrated that Dense random matrices are incoherent with most sparsifying bases and satisfy the restricted isometry property (RIP), which promises accurate signal recovery with high probability. However, as stated in [10], the implementation of dense random Gaussian/Bernoulli projection matrices requires the integration of a Gaussian/Bernoulli-distributed random number generator and the computation of complicated matrix multiplication. This is too complex and resource-consuming for low-cost IoT sensor nodes with limited computational capability and storage capacity. The second kind of projection matrices is structured

projection matrices, e.g., Toeplitz matrices. Elements of this kind of matrices are arranged with a particular pattern, yielding a lower degree of randomness than dense random matrices. The third kind of projection matrices is partial basis matrices, such as partial Fourier matrices, constructed by selecting a subset of rows from an orthogonal Fourier transform basis. The essential requirement of the projection matrix used in CSbased source coding is that given a certain number of data samples received at the FC, we could consistently achieve accurate signal recovery regardless of the transform basis under which the target signal can be sparsely represented. However, as stated in [11], partial Fourier matrices can only adapt to the time domain sparse signals, while as indicated in [12], Toeplitz matrices are neither applicable to all sparse signals. Therefore, the shortcoming of structured projection matrices and partial basis matrices lies in that they are confined to specific sparse signals, leading to a limited range of applications. To summarize, none of the existing projection matrices can satisfy our requirement of efficient and wide-area applications of CS techniques in IoT data collection.
To address the issues mentioned above, in this paper, we design a simple and efficient projection matrix, named sparse Gaussian matrix, which is easy and efficient to be implemented on low-cost IoT sensor nodes and applies to various kinds of sparse signals. Specifically, we first present the construction of a sparse Gaussian matrix and then theoretically prove its RIP, which guarantees accurate signal recovery with high probability. Finally, we conduct extensive experiments to evaluate the performance of the designed sparse Gaussian matrix. The results demonstrate that employing the designed sparse Gaussian matrix to perform CS-based source coding can significantly save time and memory cost for IoT sensor nodes while guaranteeing satisfactory signal recovery performance at the FC compared to existing projection matrices.
In summary, this paper makes the following contributions:
· To the best of our knowledge, this is the first work to consider designing a proper projection matrix to realize efficient and resource-saving CS-based source coding for efficient data collection in IoT.
· We design a novel, simple projection matrix, named sparse Gaussian matrix, and theoretically prove its RIP.
· We conduct extensive experiments and the results demonstrate that leveraging the designed sparse Gaussian matrix to perform CS-based source coding can significantly reduce the time and memory cost for the IoT sensor nodes while guaranteeing satisfactory signal recovery performance at the FC.
II. SYSTEM MODEL AND PROBLEM FORMULATION
In this section, we present the system model and problem formulation.
A. System Model
This paper considers a typical data collection process in IoT, which is fundamental to enable various applications. Fig. 1 shows the whole process of data collection. Specifically, the

Node
Original Sparse Signal

FC
Reconstructed Signal

Linear Projection

CS Recovery

Transmitted Lossy Transmission Received Data

Signal

Samples

Fig. 1. System model.

IoT sensor node periodically senses the physical world. In a specific sensing period, the node will collect a certain number of data samples and generate an original sensed signal with a sparse representation under some transform basis (e.g., Fourier basis). The data samples are then transmitted to the FC for further information aggregation and extraction. Due to channel noise, congestion, packet collisions, and limited transmission power, data transmission in IoT is prone to data loss. That is, only a subset of transmitted data samples can successfully arrive at the FC. To deal with the data loss, based on the sparse structure of the signal, our previous work [6] proposed to model the random data loss during transmission as a CS measurement process. The corresponding projection matrix modeling data loss is a sparse binary measurement matrix which contains one and only one "1" element in each row and at most one "1" in each column, and "0" everywhere else (Note that the formal definition of this projection matrix will be presented in the next subsection). It has been shown in [6] that the CS-based sparse signal transmission method achieves much better transmission performance compared to traditional retransmission-interpolation schemes.
Moreover, as pointed out in our previous work [7], for a large number of applications in IoT, the transmission rate is much less than the sampling rate. For example, the upper bound of the transmission rate in IEEE 802.15.4 is 250kbps, while the sampling rate of commercial AD converters is several MHz. Moreover, when multiple sensor nodes transmit data to the fusion center (FC) via random access, where packet collisions may happen, a higher transmission rate generally leads to more severe packet collisions, worsening the signal recovery performance at the FC. Thus, we introduce a simple CS-based source coding operation at the sensor node before transmission. Specifically, instead of directly transmitting the original sensed signal, which comprises all the acquired data samples, it will be projected onto a lower-dimensional space before being sent. In this way, the number of actually transmitted data samples is smaller than the number of acquired data samples, thus avoiding unnecessary resource costs for IoT sensor nodes. To optimize the resource cost of the source coding process for the IoT sensor nodes and ensure satisfactory signal recovery performance at the FC, the projection matrix

used in CS-based source coding should be carefully designed.

B. Problem Formulation

In a specific sensing period, an IoT sensor node is assumed

to have acquired N data samples from the physical world.

Then, we denote the original signal assembled by the N data samples by x and x = [x1, x2, ..., xN ]T , where xi (i = 1, 2, ..., N ) is the i-th data sample. It has been shown

in [5], [7], [13] that most target signals in IoT applications have

a sparse (compressible) representation in some transform basis,

e.g., Fourier, DCT, wavelets, etc. Formally, if we denote by 

the transform basis under which x can be sparsely represented,

we have x = s, and s is a sparse vector, which contains only

a small number of nonzero elements.

As stated above, instead of directly transmitting the orig-

inal signal x, it is more desirable to perform a CS-based

source coding before transmission, i.e., conducting a ran-

dom projection on x using a well-designed projection matrix s  RMs×N . Formally, this random projection process can
be represented as

xs = sx,

(1)

where xs  RMs is the signal after the projection operation, and it is the signal actually to be transmitted. s is the employed projection matrix.
As previously mentioned, data transmission from the IoT sensor node to the FC is subject to data loss. In the same way as in [6], we model the random data loss during transmission as a CS measurement process, which can be represented as

y = rxs = rsx = x = s = As,

(2)

where r  RM×Ms is the projection matrix modeling the random data loss, and it is determined by the correctly received data samples.  = rs is the equivalent projection matrix, A =  = rs is called the equivalent sensing matrix, and y  RM is the measurement vector composed of the successfully received data samples at the FC.
Note that r is a sparse binary measurement matrix which contains one and only one "1" element in each row and at most one "1" in each column, and "0" everywhere else. Mathematically, r is constructed as

r(i, j) =

1 0

j= J(i) otherwise

,

(3)

where i is the row index of r, corresponding to the sequence number of the received data samples, and j is the column

index. J(i) is the sequence number of the data sample sent by the IoT sensor node while being the i-th received data sample at the FC. For example, assume that 7 data samples are sent from the node, and only 4 of them are successfully received

at the FC. If their corresponding sending sequence number is 1, 2, 5, 7, then r is constructed as

1 0 0 0 0 0 0 

r

=

 



0 0

1 0

0 0

0 0

0 1

0 0

0 0

 

.



(4)

000 0001

Finally, at the FC, the original signal x can be exactly recovered from the measurement vector y which is composed of a sufficient number of successfully received data samples via x^ = ^s, where ^s is the solution to the following constrained optimization problem

^s = arg min s 0, s.t. y = As,

(5)

s

which can be solved using the orthogonal matching pursuit (OMP) method [14]. Furthermore, ^s can also be found from the solution to the following convex optimization problem

^s = arg min s 1, s.t. y = As,

(6)

s

which can be solved efficiently using the basis pursuit (BP)

algorithm [15].

Herein, the signal recovery performance can be reflected

by signal recovery error, which is calculated as

x-x^ x2

2

.

Obviously, a smaller signal recovery error indicates better

signal recovery performance.

Notably, according to CS theory, the equivalent projection

matrix  = rs plays a critical role in achieving accurate signal recovery. However, the projection matrix r which models data loss during transmission is determined

by the pragmatic link quality. Specifically, r is completely determined by which transmitted data samples are correctly

received at the FC. Thus, we cannot design r. In contrast, we can carefully choose the projection matrix s used in CS-based source coding at the IoT sensor node. Traditional

projection matrices, including dense random matrices, struc-

tured projection matrices, and partial basis matrices, are either

difficult to be implemented on low-cost IoT sensor nodes

or have limited applicability, which motivates our design of

sparse Gaussian matrix in the next section.

III. SPARSE GAUSSIAN MATRIX DESIGN
In this section, we present the construction method of the sparse Gaussian matrix, and theoretically prove its RIP.

A. Sparse Gaussian Matrix Construction

Given a series of numbers {xi}ni=1 which are independently and identically distributed according to a zero-mean Gaussian distribution, sparse Gaussian matrix is constructed by randomly placing these elements in a null matrix (Note that the size of the null matrix is larger than the number of used elements), i.e.,

 x1 0 .. x2 0 

sG

=

 



0 0

.. xi xi+1 0

0 ..

.. xi+2

 

,



(7)

0 .. 0 xn 0

or we can construct it in a structured manner as an analogue to Toeplitz matrix, i.e.,

 x1 0 ..

x2

0

sG

=

 



0 xn-2

xi 0

0 xn-3

.. ..

xi+1 0

 

.



(8)

0 xn .. xn-1 0

When implementing a sparse Gaussian matrix in an IoT sensor node, the first step is to generate a null matrix according to the predefined matrix size. Then, the locations of a small number of nonzero elements are determined according to a random number generator. Finally, the values of the nonzero elements are determined according to a Gaussian-distributed (zero mean and unit variance) random number generator, while the rest locations in the null matrix are set to 0.

B. RIP Proof for Sparse Gaussian Matrix

A Matrix  is said to satisfy RIP of order K with parameter K  (0, 1), if

(1 - K )



2 2





2 2

 (1 + K )



2 2

(9)

holds for all   RN with no more than K nonzero entries. In other words,  satisfies RIP (K, K).
In practical application scenarios, however, the signals of interest (i.e., x) are usually sparse under an orthogonal transform basis  rather than the canonical basis. Therefore, it's more convenient to consider the -RIP as follows

(1 - K )

x

2 2



x

2 2



(1

+

K )

x

22,

(10)

for all x satisfying H x 0  K, where H denotes the conjugate transpose of .

According to the definition of RIP, as long as the eigenvalues of all submatrices' gram matrix are in the range of (1 - K , 1 + K ), where submatrices are formed by retaining no more than K columns of , then the matrix  satisfies the RIP condition.

Lemma 1. The eigenvalues of a matrix   Rm×m all lie in

the union of m discs di = di(ci, ri), i = 1, 2, ..., m, centered at ci = ii with radius

m

ri =

|ij |,

(11)

j=1,j=i

where ii and ij denote the diagonal and off-diagonal elements of , respectively. For the proof of Lemma 1, please refer to [16].
To prove that the eigenvalues of all submatrices' gram matrix are in the range of (1 - K , 1 + K ), we resort to the following Lemma.

Lemma 2. Suppose d, o > 0 and d + o = K  (0, 1), and if Gii, the diagonal elements of matrix G = T  satisfy
|Gii - 1| < d and the off-diagonal elements Gij (i = j)
satisfy |Gij| < o/K, then  satisfies RIP (K, K ).

Proof. Please see Appendix A in the online appendix [17].

If the elements of  are independently and identically distributed according to a Gaussian distribution, then Gii is the sum of squares of Gaussian random variables, and Gij (i = j) is the sum of products between independent Gaussian random variables. The range of Gii and Gij (i = j) can be determined by the following Lemma.

Lemma 3. Given {xi}ni=1, assume that it has kn (0 < k < 1) nonzero elements obeying independent and identical Gaussian distribution with zero mean and variance 1/kn, then the sum of squares of xi's satisfies

Pr

n
| x2i - 1|  d

 2 exp(- nkd2 ). 16

(12)

i=1

Proof. Please see Appendix B in the online appendix [17].

Lemma 4. Given two sets of numbers {xi}ni=1 and {yi}ni=1, each with kn nonzero elements, which are independently and
identically distributed according to a Gaussian distribution with zero mean and variance 1/kn, then

n

nt2

Pr |

xiyi|  t

 2 exp(-

),

4 + 2t

(13)

i=1

where 0  t  1.

Proof. Assume {xi}ni=1 and {yi}ni=1 are independent and identical Gaussian random variables with zero mean and
variance 1/n, and based on [18], we have

n

t2

Pr | xiyi|  t  2 exp(- 42(n2 + t/2) ). (14)

i=1

Substituting n = kn and 2 = 1/n into Eq. (14), we have Lemma 4.

Theorem 5. Assume that   Rm×n(n > 2) is a sparse matrix, whose nonzero elements are independently and identically distributed according to a Gaussian distribution with zero mean and and variance 1/m, then for any K  (0, 1), there exist constants c1 and c2 which are only dependent on K and K, such that as long as m > c2 ln n,  satisfies RIP(K, K ) with probability exceeding 1 - exp(-c1m).
Proof. Please see Appendix C in the online appendix [17].

Theorem 5 has proven the RIP of sparse Gaussian matrix sG. In our application scenario of compressive data collection in IoT, however, the equivalent projection matrix is rsG, where r is a sparse binary measurement matrix. In other words, rsG is a submatrix of sG formed by randomly selecting a subset of rows from sG. Therefore, we next present the RIP of rsG.

Corollary 6. [RIP for submatrices (by selecting a subset

of rows) of sparse Gaussian matrix] Assume that  

Rm×n(n > 2) is a sparse matrix, whose nonzero elements

are independently and identically distributed according to a

Gaussian distribution with zero mean and variance 1/n, then

with regard to submatrices of  by selecting m rows from

, there exist constants c3 and c4 which are only dependent

on

K , K

and

the

proportion µ

=

m m

,

such

that

as long

as m > c4 ln n, submatrices of  satisfy RIP(K, K ) with

probability exceeding 1 - exp(-c3m).

Proof. Please see Appendix D in the online appendix [17].

Recovery error Recovery error The values of the data samples in the signal The values of the data samples in the signal

0.035 0.03
0.025 0.02

0.05

Gaussian

Bernoulli

Partial basis

0.04

Toeplitz

Sparse Gaussian

0.03

Partial basis Sparse Gaussian

0.015

0.02

0.01
0.01 0.005

0 50 100 150 200 250 300 350 400
The number of received data samples M

0 50 100 150 200 250 300 350 400
The number of received data samples M

Fig. 2. Signal recovery performance Fig. 3. Signal recovery performance

comparison of using different projec- comparison with packet length set to

tion matrices.

16.

1

1

0.5

0.5

0

0

-0.5

Original Signal

-1

Reconstructed Signal

0

200

400

600

800

1000

The sequence number of the data samples in the signal

-0.5

-1

Original Signal

Reconstructed Signal

0

200

400

600

800

1000

The sequence number of the data samples in the signal

(a) Partial basis matrix

(b) Sparse Gaussian matrix

Fig. 4. Signal recovery comparison using a sparse signal in the canonical basis.

IV. PERFORMANCE EVALUATION
In this section, we evaluate the performance of employing the designed sparse Gaussian matrix to perform CS-based source coding for compressive data collection in IoT and make a comparison with traditional projection matrices. We utilize a real-world dataset from SensorScope [19] and tailor a temperature signal of size N = 1024 as the original signal to be transmitted in the experiments. We would like to point out that we focus mainly on single-hop transmission-based data collection in IoT in this paper. Thus, the process of data collection (as detailed in Section II) from different sensor nodes is identical. Therefore, in the subsequent experiments, we only consider the case where one sensor node transmits data to the FC over a lossy channel, and the results reported in this paper can be easily extended to the case where there are multiple sensor nodes transmitting data to the FC.
A. Signal Recovery Performance
We first compare sparse Gaussian matrix and traditional projection matrices in terms of signal recovery performance. The result of signal recovery error comparison among using different projection matrices at the sensor node before transmission is shown in Fig. 2. Note that in this experiment, we assume that the projection operation is dimensional-invariant, and the number of received data samples M varies from 64 to 384 with a step length of 32. Herein, the used sparse Gaussian matrix is of size 1024 × 1024, and it is constructed as follows. First, we generate a null matrix of the same size. Then, we randomly choose 10% (rounded to the nearest integer) locations in the null matrix to place nonzero elements. Finally, the values of the nonzero elements are determined according to a Gaussian-distributed (zero mean and unit variance) random number generator, while the rest locations in the null matrix are set to 0. Note that in the subsequent experiments, the used sparse Gaussian matrices are all constructed in the same way unless otherwise specified. We can observe from the figure that utilizing dense random matrices (i.e., Gaussian and Bernoulli matrices), partial basis matrices, and the proposed sparse Gaussian matrix achieves similar signal recovery performance. However, when using Toeplitz matrices, a more significant recovery error is obtained under the same number of received data samples. This is because the structure of Toeplitz matrices

is broken during lossy transmission from the sensor node to the FC.
Considering that Toeplitz matrices achieve poor signal recovery performance and that dense random matrices induce high resource cost for sensor nodes (which will be validated later), we next make a further comparison between sparse Gaussian matrix and partial basis matrix with packet length taken into consideration. Assume the packet length is set to 16, that is, 16 consecutive data samples are first organized into a data packet, and then all the generated data packets are transmitted to the FC. The result of signal recovery error comparison is shown in Fig. 3. As noted in the figure, when packet length is set to 16, using partial basis matrices as the projection matrix results in more significant recovery error than using sparse Gaussian matrix. This is because when adopting a large packet length, if a data packet is lost during transmission, all the data samples in it will be missing, leading to block data loss. However, partial basis matrices are only suitable to the case of random data loss (i.e., the packet length is 1, that is, each transmitted data sample is organized into an independent data packet).
Another limitation of partial basis matrices is that they can only be applied to the scenario when the target signal is sparse under some orthogonal transform basis. However, when the target signal is itself sparse. That is, the sparsifying basis is the canonical basis, partial basis matrices fail to achieve successful signal recovery. To demonstrate that partial basis matrices cannot promise accurate signal recovery when the target signal is sparse under the canonical basis. We synthesize a sparse signal x under the canonical basis with a dimension of N = 1024. Only 50 elements of x are nonzero (varying from -1 to 1) while most elements are zero. We respectively employ partial basis matrices and the designed sparse Gaussian matrix to perform CS-based source coding at the IoT sensor node, and the number of received data samples is set to 64. The signal recovery results using the two kinds of projection matrix are shown in Fig. 4. We can observe from the figure that accurate signal recovery is achieved when using the designed sparse Gaussian matrix to perform CS-based source coding, while it fails to achieve accurate signal recovery when using partial basis matrices, which further validates the superior performance of the designed sparse Gaussian matrix and the limitations of partial basis matrices.

Time cost for matrix construction (ms) Memory cost for matrix construction (KBytes)

106

104

105

103

104

102

103

101

102 101
0

Gaussian Bernoulli Sparse Gaussian
200 400 600 800 1000 1200 The matrix size of N*N

100 10-1
0

Gaussian Bernoulli Sparse Gaussian
200 400 600 800 1000 1200 The matrix size of N*N

Fig. 5. Time cost comparison among Fig. 6. Memory cost compariGaussian, Bernoulli, and sparse Gaus- son among Gaussian, Bernoulli, and sian matrix for matrix construction. sparse Gaussian matrix for matrix con-
struction.

B. Resource Cost
Considering that many low-cost IoT sensor nodes are resource-constrained (e.g., computational capability, storage capacity), it is inefficient or even impractical to implement complicated operations on them. Now, we make a comparison between sparse Gaussian matrix and dense random matrices (e.g., Gaussian and Bernoulli matrices) in terms of time and memory cost for projection matrix construction. We implement the three kinds of projection matrices on STM32W108 chips that offer IEEE 802.15.4 communication standard, with a clock speed of 24 Mhz, a RAM of 12 KB, a ROM of 128 KB, and 4 AA batteries for power supply.
The comparison results of time cost and memory cost for matrix construction are respectively shown in Fig. 5 and Fig. 6 (the matrix is of size N × N ). Note that a random Gaussian number is quantified by 16 bits, and one element in Bernoulli matrix is quantified by 1 bit. Note that when there are only a few nonzero elements in Bernoulli matrix, we only store the positions of these nonzero elements, which is more efficient. Also, the number of nonzero elements in sparse Gaussian matrix will directly impact the resource cost of sensor nodes. We can see from Fig. 5 that it costs the most time to construct a random Gaussian matrix, which is self-explanatory. When N = 64, sparse Gaussian matrix costs a little more time than Bernoulli matrix and remains the most efficient one to construct when N increases. As for the memory cost shown in Fig. 6, sparse Gaussian matrix consumes almost the same memory as Bernoulli matrix when N = 64, while remains the most memory-saving for rest cases. Specifically, when N = 1024, constructing a Bernoulli matrix with only two nonzero elements in each row needs 8 KBytes of memory, while only 4 KBytes are enough for sparse Gaussian matrix. Besides, it costs 1792 and 763 ms to construct such a Bernoulli matrix and sparse Gaussian matrix, respectively.
V. CONCLUSION
In this paper, to achieve efficient and resource-saving CSbased source coding for compressive data collection in IoT, we design a novel, simple projection matrix, named sparse Gaussian matrix, which is easy and efficient to implement practical IoT systems. Specifically, we first present the construction method of sparse Gaussian matrix and then prove its

RIP theoretically. Finally, we conduct extensive experiments
to demonstrate that employing the designed sparse Gaussian
matrix to perform CS-based source coding at the sensor
node can significantly save time and memory cost while
guaranteeing satisfactory signal recovery performance.
REFERENCES
[1] T. Qiu, N. Chen, K. Li, M. Atiquzzaman, and W. Zhao, "How can heterogeneous internet of things build our future: A survey," IEEE Communications Surveys & Tutorials, vol. 20, no. 3, pp. 2011­2027, 2018.
[2] L. Wu, P. Sun, Z. Wang, Y. Yang, and Z. Wang, "Toward efficient compressed-sensing-based RFID identification: A sparsity-controlled approach," IEEE Internet of Things Journal, vol. 7, no. 8, pp. 7714­ 7724, 2020.
[3] Y. Qian, D. Wu, W. Bao, and P. Lorenz, "The Internet of Things for smart cities: Technologies and applications," IEEE Network, vol. 33, no. 2, pp. 4­5, 2019.
[4] R. G. Baraniuk, "Compressive sensing [lecture notes]," IEEE Signal Processing Magazine, vol. 24, no. 4, pp. 118­121, 2007.
[5] P. Sun, Z. Tian, Z. Wang, and Z. Wang, "PRSS: A prejudiced random sensing strategy for energy-efficient information collection in the internet of things," IEEE Internet of Things Journal, vol. 6, no. 2, pp. 2717­2728, 2018.
[6] L. Wu, K. Yu, D. Cao, Y. Hu, and Z. Wang, "Efficient sparse signal transmission over a lossy link using compressive sensing," Sensors, vol. 15, no. 8, pp. 19 880­19 911, 2015.
[7] L. Wu, P. Sun, M. Xiao, Y. Hu, and Z. Wang, "Sparse signal ALOHA: a compressive sensing-based method for uncoordinated multiple access," IEEE Communications Letters, vol. 21, no. 6, pp. 1301­1304, 2017.
[8] L. Kong, M. Xia, X.-Y. Liu, M.-Y. Wu, and X. Liu, "Data loss and reconstruction in sensor networks," in 2013 Proceedings IEEE INFOCOM. IEEE, 2013, pp. 1654­1662.
[9] X. Li, X. Tao, and G. Mao, "Unbalanced expander based compressive data gathering in clustered wireless sensor networks," IEEE Access, vol. 5, pp. 7553­7566, 2017.
[10] H. Mamaghanian, N. Khaled, D. Atienza, and P. Vandergheynst, "Compressed sensing for real-time energy-efficient ECG compression on wireless body sensor nodes," IEEE Transactions on Biomedical Engineering, vol. 58, no. 9, pp. 2456­2466, 2011.
[11] G. Zhang, S. Jiao, X. Xu, and L. Wang, "Compressed sensing and reconstruction with bernoulli matrices," in The 2010 IEEE International Conference on Information and Automation. IEEE, 2010, pp. 455­460.
[12] W. U. Bajwa, J. D. Haupt, G. M. Raz, S. J. Wright, and R. D. Nowak, "Toeplitz-structured compressed sensing matrices," in 2007 IEEE/SP 14th Workshop on Statistical Signal Processing. IEEE, 2007, pp. 294­ 298.
[13] P. Sun, L. Wu, Z. Wang, Y. Feng, and Z. Wang, "SCRA: Structured compressive random access for efficient information collection in IoT," IEEE Internet of Things Journal, vol. 7, no. 3, pp. 2356­2367, 2020.
[14] J. A. Tropp, "Greed is good: Algorithmic results for sparse approximation," IEEE Transactions on Information Theory, vol. 50, no. 10, pp. 2231­2242, 2004.
[15] E. J. Cande`s and M. B. Wakin, "An introduction to compressive sampling," IEEE Signal Processing Magazine, vol. 25, no. 2, pp. 21­30, 2008.
[16] R. S. Varga, Gersgorin and his circles. Springer Science & Business Media, 2010, vol. 36.
[17] P. Sun, L. Wu, and Z. Wang, "Online appendix," 2021. [Online]. Available: https://www.dropbox.com/s/fcmnr3updvd3hmv/appendix sG. pdf?dl=0
[18] J. Haupt, W. U. Bajwa, G. Raz, and R. Nowak, "Toeplitz compressed sensing matrices with applications to sparse channel estimation," IEEE Transactions on Information Theory, vol. 56, no. 11, pp. 5862­5875, 2010.
[19] F. Ingelrest, G. Barrenetxea, G. Schaefer, M. Vetterli, O. Couach, and M. Parlange, "Sensorscope: Application-specific sensor network for environmental monitoring," ACM Transactions on Sensor Networks (TOSN), vol. 6, no. 2, p. 17, 2010.

