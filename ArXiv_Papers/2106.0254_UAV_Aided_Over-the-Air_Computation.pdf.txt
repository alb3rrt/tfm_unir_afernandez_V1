arXiv:2106.00254v1 [eess.SP] 1 Jun 2021

1
UAV Aided Over-the-Air Computation
Min Fu, Student Member, IEEE, Yong Zhou, Member, IEEE, Yuanming Shi, Senior Member, IEEE, Wei Chen, Senior Member, IEEE,
and Rui Zhang, Fellow, IEEE
Abstract
Over-the-air computation (AirComp) seamlessly integrates communication and computation by exploiting the waveform superposition property of multiple-access channels. Different from the existing works that focus on transceiver design of AirComp over static networks, this paper considers an unmanned aerial vehicle (UAV) aided AirComp system, where the UAV as a flying base station aggregates data from mobile sensors. The trajectory design of the UAV provides an additional degree of freedom to improve the performance of AirComp. Our goal is to minimize the time-averaged meansquared error (MSE) of AirComp by jointly optimizing the UAV trajectory, receive normalizing factors, and sensors' transmit power. To this end, we first propose a novel and equivalent problem transformation by introducing intermediate variables. This reformulation leads to a convex subproblem when fixing any other two blocks of variables, thereby enabling efficient algorithm design based on the principle of block coordinate descent and alternating direction method of multipliers (ADMM) techniques. In particular, we derive the optimal closed-form solutions for normalizing factors and intermediate variables optimization subproblems. We also recast the convex trajectory design subproblem into an ADMM form and obtain the closed-form expressions for each variable updating. Simulation results show that the proposed algorithm achieves a smaller time-averaged MSE while reducing the simulation time by orders of magnitude compared to state-of-the-art algorithms.
Index Terms
Over-the-air computation, time-averaged MSE minimization, joint UAV trajectory and transceiver design, ADMM.
M. Fu, Y. Zhou, and Y. Shi are with School of Information Science and Technology, ShanghaiTech University, Shanghai 201210, China (e-mail: {fumin, zhouyong, shiym}@shanghaitech.edu.cn).
W. Chen is Department of Electronic Engineering and Beijing National Research Center for Information Science and Technology, Tsinghua University, Beijing 100084, China (e-mail: wchen@tsinghua.edu.cn).
R. Zhang is with the Department of Electrical and Computer Engineering, National University of Singapore, Singapore 117583 (e-mail: elezhang@nus.edu.sg).
This article has been presented in part at the IEEE Int. Conf. Commun., Montreal, Canada, Jun. 2021 [1].

2
I. INTRODUCTION
The availability of massive sensory datasets and high-performance computing platforms [2] shall make connected intelligence a dominant feature of 6G wireless networks. Integrated sensing, communication, and computation is therefore required to enable a plethora of exciting dataintensive applications, including the internet of everything, tactile internet, sustainable cities, and e-health. Over-the-air computation (AirComp) [3], [4] is a disruptive technology that seamlessly integrates computation into communication, yielding a revolutionary paradigm shift from "communicate then compute" to "compute when communicate". The basic principle of AirComp is to exploit the waveform/signal superposition property of multiple-access channels (MAC) and to apply functional decomposition such that a base station (BS) directly obtains a class of nomographic functions of distributed data from concurrent sensor transmissions. With the benefit of low-latency multiple access, AirComp has been recently applied to enable a wide range of internet of thing (IoT) applications, such as wireless federated machine learning [5], [6], distributed consensus control [7], and distributed sensing [8].
To enable reliable AirComp, one key aspect is the joint transceiver design (e.g., transmit power control, receive normalizing factor setting, and receive beamforming design) to reduce the computation error induced by the receiver noise and non-uniform channel fading. Therein, for singleinput-single-output (SISO) AirComp, the authors in [9], [10] proposed a computation-optimal policy to balance the trade-off between the noise-induced error and the signal-misalignment error. In particular, the optimal transmit power control policy is shown to be a combination of channel inversion policy and full power policy with a threshold-based structure. Moreover, in most prior works on multiple-input-single-output (MISO) AirComp [11]­[13] and multipleinput-multiple-output (MIMO) AirComp [13]­[16], the zero-forcing policy is commonly adopted for transmit power and receive normalizing factor control. This policy perfectly compensates for the magnitude attenuation of signals at the expense of increasing the noise-induced error. Unfortunately, when one or more individual channels are in deep fading, this policy may magnify the negative impact of noise and degrade the AirComp performance. This is because the computation error is negatively correlated with the worst channel gain among all sensors. Furthermore, to enhance the performance of AirComp, the authors in [17], [18] adopted an emerging reconfigurable intelligent surface (RIS) technology [19], [20] to further optimize the passive beamforming at the RIS together with the transceiver design.

3
Most of the existing studies on AirComp [9]­[18] were restricted to static networks, where the positions of the sensory devices remain unchanged during the data aggregation process. However, in some emerging applications (e.g., consensus control [9] and sensing [16]), the sensors are usually embedded in mobile devices (e.g., ground vehicles) and may move out of the coverage area of the static ground BSs. For example, sensors can be mounted on the mobile ground vehicles to monitor a wild environment to avoid natural disasters [16]. Under these circumstances, the performance of AirComp may be severely degraded, especially in remote areas, where the ground BSs are usually sparsely deployed or unavailable. Moreover, because of the channel fading, the receiver noise, and the limited transmit power at the sensors, only relying on the transceiver design is not able to guarantee the performance of AirComp. Therefore, it is necessary to deploy a more flexible BS to deal with the aforementioned challenges.
Fortunately, low-cost unmanned aerial vehicles (UAVs) are considered as a promising alternative to assist the terrestrial networks [21], [22]. Recently, a growing body of research efforts have been devoted to study the deployment of UAVs as mobile BSs in IoT networks to support information dissemination [23], [24] and data collection [25]. This motivates us to deploy a UAV as a flying BS to aggregate data from mobile sensors via AirComp in IoT networks, where the ground sensors are continuously moving and the terrestrial BS is unavailable. UAV-aided AirComp enjoys the following advantages. First, the UAV-mounted BS is cost-effective and can be flexibly deployed to provide services when the terrestrial BS is not available. Second, due to UAV's high altitude, the UAV can establish line-of-sight (LoS) connections with the sensors to alleviate the performance loss of AirComp induced by channel impairments (e.g., fading). Finally, with controllable mobility, the UAV can track sensors' movement to avoid long-distance transmissions and dynamically strike a balance between communication distance and sensors' transmit power, thereby enhancing the performance of AirComp.
To quantify the computation error, a performance metric that has been widely adopted for AirComp is the mean-squared error (MSE) between the estimated function value and the target function value [9]­[18]. Hence, we formulate a time-averaged MSE minimization problem with the joint UAV trajectory and transceiver design, taking the maximum speed at the UAV as well as the peak and average transmit power at the sensors into consideration. We aim to optimally balance the trade-off between the signal-misalignment error and the noise-induced error. However, due to the highly coupled variables and time-dependent constraints, it is generally challenging to solve the formulated problem optimally. The conventional method to decouple the

4
variables is the block coordinate descent (BCD) method [26], which updates each block in an alternating manner until convergence, resulting in a non-convex trajectory design subproblem. Although the successive convex approximation (SCA) method [27] can tackle the non-convex trajectory design subproblem with the first-order Taylor approximation, it is not guaranteed to find an optimal solution of the original subproblem. Furthermore, by using CVX and interior-point solvers (e.g., SDPT3) [28], [29], the SCA method is time-consuming and may not be scalable for large-scale networks. In contrast, the alternating direction method of multipliers (ADMM) [30] is a powerful first-order method that is well-suited for large-scale convex optimization. As inspired, we in this paper develop a novel problem reformulation that leads to a convex trajectory design subproblem, and propose an ADMM method to solve the aforementioned subproblem.
A. Contributions The main contributions of this paper are summarized as follows. · This paper is one of the early attempts to study the UAV-aided AirComp system, where the UAV is deployed to provide services when the terrestrial BS is unavailable and track sensors' mobility for establishing LoS connections, thereby enhancing the performance of AirComp and the robustness against noise. Additionally, we formulate a time-averaged MSE minimization problem by jointly designing the UAV trajectory, normalizing factors at the UAV, and transmit power at the sensors, taking into account the maximum speed of the UAV, as well as the peak and average transmit power budgets at the sensors. · To address the limitations of the existing methods, we first introduce intermediate variables as alternatives for transmit power variables, termed as signal quality factors defined as the product of each sensor's transmit power and its channel power gain. Although the reformulated problem is still non-convex, this novel variable transformation makes it easier to decompose the original problem into three convex subproblems, which can be optimally solved. · Based on the above results, we exploit the BCD method to decompose the reformulated problem. We derive the optimal closed-form solutions for the receive normalizing factors and signal quality factors. To further reduce the computational complexity, we rewrite the convex trajectory optimization subproblem as an ADMM form, which can update each variable in closed form.

5

UAV-mounted BS

AirComp

Function of data - Average - Max/min -...

Temperature Humidity Light Pressure
Fig. 1. An illustration of a UAV-aided AirComp network.
The numerical results validate that the importance and necessity of the joint UAV trajectory and transceiver design for minimizing the time-averaged MSE and enhancing the robustness against noise in mobile networks. It also shows that the proposed algorithm achieves significantly performance gains and reduces the simulation time by orders of magnitude compared to the existing algorithms.
B. Organization The remainder of this paper is organized as follows. Section II describes the system model and
problem formulation. In Section III, we propose a BCD-ADMM method to solve the formulated problem. Section IV presents the numerical results to evaluate the performance of the proposed algorithm. Finally, we conclude this paper in Section V.
II. SYSTEM MODEL AND PROBLEM FORMULATION As illustrated in Fig. 1, we consider a UAV-aided AirComp network with K ground mobile sensors, where the terrestrial BS is not available. Therein, the UAV is deployed as an aerial BS to aggregate sensory data from K distributed sensors during a given mission duration of T second (s). In addition, we assume that each ground sensor moves with a given speed and along a path designed in advance to collect data at different locations [16], [31], [32]. One practical scenario for such a consideration could be wild-area environmental monitoring [16], where the BSs are unavailable nearby and the UAV is dispatched to monitor the average temperature/humidity measured by the sensors, while the sensors mounted on moving vehicles are employed to measure temperature/humidity data at different positions. Both the UAV and the sensors are equipped with a single antenna due to their size and power limitations. To achieve ultrafast data aggregation,

6

the UAV exploits AirComp to aggregate a nomographic function (e.g., average function and sum function) of the distributed data, rather than to decode each sensory data separately.

A. UAV Mobility Model and Channel Model

1) UAV Mobility Model: Since the sensors are moving continuously, we aim to design the UAV trajectory according to the sensors' locations so as to reduce the computation error. The mobile UAV can move sufficiently close to the sensors for avoiding long-distance transmissions, thereby saving sensors' transmit power and mitigating the effect of noise. Therefore, the UAV trajectory design provides an additional degree of freedom for AirComp performance enhancement. In a three-dimensions (3D) Cartesian coordinate system, we denote the location of the UAV at time t projected on the horizontal (ground) plane as q(t) = [x(t), y(t)]  R1×2, 0  t  T with x(t) and y(t) being x- and y-coordinates at time instant t, respectively. We assume that the UAV flies at a fixed altitude H above the ground level. Note that in practice, H corresponds to the minimum altitude that ensures obstacle avoidance without the need for frequent aircraft ascending and descending. In addition, the UAV is assumed to start the mission at an initial location, the horizontal coordinate of which is denoted as qI = [xI, yI]  R1×2. Note that the initial location is determined by various factors, e.g., energy replenishment [25], [33]. We denote q(0) = qI. Besides, we denote the maximum speed of the UAV as Vmax in meter/second (m/s). Hence, we have the constraints x 2(t) + y2(t)  Vmax, 0 < t < T , where x (t) and y(t) denote the time-derivatives of x(t) and y(t) at time instant t, respectively.
To assist a tractable algorithm design, we adopt the time discretization technique to deal with the continuous UAV trajectory design, which is widely considered in most of the existing works [23]­[25], [33], [34]. Specifically, the mission duration T is equally divided into N time slots, i.e., T = N , where  denotes time step size. Given the maximum UAV speed Vmax and altitude H, the time step size  needs to satisfy Vmax H so that the distance between the UAV and sensors is approximately a constant during each time slot. Based on the time discretization technique, the UAV trajectory q(t) over time horizon T is approximated by the (N + 1)-length sequence {q[n]}Nn=0 with q[n] q(n) denoting the UAV's horizontal coordinate at time slot n. We denote N as N {1, . . . , N }. The UAV's mobility constraints are given by

q[n] - q[n - 1] 2  Vmax, n  N ,

(1)

q[0] = qI,

(2)

7

where constraints (1) correspond to the UAV speed constraint and constraint (2) is subject to

the initial location of the UAV.

2) Channel Model: Recent field experiments by Qualcomm verified that UAV-to-ground

channels are dominated by LoS links when the UAV flies above a certain altitude [35]. In

this paper, we assume that each connection from the sensor to the UAV is dominated by

the LoS channel. Moreover, the Doppler effect resulting from mobility is assumed to be per-

fectly compensated [36]. The horizontal coordinate of sensor k at time slot n is denoted as

wk[n] = [xk[n], yk[n]]  R1×2 with xk[n] and yk[n] being x- and y-coordinates at time slot n, respectively. The set of ground sensors is denoted as K {1, . . . , K}, K > 1. The time-varying

channel from sensor k to the UAV at time slot n follows the free-space path loss model [24]

hk[n] = k[n]h~k[n], k  K,

(3)

where |h~k[n]| = 1, and k[n] denotes the free-space path loss. Specifically, k[n] is modeled as

k[n] = 0d-k 2[n], where 0 represents the channel power gain at the reference distance of 1 m

related to the carrier frequency and antenna gain, and dk[n] =

H2 +

q[n] - wk[n]

2 2

is

the

distance between the UAV and sensor k at time slot n.

B. AirComp for Data Aggregation

Let zk[n]  C denote the sensory data of sensor k at time slot n. The UAV intends to obtain a function (e.g., geometric mean and arithmetic mean) of the measured data from K sensors at

each time slot n  N , where the target function of K variables is denoted as f [n] : CK  C.

By using a mathematical property of theoretical function representation, the target function can

be expressed as its nomographic form as a function of a finite sum of univariate functions [9].

Specifically, the target function computed at the UAV is written as in its nomographic form:

K

f [n] z1[n], . . . , zK[n] = 

k zk[n] ,

(4)

k=1
where k : C  C is the pre-processing function, k  K and  : C  C is the post-processing

function. Note that the UAV's original computation of f [n] by processing K variables has

been decomposed into (K + 1) small tasks of designing {1, . . . , K, }. Based on the above

function representation, we present an efficient AirComp technique [9], [10] for the low-latency

target function f [n] computation by exploiting the waveform/signal superposition property of

MACs. With AirComp, each sensor pre-processes its own signal zk[n] with function k and simultaneously transmits k(zk[n]) to the UAV, while the UAV post-processes the received sum

8

of signals

K k=1

k

zk[n]

with function  to estimate the desired computation f [n]. The sensors'

transmissions are assumed to be well synchronized [9], [10].

Without loss of generality, in this paper, we consider the case where the UAV computes the

average of distributed data generated by the sensors [12], [10]. Therefore, the function of interest

at the UAV at time slot n is given by

1K

f [n] = K

k zk[n] .

(5)

k=1

To compute function f [n] in (5) via AirComp, the specific procedure is described as follows.

The transmit signals after pre-processing at each sensor are give by

sk[n] = k(zk[n]), k  K,

(6)

where {sk[n], k  K} are assumed to be independent with each other and normalized with zero mean and unit variance, i.e., E(sk[n]) = 0, E(sk[n]sHk [n]) = 1, and E[si[n]sj[n]H] = 0, i = j,

as in [12], [10]. After the sensors simultaneously send their pre-processed signals {sk[n]} to the

UAV over a single frequency channel, the received signal at the UAV is given by

K

y[n] = bk[n]hk[n]sk[n] + e[n],

(7)

k=1
where bk[n]  C denotes the transmit pre-coding coefficient at sensor k for channel-fading com-

pensation and e[n] denotes the additive white Gaussian noise (AWGN), i.e., e[n]  CN (0, 2).

Therein, the peak and average transmit power constraints at sensor k are respectively given by

|bk[n]|2  Pk,

1 N

N

|bk[n]|2  P¯k.

(8)

n=1

Upon receiving signal y[n] in (7), the estimated average function after post-precessing at the

UAV is given by

f^[n] =

y[n] ,

(9)

K [n]

where [n]  C is a receive normalizing factor at the UAV. Note that it is applied to both signals

and the noise, and is designed to provide power compensation for signals and suppress the noise,

thereby obtaining an accurate estimation of the target function f [n].

C. Performance Metric To quantify the AirComp performance, the distortion of the estimation function f^[n] with
respect to (w.r.t.) the desired function f [n] is measured by the MSE between f^[n] and f [n], which is widely adopted in the existing AirComp studies [9]­[18]. In particular, the corresponding MSE

9

at time slot n is given by

MSE[n]

=

E[|f^[n] - f [n]|2]

=

1 K2 E

y[n]

K

2

- sk[n]

[n] k=1

1K =
K2

2

bk[n]hk[n] - 1

2 +

,

[n]

|[n]|2

(10)

k=1

where the expectation is taken over the distributions of the transmitted signals {sk[n]} and noise

e[n]. Accordingly, the time-averaged MSE over N time slots is given as

1N

MSE =

MSE[n].

(11)

N

n=1

In this paper, we aim to minimize the time-averaged MSE by jointly optimizing {bk[n]},

{[n]}, and {q[n]}. Prior to formulating the optimization problem, we present some properties

of objective function (11) as follows.

Proposition 1. With given any amplitudes of complex transmit pre-coding coefficients {bk[n]}, complex normalizing factors {[n]}, and complex channel coefficient {hk[n]}, to achieve the minimum MSE, each term bk[n]hk[n]/[n] in (11) must be real and non-negative for all n  N , k  K.

Proof. Please refer to Appendix A. Based on Proposition 1, without loss of generality, we set [n]  R+, and bk[n]

 pk [n]hk [n] |hk [n]|

with pk[n]  [0, Pk] to perfectly offset the phases introduced by the complex channel coefficients

such that each term bk[n]hk[n]/[n] in (11) is real and non-negative, in the rest of paper. In this

sense, it allows us to focus on the control of pk[n] instead of bk[n], where pk[n] represents the

transmit power at sensor k at time slot n. Hence, the time-averaged MSE is rewritten as

1N

K

MSE = N K2

n=1 k=1

2

pk[n] hk[n] - 1 [n]

2 + 2[n]

1N = NK2
n=1

K k=1

[n]



2

pk[n] 0

-1

(H2 +

q[n] - wk[n]

2 2

)

2 + 2[n] .

(12)

D. Problem Formulation
Let p = {pk[n], n  N , k  K},  = {[n], n  N }, and q = {q[n], n = 0, . . . , N }. By assuming that the time-dependent locations of the ground sensors are known in advance [32], our goal is to minimize MSE by jointly optimizing the transmit power p of the sensors,

10

the normalizing factors  at the UAV, and the UAV trajectory q over different time slots. The

optimization problem is formulated as

minimize MSE p,,q

subject to 0  pk[n]  Pk, k  K, n  N ,

1 0
N

N

pk[n]  P¯k, k  K,

n=1

[n]  0, n  N ,

(13a) (13b) (13c)

q[n] - q[n - 1] 2  Vmax, n  N ,

(13d)

q[0] = qI.

(13e)

To make constraint (13b) non-trivial, we assume P¯k < Pk in this paper. Note that the challenges

of solving problem (13) lie in the following two main aspects. First, the transmit power p,

normalizing factors , and UAV trajectory q are highly coupled over different time slots. Second,

for fixed transmit power p and normalizing factors , although all the constraints of problem

(13) are convex w.r.t. q, the objective function MSE is still non-convex w.r.t. q. As a result,

problem (13) is a non-convex optimization problem. In general, there is no standard method for

solving such non-convex optimization problems optimally.

The BCD-SCA method proposed in [1] can be adopted to solve problem (13). Specifically, the

variables p, , and q are decoupled by exploiting the BCD method. And the non-convexity of

objective function MSE in the resulting subproblem related to q is tackled by adopting the SCA

technique. However, the SCA algorithm only optimizes the approximate lower bound of trajectory

subproblem. Consequently, the aforementioned approximate algorithm is not guaranteed to find

an optimal solution of the resulting subproblem related to q, which may result in low-quality

solutions. Moreover, the BCD-SCA method in [1] always relies on the CVX and interior-point

solvers (e.g., SDPT3) to solve the approximated convex trajectory optimization subproblems

numerically. Clearly, the computational costs of these second-order algorithms are not scalable

when the problem size (N or K) is large.

To address the limitations of the existing methods, we first transform problem (13) into an

equivalent and more tractable form in the sequel. Specifically, for each sensor k, we define signal

quality factor at each time slot n as the product of its transmit power and channel gain (i.e., k[n] pk[n]|hk[n]|2). Let  = {k[n], k  K, n  N }. By introducing k[n], problem (13)

11

can be equivalently transformed as

1N

K

P : minimize ,,q

NK2

n=1 k=1

2

k[n] - 1

2 +

[n]

2[n]

subject to

0



k[n] |hk[n]|2



Pk, k, n,

0



1 N

N n=1

k[n] |hk[n]|2



P¯k, k,

constraints (13c), (13d), (13e).

(14a) (14b) (14c)

It is easily verified that problem P is equivalent to problem (13). With such a transformation,

we only need to focus on solving problem P in the rest of the paper. Although problem P is

still a non-convex optimization problem due to the coupled optimization variables, it reduces to

a convex subproblem when any two blocks of variables , , and q are fixed, which is not the

case for problem (13). This facilitates the development of an efficient algorithm with high-quality

solutions shown later in Section III.

Remark 1. One can observe that the objective function of problem P consists of two com-

ponents,

which

are

the

signal

misalignment

error

(i.e.,

1 NK2

N n=1

Kk=1(

k [n] [n]

-

1)2)

and

the

noise-induced

error

(i.e.,

1 NK2

N n=1

2 2[n]

).

Ideally,

to

minimize

the

time-averaged

MSE,

we

can

enlarge  to suppress the noise-induced error while compelling the signal quality factors 

to equal the normalizing factors to perfectly align the signals. Unfortunately, due to the limited

power budget and non-uniform channel fading, the values of the signal quality factors are usually

limited. Thanks to the UAV's mobility, we can design the UAV trajectory according to the sensors'

locations to construct favorable channels and thus increase the signal quality factors compared

to the static UAV/BS case, thereby decreasing the time-averaged MSE.

III. BCD-ADMM METHOD FOR SOLVING PROBLEM P
In this section, we develop a low-complexity algorithm, named BCD-ADMM method, to solve problem P efficiently. Specifically, to address the highly coupled optimization variables, we adopt the BCD method to decompose the joint optimization problem P into three convex quadratically constrained quadratic programming (QCQP) subproblems, whose global optimal solutions can be obtained. To further reduce the computational complexity, we derive closedform expressions for  and , followed by presenting a low-complexity implementation using

12

the ADMM to solve the convex trajectory optimization subproblem with closed-form solutions for each variable updating.

A. Normalizing Factors Optimization

In this subsection, given  and q, we reformulate problem P by optimizing  as

N

K

P1.1 : minimize {[n]0} n=1 k=1

2

k[n] - 1 [n]

2 + 2[n] .

Problem P1.1 can be decoupled into N subproblems each for optimization [n] to minimize the

MSE. The n-th subproblem is written as

K
minimize
[n]0

2

k[n] - 1 [n]

2 + 2[n].

(15)

k=1

By denoting [n] = 1/[n], problem (15) can be transformed to a convex quadratic problem as

K

2

minimize

k[n][n] - 1 + 2([n])2.

(16)

[n]0

k=1

By setting the first derivative of the objective function in problem (16) to be zero, we can

obtain the optimal solution  [n] to problem (16). As a result, the optimal solution to problem

(15) is obtained as  [n] = 1/ [n], n, given in the following proposition.

Proposition 2. With any given  and q, the optimal solution  of problem P1.1 is given by



[n]

=

2

+
K k=1

K k=1

k

[n]

,

n

k[n]



N.

(17)

Remark 2. Note that the normalizing factor  [n] monotonically increases with the noise power

2. This indicates that as the noise power increases, a larger normalizing factor  [n] is required

to suppress the noise-induced error, otherwise the time-averaged MSE will increase.

B. Signal Quality Factors Optimization

In this subsection, we present the solution to problem P by optimizing  when q and  are

fixed. The corresponding optimization problem is given by

NK
P1.2 : minimize  n=1 k=1

2
k[n] - 1 [n]

subject to constraints (14a), (14b),

where the constant term {2/2[n]} is ignored in the objective function. In this case, we

decompose problem P1.2 into the following K subproblems for optimizing k[n], n  N

to minimize the MSE for one sensor,

13

N

minimize

{k [n]}

n=1

2
k[n] - 1 [n]

subject to

0



k[n] |hk[n]|2



Pk, n,

(19a)

0



1 N

N n=1

k[n] |hk[n]|2



P¯k.

(19b)

Note that problem (19) is a convex linearly constrained quadratic program (QP) that can be

directly solved by using modeling framework CVX and interior-point solvers (e.g., SDPT3)

[28], [29], similar to [37], [38]. However, by exploring its special property, we can obtain more

efficient solutions. Because strong duality holds between problem (19) and its Lagrange dual

problem. We can leverage the Lagrange-duality method to optimally solve problem (19). Let

n  0 denote the dual variable associated with the n-th constraint in (19a), n  N . Let   0

denote the dual variable associated with the constraint (19b). Then the Lagrangian of problem

(19) is

N
L({k[n]}, {n}, ) =
n=1

k[n] -1 [n]

2N
+ n
n=1

k[n] |hk[n]|2

-Pk

+

N n=1

k[n] |hk[n]|2

-N P¯k

.

(20)

By applying the Karush-Kuhn-Tucker (KKT) conditions, we obtain the following result.

Proposition 3. With any given  and q, the optimal solution  of problem P1.2 is given by



 

min





k[n] =

  

min



2[n], Pk|hk[n]|2 , if min

2[n] |hk[n]|2 , Pk

 N P¯k,

[n]|hk[n]|2 hk[n]|2 +  2[n]

2
, Pk|hk[n]|2

, otherwise,

(21)

where  is a constant that ensures the average power constraint

N n=1

k[n]/|hk[n]|2

=

N P¯k,

which can efficiently be found via a one-dimensional bisection search, though a closed-form

expression is not attainable.

Proof. Please refer to Appendix B.

Remark 3. Note that if k[n] = 2[n], k, n, then the signal-misalignment error is zero, i.e.,

N

K

n=1 k=1

k[n]/[n] - 1 2 = 0. Since the sensors' power budget is limited and [n] is

applied to all sensors with different channels at each time slot, k[n] may not be always equal to 2[n] for all n  N , k  K. If so, then k[n] has to be [n]|hk[n]|2/(|hk[n]|2 +  2[n]) 2 or
Pk|hk[n]|2. Observing that when k[n]  2[n], the objective function of problem P1.2 mono-

tonically decreases as k[n] increases. Thus, we can decrease the objective value by increasing

14
the signal quality factors . Meanwhile, both terms [n]|hk[n]|2/(|hk[n]|2 +  2[n]) 2 and Pk|hk[n]|2 in (21) monotonically increase with the increase of |hk[n]|2. Based on the above analysis, it is found that we can further reduce the time-averaged MSE by increasing the sensors' channel power gains while still keeping constraints (14a) and (14b) feasible.

C. UAV Trajectory Optimization

Next, we optimize the UAV trajectory q for given  and . Problem P is reduced to a feasibility checking problem, i.e.,

find q

subject to 0  q[n] - wk[n] 2  P^k[n], k, n,
N
0  k[n] q[n] - wk[n] 2  P~k, k,
n=1
constriants (13d), (13e),

(22a) (22b) (22c)

where P^k[n] = 0Pk/k[n] - H2 and P~k = N 0P¯k - H2

N n=1

k[n].

It

is

not

difficult

to

observe

that problem (22) is a convex QCQP feasibility detection problem. To obtain a more efficient

solution and help reduce the value of the objective function at each iteration, we further transform

problem (22) into an optimization problem with an explicit objective. Intuitively, if the optimized

trajectory by solving (22) achieves a strictly smaller value of weighted-sum distance between the UAV and sensor k than the corresponding threshold P~k, the channel gain between the UAV and sensor k can be further increased since the channel gain is monotonically increased as the

distance between the UAV and the sensor decreases. In turn, as presented in Remark 3 of Section

III, as channel gains between the UAV and the sensors increase, the signal quality factors {k[n]} in problem P1.2 can be increased while satisfying all the power constraints, thereby reducing the time-averaged MSE. To this end, problem (22) is transformed into the following weighted-sum

distance (between the UAV and all sensors) minimization problem

NK

P1.3 : minimize

k[n] q[n] - wk[n] 2

q

n=1 k=1

subject to constriants (13d), (13e), (22a), (22b),

where we set the weights to be k[n], k, n. This is because, in the AirComp setup, the distances between the UAV and different sensors cannot be simultaneously minimized in general at any time slot, which thus need to be balanced with different weights. Comparing problem P1.3 with problem (22), it follows that the feasible set of problem P1.3 is the same as problem (22).

15

However, P1.3 is more practically desired than problem (22) in terms of the converged solution

as the time-averaged MSE decreases more quickly with the number of iterations. Although the

convex QCQP problem P1.3 can be solved using a general-purpose solver through interior-point

methods, to further reduce the computational complexity, we exploit the specific structure of

problem P1.3 and find its optimal solution using an ADMM-based algorithm in the sequel.

To utilize the ADMM method to solve problem P1.3, we introduce some necessary auxiliary

variables and transform the constraints such that problem P1.3 can be decoupled into several

convex subproblems as follows. To begin with, we define A1 as





-1 1 0 · · · 0 0





0

A1

=

 

0

-1 1 0 · · · 0 0 0 ...

0

0 




RN ×(N +1) .

1 0





0 0 0 0 · · · -1 1

By introducing an auxiliary variable z = [z[1]T, . . . , z[N ]T]T  RN×2 with z[n] = q[n] - q[n -

1]  R1×2, n  N , constraint (13d) is equivalently expressed as

A1q = z, z  Z,

(24)

where Z = z  RN×2 z[n]  Vmax, n  N represents the feasible set of z. Besides,

constraint (13e) can be equivalently expressed as

A2q = qI ,

(25)

where A2 = [1, 0, 0, 0, · · · , 0, 0]  R1×(N+1). Similarly, by denoting

B1,k = diag 1, k[1], . . . , k[N ]  R(N+1)×(N+1),

(26)

B2,k = [qIT, wkT]T  R(N+1)×2,

(27)

constraint (22a) and constraint (22b) can respectively be equivalently expressed as

q[n] - B2,k[n]

2 2



P^k[n],

k



K,

n



N

,

(28)

B1,k(q - B2,k)

2 F

 P~k, k,

(29)

where B2,k[n]  R1×2 denotes the (n+1)-th row of matrix B2,k. To proceed, two sets of auxiliary

variables {k  R(N+1)×2, k  K} and {Vk  R(N+1)×2, k  K} are introduced such that

k = q, k  K,

(30)

Vk = B1,kq, k  K,

(31)

where k is a copy of the original trajectory vector q, and Vk represents the weighted trajectory

vector. To ease the notation, we define  k k  K , and V Vk k  K . Then

16

problem P1.3 can be equivalently expressed as
K

minimize q,,V ,z

B1,kq - B1,kB2,k

2 F

k=1

subject to k = q, k  K,

Vk = B1,kq, k  K,

0  k[n] - B2,k[n] 2  P^k[n], k  K, n  N ,

Vk - B1,kB2,k

2 F

 P~k, k  K,

A1q = z,

z  Z,

(32a) (32b) (32c) (32d) (32e) (32f)

A2q = qI ,

(32g)

where k[n]  R1×2 denotes the (n + 1)-th row of matrix k.

We define the feasible regions of constraints (32c), (32d), and (32g) as C, D, and Q, respec-

tively. Thus, we obtain the equivalent ADMM reformulation of problem P1.3 as
K

minimize ,V ,q,z

B1,kq - B1,kB2,k

2 F

+

IC() + ID(V ) + IZ (z) + IQ(q)

k=1

subject to constriants (32a), (32b), (32e),

(33)

where IX (x) is the indicator function for the feasible region of X , which is given by

  0, if x  X ,

IX (x) =

(34)

+, otherwise.

Then, the augmented Lagrangian (using the scaled dual variables) of problem (33) is given by

K

L(, V , z, q, , ,  )=

B1,kq - B1,kB2,k

2 F

+

IC() + ID(V ) + IZ (z) + IQ(q)

k=1

+ 1 K 2

k - q + k

2 F

+

2 2

K

Vk - B1,kq + k

2 F

+

3 2

z - A1q + 

2 F

,(35)

k=1

k=1

where 1, 2, and 3 are the penalty parameters, and  k  R(N+1)×2 k  K ,  k 

R(N+1)×2 k  K , and   RN×2 are the dual variables for constraints (32a), (32b), (32e),

respectively.

According to (35), we observe that the primal variables can be split into two blocks, i.e.,

{, V , z} and q, and the objective function is also separable along with this splitting. Therefore,

by adopting the ADMM, we can minimize L(, V , z, q, , ,  , ) by alternately updating the two blocks of primal variables. Note that the first block of variables {, V , z} can be decomposed

17
Algorithm 1: ADMM for Solving Problem P1.3 1: Input: The penalty parameters {1, 2, 3}. 2: Initialize: q0  qi, 0  0, 0  0,  0  0. Let j = 0. 3: repeat 4: Update the first block of variables {, V , z} {j+1, V j+1, zj+1} := arg min L(, V , z, qj, j, j, j).
,V ,z
5: Update the second block of variables q qj+1 := arg min L(j+1, V j+1, zj+1, q, j, j,  j).
q
6: Update the dual variables based on expressions (52), (53), and (54). 7: Set j = j + 1. 8: until convergene criterion is met. 9: Output: {, V , z, q, , ,  }.

into three independent problems, which are expressed as follows.

j+1 := arg min


IC ()

+

1 2

k - qj + j

2 F

k=1

,

(36)

V j+1 := arg min
V

ID(V

)

+

2 2

K

k=1

Vk - B1,kqj + kj

2 F

,

(37)

zj+1 := arg min
z

IZ (z)

+

3 2

z - A1qj +  j

2 F

.

(38)

In the j-th iteration, given {qj, j, j,  j}, the details of updating each variable are explained

as follows.

1)  Update: Problem (36) for updating  is equivalent to

K

minimize 

k - qj + jk

2 F

k=1

subject to 0  k[n] - B2,k[n] 2  P^k[n], k, n.

(39)

One can observe that problem (39) can be decomposed into KN convex subproblems, each of

which is a QCQP with only one constraint (QCQP-1), and thus is efficiently solvable. Specifically,

one for each n  N , k  K is given by

minimize
k [n]

k[n] - qj[n] + jk[n] 2

subject to 0  k[n] - B2,k[n] 2  P^k[n],

(40)

18

where jk[n]  R1×2 denotes the (n + 1)-th row of matrix jk. Problem (40) can be viewed as the Euclidean projection of the point qj[n] - jk[n] onto an Euclidean ball, centered at the point B2,k[n] with radius of P^k[n]. It is easily verified that the optimal solution of subproblem (40)

is given as the following closed form

 PC

qj[n] - j[n] - B2,k[n]

+ B2,k[n], k  K, n  N ,

k[n] =

(41)

qj[n], n = 0,

where PC(xk[n]) := min space C.

P^k[n] xk[n] , 1 xk[n] denotes the projector associated with the

2) V Update: Problem (37) for updating V is equivalent to the following problem

K

minimize V

Vk - B1,kqj + kj

2 F

k=1

subject to

Vk - B1,kB2,k

2 F

 P~k, k.

(42)

It is observed that problem (42) can be decomposed into K QCQP-1 subproblems. One for each

k  K is given by

minimize Vk

Vk - B1,kqj + kj

2 F

subject to

Vk - B1,kB2,k

2 F



P~k.

(43)

Similarly to problem (40), the optimal solution of problem (43) is given by

Vk = PD B1,kqj - kj - B1,kB2,k + B1,kB2,k,

(44)

where PD(Xk) := min P~k Xk F , 1 Xk denotes the projector associated with D.

3) z Update: The update of z in problem (38) is equivalent to solving the following problem

minimize z - A1qj +  j 2 z

subject to z[n]  Vmax, n  N .

(45)

Problem (45) can also be decomposed into N QCQP-1 subproblems. One for each n  N is

given by

minimize z[n] - qj[n] + qj[n - 1] +  j[n] 2
z[n]

subject to z[n]  Vmax,

(46)

where  [n] is the n-th row of  .

Similarly to problem (40), the optimal solution of problem (46) is obtained as

z[n] = PZ(qj[n] - qj[n - 1] -  j[n]),

(47)

where PZ(x) := min Vmax qj[n] - qj[n - 1] -  j[n] 2, 1 x denotes the projector associated with the space Z.

19

Algorithm 2: Proposed BCD-ADMM Algorithm for Solving Problem P 1: Input: T , K, {Pk}, {P¯k}, accuracy
2: Initialize: trajectory q0 and 0. Let i = 0.

3: repeat

4: Set i = i + 1.

5: Given qi-1 and i-1, solve P1.1 to update i based on (17).

6: Given qi-1 and i, solve P1.2 to update i based on (21).

7: Given i and i, solve P1.3 to update qi based on Algorithm 1.

8:

until

The

relative

decrease

MSEi-1-MSEi MSEi

<

.

9: Output: , , and q.

4) q Update: The update of q is rewritten as the following linearly constrained QP problem

minimize q

K

B1,kq - B1,kB2,k

2 F

+

1 2

K

k - q + k

2 F

k=1

k=1

+ 2 K 2

Vk - B1,kq + k

2 F

+

3 2

z - A1q + 

2 F

k=1

subject to A2q = qI.

(48)

The solution to this least square problem with an affine constraint can be obtained based on the

orthogonal projection onto an affine subspace, whose closed form is given by

K

K

J=

2BT1,kB1,kB2,k + 1 jk+1 + jk +

2BT1,k Vkj+1 + kj + 3AT1 zj+1 +  j ,(49)

k=1

k=1

K

F = 1KI + (2 + 2)BT1,kB1,k + 3AT1 A1,

(50)

k=1

q = I - AT2 A2 F -1J + AT2 qI .

(51)

5) Lagrange Multipliers Update: The scaled dual variables are updated as

jk+1 := jk + jk+1 - qj+1, k  K,

(52)

kj+1 := kj + Vkj+1 - B1,kqj+1, k  K,

(53)

 j+1 :=  j + zj+1 - A1qj+1.

(54)

Up to now, the closed-form expressions for all the variables updating have been derived.

To be specific, the proposed ADMM algorithm for solving problem P1.3 is summarized in Algorithm 1. Note that Algorithm 1 is guaranteed to converge to an optimal solution of the convex

20
problem P1.3 for any initial point with the convergence rate of O(1/j) [30]. For Algorithm 1, the dominant computation is the matrix inversion for updating q in expression (51), whose complexity is O((N + 1)3). However, this operation only needs to be computed once during the iterative procedure of Algorithm 1.
D. Convergence and Complexity Analysis In the proposed BCD-ADMM method, we solve problem P by solving P1.1, P1.2, and
P1.3 alternately until convergence, whose details are summarized in Algorithm 2. Note that the solution q obtained in each iteration is used as the initial point of the next iteration for Algorithm 1. The convergence of Algorithm 2 is proved by the following proposition.
Proposition 4. The objective value of Problem P decreases as the number of iteration increases until convergence by applying Algorithm 2.
Proof. Please refer to Appendix C.
In the following, we investigate the complexity per iteration of Algorithm 2. Specifically, in step 5, the complexity for computing  is O(N ). In step 6, the complexity for computing  is O(KN ). In step 7, the complexity for computing q mainly lies in computing expression (51). Therein, the matrix inversion in (51) is computational intensive operation in Algorithm 1, with the complexity given by O((N + 1)3). It should be mentioned that the matrix inversion in (51) only needs to be computed once in Algorithm 1. In addition, the complexity for computing matrix multiplication in (51) is given by O((N + 1)2). Since N > K in this paper, the total complexity of our proposed algorithm is thus dominated by O((N + 1)2) in each iteration. By comparison, the complexity in the conventional BCD-SCA method [1] for computing q is given by O(K1.5N 3.5) . In summary, the proposed BCD-ADMM algorithm significantly reduces the computational complexity in each iteration.
IV. NUMERICAL RESULTS In this section, we present the numerical results to demonstrate the effectiveness of the proposed algorithm. The service region of the UAV is limited to be a square area with the size of [0, 400] m × [0, 400] m. The UAV is assumed to fly at a fixed altitude of H = 100 m, which complies with the practical rule, i.e., the commercial UAVs should not fly over 400 feet (122 m) [39]. Additionally, we consider a heterogeneous sensor network, where K = 50 sensors

21

TABLE I PARAMETER SETTINGS FOR SIMULATIONS.

Number of sensors Peak power budget Average power budget Noise power Time slot length

K = 50

PA = 10 dBm, PB = 7 dBm

P¯k

=

1 2

Pk

2 = -80 dBm

 = 0.2 s

UAV altitude

H = 100 m

Maximum UAV speed

Vmax = 20 m/s

Initial horizontal location of UAV qI = (200, 0) m

Channel gain at reference distance 0 = -40 dB

Accuracy of Algorithm 2

= 10-3

are separated into two clusters, i.e., cluster A with 15 sensors and cluster B with 35 sensors. The peak powers of sensors in clusters A and B are denoted as PA and PB, respectively. To investigate the performance of the BCD-ADMM algorithm, we consider a simplified mobility model to account for time-varying locations of the sensors, as in [31]. In particular, instead of considering a certain mobility model for individual sensors, we assign different traces for two clusters. Following the trace, the center of each cluster continuously changes within the service region during mission duration T . Specifically, the initial locations of the sensors in cluster A and cluster B are randomly and uniformly distributed in a circle centered at (50, 100) m and (350, 150) m with a radius of 50 m, respectively. The cluster centers move at random directions and constant speeds that follow uniform distributions within the intervals [0, ] and [1, 8] m/s, respectively. Note that the proposed approach can be applied to other mobility models as long as the speeds of the sensors are lower than that of the UAV such that the sensors' locations can be considered invariant within one time slot.
We compare the proposed BCD-ADMM algorithm with the following benchmarks. · BCD-SCA: The BCD-SCA algorithm [1] jointly optimizes , p, and q to solve Problem
(13), wherein SCA is adopted to approximate the non-convex trajectory design subproblem as a convex QCQP problem that can be efficiently solved by using modeling framework CVX and interior-point solvers (e.g., SDPT3). · Trajectory optimization without transmit power control (TO w/o PC): As considered in [1], the TO w/o PC algorithm optimizes  and q with constant transmit powers p, i.e., pk[n] = P¯k, k, n. · Static UAV: In this scheme, the UAV is placed at the predetermined initial position (200, 0, 100) m and remains static. This scheme optimizes  and  by solving problems P1.1 and P1.2 iteratively until convergence. · Fly-hover with power control (Fly-hover w/ PC): The Fly-hover w/ PC algorithm designs

22

100 10-1 10-2 10-3 10-4 10-5 10-6 10-7
0

50

100

150

200

250

300

100

10-1

10-2

10-3 0

10 20 30 40 50 60 70 80 90 100

Fig. 2. Convergence behavior of ADMM algorithm in the inner loop.

Fig. 3. Convergence behavior of BCD algorithm in the outer loop.

the UAV trajectory in the following best-effort manner. If time allows, the UAV flies

straightly at its maximum speed to reach over the point of the sensors' geometric center of

the last time slot and then remains static. Otherwise, it will fly straightly at its maximum

speed to reach over a point which is on the line between the UAV initial location and

the sensors' geometric center of the last time slot. Given the trajectory, the Fly-hover

w/ PC algorithm optimizes  and  by solving problems P1.1 and P1.2 iteratively until

convergence. The initial transmit power is pk[n] = P¯k, k, n. The initial trajectory for BCD-ADMM, BCD-

SCA, and TO w/o PC are generated by using the Fly-hover w/ PC algorithm, unless specified

otherwise. For the BCD-based algorithms, the iterative procedure stops when the relative decrease

of the objective is smaller than 10-3 (i.e., (MSEi-1-MSEi)/MSEi  10-3) or a maximum of 100

iterations is reached, where MSEi denotes the objective value of the i-th iteration. The penalty







parameters in Algorithm 1 are set as 1 = 8/ K, 2 = 8/ K, and 3 = 20/ K, which are

empirically found to work well. The convergence criteria of ADMM are set as the absolute tolerance abs = 10-4 and relative tolerance rel = 10-4. Other parameters are summarized in

Table I (if not specified otherwise).

A. Convergence Behavior and Complexity Comparison
We first demonstrate the convergence behavior of the proposed BCD-ADMM algorithm. The algorithm involves an inner-loop iteration for ADMM to solve Problem P1.3 and an outer-loop iteration for BCD to solve Problem P, whose convergences are illustrated in Fig. 2 and Fig. 3, respectively.

23

2000

1800

1600

1400

1200

1000

800

600

400

200

0

25

35

45

55

1200

1000

800

600

400

200

0

40

45

50

55

Fig. 4. Simulation time versus the mission duration T .

Fig. 5. Simulation time versus the number of sensors K.

In Fig. 2, the relative error in each iteration is defined as |aj - a |/a , where aj is the objective value of the j-th iteration in Algorithm 1 and a is the optimal objective value of problem P1.3 by using the interior-point method. From Fig. 2, it is seen that the proposed ADMM algorithm converges to a high accuracy solution, e.g., 10-5, within 300 iterations for various values of T . Note that the ADMM is not guaranteed to converge monotonically, since qj is not generated to be feasible at each iteration [30]. From Fig. 3, it is observed that the proposed BCD-ADMM algorithm converges to a modest accuracy, e.g., 10-3, within 25 iterations for different values of T , while the BCD-SCA method needs about 60  100 iterations to achieve the same level of accuracy. This is because the proposed BCD-ADMM algorithm obtains the optimal solution of each subproblem, while the BCD-SCA method only optimizes the approximate lower bound of the trajectory subproblem by the SCA framework.

Next, we compare the computational complexity of different methods in terms of the simulation running time. Fig. 4 shows the simulation running times with different mission duration T . It is observed that as the mission duration T increases, the running time of BCD-ADMM grows slowly, while that of BCD-SCA dramatically rises up. Compared with the BCD-SCA method, the proposed BCD-ADMM method can speed up the running time about 10  35

times. This is because, for solving the trajectory optimization subproblem, the proposed ADMM

only requires arithmetic operations rather than the interior-point solvers (e.g., SDPT3) in the BCD-SCA method. Besides, the BCD-SCA method converges much slower than our proposed BCD-ADMM algorithm in the outer loop, as shown in Fig. 3.
Fig. 5 illustrates the complexity comparison with different number of sensors K when T = 50 s. Similar results as in the previous figure can be observed. It is also seen that the running

24

400

350

300

250

200

Cluster A

Cluster B

150

100

50

0

0

50

100 150 200 250 300 350 400

26

25

24

23

22

21

20

0

5 10 15 20 25 30 35 40 45 50

Fig. 6. UAV trajectories for different algorithms when T = 50 s.

Fig. 7. Total transmit power consumption for different algorithms.

time of the proposed BCD-ADMM method is about 10  20 shorter than the BCD-SCA method.

B. Comparison of Different Trajectory Designs
Fig. 6 shows the trajectories of the UAV by applying different methods when mission duration T = 50 s. Each trajectory is sampled every three seconds. In this experiment, cluster A moves with a constant speed of 5 m/s and at an angle of /2, while cluster B is moving with a constant speed of 5 m/s and at an angle of 2/3. Therein, navy blue solid lines with represent the traces of the cluster centers (along which the sensor distribution is updated). The locations of sensors at t = 0 s and at t = 50 s are marked by blue . The initial location of the UAV is marked by red .
It is observed that for all algorithms, the UAV flies along an arc path. The main reason for this arc path is that, all links' channel conditions depend on the UAV's location at each time slot. The closer the UAV flies to one particular sensor, the farther it is away from some other sensors in general. It is also observed that the trajectories generated by the proposed BCD-ADMM algorithm, the benchmark TO w/o PC, and the BCD-SCA algorithm differ significantly. To unveil the difference in trajectories obtained by these algorithms and the reasons for such difference, we plot the corresponding sum transmit power of sensors over time slots, as shown in Fig. 7. We observe that the proposed BCD-ADMM algorithm renders the UAV to move sufficiently close to the sensors to save their transmit power. Furthermore, the optimized trajectory is closer to cluster B with a lower sensor transmit power budget (PB = 7 dBm) as compared to cluster A (PA = 10 dBm). This demonstrates that, for the case of unequal transmit power budgets, the proposed BCDADMM algorithm can efficiently strike a balance between minimizing communication distance

25

10-4

10-2

10

9

8

7
10-3 6

5

4

10-4

3

20

30

40

50

60

70

80

90

100

Fig. 8. Time-averaged MSE versus mission duration T .

10-5

-95

-90

-85

-80

-75

-70

Fig. 9. Time-averaged MSE versus noise power 2.

and the sensors' transmit power, thereby enhancing the performance of AirComp. However, for the benchmark TO w/o PC with constant transmit power, the UAV cannot perfectly track the sensors' mobility, resulting in a less effective trajectory. Additionally, for T < 25 s, the BCD-SCA algorithm decreases the sensors' transmit power, while the optimized trajectory of UAV is similar to that of BCD-ADMM. However, when T > 25 s, different from the BCDADMM algorithm, the BCD-SCA algorithm opts to increase the sensors' transmit power instead of shortening distances between the sensors and the UAV. As a result, the BCD-SCA algorithm has to use a higher transmit power as compared to the BCD-ADMM algorithm.

C. Performance Comparison of Different Algorithms
Fig. 8 shows the time-averaged MSE of different algorithms versus different values of mission duration T . It is observed that the time-averaged MSE achieved by the static UAV scheme increases with T . This is because the sensors move farther away from their initial positions as T increases, which in turn leads to worse channel conditions. In contrast, as shown in other four curves, by exploiting UAV mobility to track the movement of sensors, the time-averaged MSE is reduced compared to the static UAV scenario. Furthermore, the joint design schemes (i.e., BCDSCA and BCD-ADMM) have a smaller time-averaged MSE than the TO w/o PC algorithm. This is because these joint design schemes strike a better balance between minimizing links' distances and sensors' transmit power by fully exploiting the synergy of trajectory design and power control, while the inefficient usage of transmit power in the TO w/o PC algorithm results in less efficient trajectory of the UAV which in turn degrades the performance of AirComp. It can also be observed that the joint design schemes outperform the heuristic trajectory algorithm

26
(i.e., Fly-hover w/ PC), especially when the mission duration is long. All the above results illustrate the importance and necessity of the joint design in minimizing the time-averaged MSE for AirComp. Additionally, it is found that the proposed BCD-ADMM algorithm further achieves performance improvement. This is because the proposed method obtains the optimal solution of each subproblem, while the BCD-SCA method only optimizes the approximate lower bound of the trajectory problem based on the SCA technique.
Fig. 9 shows the robustness of different algorithms against noise power when T = 50 s. It is observed that the time-averaged MSE achieved by all algorithms rises up with the noise power since transmit powers at the sensors are limited. Interestingly, in a relatively lower noise power region, the TO w/o PC algorithm achieves the worst performance compared to other four algorithms with power control. This is because when the noise power is small, a smaller normalizing factor is required for suppressing the noise-induced error, as demonstrated in Remark 2 of Section III. Consequently, from Proposition 3, the required power for aligning the signals will be varied with normalizing factors. In contrast, using a constant power strategy will cause a increased signal misalignment error. These results suggest that for the case with a relatively lower noise power, it is important to adopt a power control strategy for reducing the time-averaged MSE. What's more, we can observe that the proposed algorithm outperforms other four benchmarks for different noise power values. This demonstrates that the proposed algorithm is robust to noise power variations.
V. CONCLUSION We studied the time-averaged MSE minimization problem in a UAV-aided AirComp system with mobile sensors, taking into account the UAV trajectory design, receive normalizing factors optimization at the UAV, and transmit power control at the sensors. By introducing a novel variable transformation and applying the BCD technique, the equivalently reformulated problem can be reduced to a convex subproblem. We derived the optimal closed-form expressions for intermediate variables and normalizing factors. Furthermore, the convex QCQP subproblem of trajectory design was reformulated in an ADMM form to reduce the computational complexity. Simulation results demonstrated the superiority of the proposed low-complexity algorithm in minimizing time-averaged MSE and reducing the simulation time compared to the existing algorithms. This initial investigation demonstrated the effectiveness of deploying an UAV to assist AirComp for data aggregation applications. For future studies, the joint design framework

27

developed in this paper can be extended to more general scenarios with multiple cooperative UAVs and in the presence of ground BSs, while taking into account the prediction errors on the movement of sensors for practical implementation.

APPENDIX

A. Proof of Proposition 1

For each n  N , k  K, each term bk[n]hk[n]/[n] - 1 2 in (11) follows that

2

bk[n]hk[n] - 1 = bk[n]hk[n] 2 + 1 - 2R bk[n]hk[n]

[n]

[n]

[n]

 |bk[n]|2|hk[n]|2/|[n]|2 + 1 - 2|bk[n]||hk[n]|/|[n]|,

(55)

where the equality holds only when bk[n]hk[n]/[n] is real and non-negative. Therefore, with any given amplitudes of {bk[n]}, {[n]}, and {hk[n]}, the MSE attains the minimum only when each term bk[n]hk[n]/[n], n, k is real and non-negative. This completes the proof.

B. Proof of Proposition 3

By setting the first derivative of L({k[n]}, {n}, ) w.r.t. k[n] to zero as follows

L = 1 + n +  -

1

= 0,

k[n] 2[n] |hk[n]|2

k[n][n]

(56)

we obtain

k[n] =

[n]|hk[n]|2

2
.

|hk[n]|2 + (n + )2[n]

(57)

If n > 0 holds, the peak power constraint of sensor k at time slot n must be tight at the

optimality due to the complementary slackness condition, i.e.,

n

k[n] |hk[n]|2

-

Pk

= 0.

(58)

Thus, from (57) and (58), we obtain

k[n] =

[n]|hk[n]|2 |hk[n]|2 + (n + )2[n]

2
= Pk|hk[n]|2.

(59)

Furthermore, when n > 0, it is easily verified that

[n]|hk[n]|2 |hk[n]|2 + (n + )2[n]

2
<

[n]|hk[n]|2 |hk[n]|2 + 2[n]

2
< 2[n].

(60)

Therefore, when n > 0 holds, we have

k[n] = Pk|hk[n]|2 <

[n]|hk[n]|2

2
< 2[n].

|hk[n]|2 + 2[n]

(61)

While if n = 0 holds, by substituting n = 0 into (57), we obtain that

 

2[n],

if

=0



k[n] =
 

[n]|hk[n]|2 |hk[n]|2 + 2[n]

2
, otherwise.

(62)

28

Furthermore, if n = 0 holds, due to the primal feasibility condition, the peak power constraint

of sensor k at time slot n must be satisfied with the following inequality at the optimality,

k[n] |hk[n]|2

-

Pk

 0  k[n]  Pk|hk[n]|2.

(63)

To sum up, from (61), (62), and (63), the optimal k[n] is given by

  min

2[n], Pk hk[n] 2

,

if  = 0



k[n] =

 

min

[n]|hk[n]|2 |hk[n]|2 +  2[n]

2
, Pk|hk[n]|2

, otherwise,

(64)

where  is a constant that ensures the average power constraint

N n=1

k[n]/|hk[n]|2

=

N P¯k

to

satisfy the complementary slackness condition when  > 0, i.e.,



N n=1

k[n] |hk[n]|2

-

N Pk

= 0.

(65)

Furthermore, if  = 0 holds, due to the primal feasibility condition, the average power constraint

of sensor k must be satisfied with the following inequality at the optimality,

N k[n] n=1 |hk[n]|2

-

N P¯k



0



N n=1

min

2[n] hk[n] 2 , Pk

 N P¯k.

(66)

In summary, the optimal solution of problem (19) is



 

min





k[n] =

  

min



2[n], Pk|hk[n]|2 , if min

2[n] |hk[n]|2 , Pk

 N P¯k,

[n]|hk[n]|2 |hk[n] 2 +  2[n]

2
, Pk|hk[n]|2

, otherwise.

This thus completes the proof.

C. Proof of Proposition 4

We denote f , , q as the objective value of P for a feasible solution , , q . As shown

in step 7 of Algorithm 2, a feasible solution of problem P1.3 (i.e., i, i, qi ) is also feasible to problem P1.1 and problem P1.2. We denote i, i, qi and i+1, i+1, qi+1 as a feasible solution of P at the i-th and (i + 1)-th iterations, respectively.

Since for given i, qi as shown in step 5 of Algorithm 2, i+1 is the optimal solution to

problem P1.1, we have

f i, i, qi  f i+1, i, qi .

(67)

Similarly, since for given i+1, qi as shown in step 6 of Algorithm 2, i+1 is the optimal solution

to problem P1.2, it follows that

f i+1, i, qi  f i+1, i+1, qi .

(68)

Besides, we have

f i+1, i+1, qi+1 = f i+1, i+1, qi .

(69)

29

This holds because the original objective function f is independent of q but depends on  and

. Based on (67), (68), and (69), we further obtain

f i+1, i+1, qi+1  f i, i, qi ,

(70)

which shows that the objective value of problem P is always decreasing over iterations. There-

fore, the proposed BCD-ADMM algorithm converges. This thus completes the proof.

REFERENCES
[1] M. Fu, Y. Zhou, Y. Shi, T. Wang, and W. Chen, "UAV-assisted over-the-air computation," in Proc. IEEE Int. Conf. Commun. (ICC), Montreal, Canada, Jun. 2021.
[2] S. Savazzi, M. Nicoli, M. Bennis, S. Kianoush, and L. Barbieri, "Opportunities of federated learning in connected, cooperative, and automated industrial systems," IEEE Commun. Mag., vol. 59, no. 2, pp. 16­21, Feb. 2021.
[3] M. Goldenbaum and S. Stanczak, "Robust analog function computation via wireless multiple-access channels," IEEE Trans. Commun., vol. 61, no. 9, pp. 3863­3877, Sept. 2013.
[4] M. Goldenbaum, H. Boche, and S. Stanczak, "Harnessing interference for analog function computation in wireless sensor networks," IEEE Trans. Signal Process., vol. 61, no. 20, pp. 4893­4906, Oct. 2013.
[5] K. B. Letaief, W. Chen, Y. Shi, J. Zhang, and Y.-j. A. J. A. Zhang, "The roadmap to 6G: AI empowered wireless networks," IEEE Commun. Mag., vol. 57, no. 8, pp. 84­90, Aug. 2019.
[6] Y. Shi, K. Yang, T. Jiang, J. Zhang, and K. B. Letaief, "Communication-efficient edge AI: Algorithms and systems," IEEE Commun. Surv. Tutorials, vol. 22, no. 4, pp. 2167­2191, 2020.
[7] F. Molinari, N. Agrawal, S. Stanczak, and J. Raisch, "Max-consensus over fading wireless channels," IEEE Trans. Control Netw. Syst., Feb. 2021, doi:10.1109/TCNS.2021.3050330.
[8] G. Zhu, J. Xu, K. Huang, and S. Cui, "Over-the-air computing for wireless data aggregation in massive IoT," arXiv preprint arXiv:2009.02181, 2020.
[9] W. Liu, X. Zang, Y. Li, and B. Vucetic, "Over-the-air computation systems: Optimization, analysis and scaling laws," IEEE Trans. Wireless Commun., vol. 19, no. 8, pp. 5488­5502, Aug. 2020.
[10] X. Cao, G. Zhu, J. Xu, and K. Huang, "Optimized power control for over-the-air computation in fading channels," IEEE Trans. Wireless Commun., vol. 19, no. 11, pp. 7498­7513, Nov. 2020.
[11] L. Chen, X. Qin, and G. Wei, "A uniform-forcing transceiver design for over-the-air function computation," IEEE Wireless Commun. Lett., vol. 7, no. 6, pp. 942­945, Dec. 2018.
[12] K. Yang, T. Jiang, Y. Shi, and Z. Ding, "Federated learning via over-the-air computation," IEEE Trans. Wireless Commun., vol. 19, no. 3, pp. 2022­2035, Mar. 2020.
[13] X. Li, G. Zhu, Y. Gong, and K. Huang, "Wirelessly powered data aggregation for IoT via over-the-air function computation: Beamforming and power control," IEEE Trans. Wireless Commun., vol. 18, no. 7, pp. 3437­3452, Jul. 2019.
[14] L. Chen, N. Zhao, Y. Chen, F. R. Yu, and G. Wei, "Over-the-air computation for IoT networks: Computing multiple functions with antenna arrays," IEEE Internet Things J., vol. 5, no. 6, pp. 5296­5306, 2018.
[15] D. Wen, G. Zhu, and K. Huang, "Reduced-dimension design of MIMO over-the-air computing for data aggregation in clustered IoT networks," IEEE Trans. Wireless Commun., vol. 18, no. 11, pp. 5255­5268, Nov. 2019.
[16] G. Zhu and K. Huang, "MIMO over-the-air computation for high-mobility multimodal sensing," IEEE Internet Things J., vol. 6, no. 4, pp. 6089­6103, Aug. 2019.

30
[17] T. Jiang and Y. Shi, "Over-the-air computation via intelligent reflecting surfaces," in Proc. IEEE Glob. Commun. Conf., Waikoloa, Hawaii, Dec. 2019.
[18] Z. Wang, Y. Shi, Y. Zhou, H. Zhou, and N. Zhang, "Wireless-Powered Over-the-Air Computation in Intelligent Reflecting Surface-Aided IoT Networks," IEEE Internet Things J., vol. 8, no. 3, pp. 1585­1598, Feb. 2021.
[19] X. Yuan, Y. J. Angela Zhang, Y. Shi, W. Yan, and H. Liu, "Reconfigurable-intelligent-surface empowered wireless communications: Challenges and opportunities," IEEE Wireless Commun., 2021, doi: 10.1109/MWC.001.2000256.
[20] M. Fu, Y. Zhou, Y. Shi, and K. B. Letaief, "Reconfigurable intelligent surface empowered downlink non-orthogonal multiple access," IEEE Trans. Commun., 2021. doi: 10.1109/TCOMM.2021.3066587.
[21] Y. Zeng, Q. Wu, and R. Zhang, "Accessing from the sky: A tutorial on UAV communications for 5G and beyond," Proc. IEEE, vol. 107, no. 12, pp. 2327­2375, Mar. 2019.
[22] H. Zhang, J. Zhang, and K. Long, "Energy efficiency optimization for NOMA UAV network with imperfect CSI," IEEE J. Sel. Areas Commun., vol. 38, no. 12, pp. 2798­2809, Dec. 2020.
[23] Y. Zeng and R. Zhang, "Energy-efficient UAV communication with trajectory optimization," IEEE Trans. Wireless Commun., vol. 16, no. 6, pp. 3747­3760, Jun. 2017.
[24] Q. Wu, Y. Zeng, and R. Zhang, "Joint trajectory and communication design for multi-UAV enabled wireless networks," IEEE Trans. Wireless Commun., vol. 17, no. 3, pp. 2109­2121, Mar. 2018.
[25] C. Zhan and Y. Zeng, "Completion time minimization for multi-UAV-enabled data collection," IEEE Trans. Wireless Commun., vol. 18, no. 10, pp. 4859­4872, Oct. 2019.
[26] Y. Xu and W. Yin, "A block coordinate descent method for regularized multiconvex optimization with applications to nonnegative tensor factorization and completion," SIAM J. Imag. Sci., vol. 6, no. 3, pp. 1758­1789, 2013.
[27] B. R. Marks and G. P. Wright, "A general inner approximation algorithm for nonconvex mathematical programs," Operations research, vol. 26, no. 4, pp. 681­683, Jul. 1978.
[28] M. Grant and S. Boyd, CVX: Matlab software for disciplined convex programming, version 2.1, Mar. 2014. [29] Y. Shi, J. Zhang, K. B. Letaief, B. Bai, and W. Chen, "Large-scale convex optimization for ultra-dense cloud-RAN," IEEE
Wireless Commun., vol. 22, no. 3, pp. 84­91, Jun. 2015. [30] D. P. Bertsekas and J. N. Tsitsiklis, Parallel and Distributed Computation: Numerical Methods, New York, NY, USA:
Athena Scientific, 1997. [31] R. Zhang, M. Wang, L. X. Cai, and X. Shen, "Learning to be proactive: Self-regulation of UAV based networks with UAV
and user dynamics," IEEE Trans. Wireless Commun., Feb. 2021, doi: 10.1109/TWC.2021.3058533. [32] X. Liu, Y. Liu, and Y. Chen, "Machine learning empowered trajectory and passive beamforming design in UAV-RIS
wireless networks," IEEE J. Sel. Areas Commun., Dec. 2020, doi: 10.1109/JSAC.2020.3041401. [33] C. Shen, T.-H. H. Chang, J. Gong, Y. Zeng, and R. Zhang, "Multi-UAV interference coordination via joint trajectory and
power control," IEEE Trans. Signal Process., vol. 68, pp. 843­858, Jan. 2020. [34] H. Tang, Q. Wu, J. Xu, W. Chen, and B. Li, "A novel alternative optimization method for joint power and trajectory design
in UAV-enabled wireless network," IEEE Trans. Veh. Techn., vol. 68, no. 11, pp. 11 358­11 362, Nov. 2019. [35] I. Qualcomm Technologies, LTE unmanned aircraft systems, San Diego, CA, USA, Trial report v.1.0.1, 2017. [36] U. Mengali and A. N. D'Andrea, Synchronization Techniques for Digital Receivers, New York, NY, USA: Springer, 1997. [37] Y. Shi, J. Zhang, and K. B. Letaief, "Group sparse beamforming for green cloud-RAN," IEEE Trans. Wireless Commun.,
vol. 13, no. 5, pp. 2809­2823, May 2014. [38] W. Chen, L. Dai, K. B. Letaief, and Z. Cao, "A unified cross-layer framework for resource allocation in cooperative
networks," IEEE Trans. Wireless Commun., vol. 7, no. 8, pp. 3000­3012, Aug. 2008. [39] FAA, Summary of small unmanned aircraft rule, Washington, DC: Federal Aviation Administration, 2016.

