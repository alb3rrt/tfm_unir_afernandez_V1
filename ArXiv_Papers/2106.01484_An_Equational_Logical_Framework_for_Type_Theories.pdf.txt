arXiv:2106.01484v1 [math.LO] 2 Jun 2021

An Equational Logical Framework for Type Theories
Robert Harper
June 4, 2021
1 Introduction
A logical framework is language for defining logical systems, in particular type theories. The definition of a logical system consists of a collection of generators of the objects that populate a collection of classifying sorts, and a collection of equations that identify objects of those sorts. The generators specify the sorts and objects that constitute the logical system--say, the sort of types and, for each type, the sort of its elements, and for each sort of element, the objects that are its members. The sorts and objects include the syntactic entities of the logical system--say, the types and their elements--and are specified using higher-order abstract syntax to express the binding and scopes of variables (Harper et al., 1993). They also include the deductive apparatus of a logic--its basic, hypothetical, and general judgments, and the evidence for them (Martin-Löf, 1987)--and these are also specified using higher-order representations (Harper et al., 1993).
The native equality of the framework is a congruence--an equivalence relation compatible with the generators--and defines substitution of objects for variables in another object. The defining equations of a logical system enrich the native equality to specify the behavior of the represented objects--such as the inversion and unicity properties of type constructors or connectives. The integration of the defining equations with the native equations of the framework constrains the meaning of the defined system within the framework in the sense that any interpretation must obey the specified laws. There being no limitations on the nature of these equations, the enriched equality judgment of the framework may or may not be (feasibly or infeasibly) decidable. A syntactic logical framework (Harper et al., 1993) is one that presents a logical system using only generators, and no relations, so that the induced equational theory is the native one, which is decidable. A semantic logical framework (Smith et al., 1990; Uemura, 2019) admits the specification of an equational theory that may not be (feasibly) decidable. Each logical system is a problem of its own, and it is in general difficult to transfer results from one case to another.
This note defines a semantic logical framework suitable for defining a broad--but by no means comprehensive--class of logical systems, including full-scale dependent type theories. It is a dependently typed language with a single Russellian universe of sorts, an extensional equality types governing the objects of a sort, and closed under the formation of dependent function types. The definition of a logical system is a form of context, called a signature, that specifies generators that populate the sorts and the equality types that govern them. The adequacy of a signature expresses the intended correspondence between the components of the represented logical system and their counterpart objects in the logical framework.
Acknowledgement I am grateful to Jon Sterling and Carlo Angiuli for many discussions about this paper, and to James Andrews and Anja Petkovi for corrections.
1

Variables X, x
Classes K, S ::= S | Sort | {X : S1} K2 | O1 =S O2 Objects O, S ::= X | · | {X : S1} S2 | [X : S1] O2 | O O1 Contexts  ::=  |  , X:K

 ctx
  K cls O:K
  K = K cls   O = O : K

Figure 1: Abstract Syntax of LF
 is a context K is a class in context  O is an object of class K in context  K and K are equal classes in context  O and O are equal objects of class K in context 
Figure 2: Judgment Forms of LF

2 A Logical Framework
The syntax of the logical framework LF is given in Figure 1. It is a dependently typed -calculus with the structure specified in the introduction. The types of LF are called classes, K or S, and their elements are called objects, O or S.1 The notation is inspired by AUTOMATH, using square brackets for -abstraction, curly braces for -types, and juxtaposition for application. The binding and scopes of identifiers are understood; all classes and objects are identified up to renaming of bound variables. Substitution of an object for a variable within a class is defined in the usual way up to such renamings.
LF uses dependent function classes to define the hypothetico-general judgment form that is central to the definition of many logical systems. It uses (extensional) equality classes as a convenient way to present equational theories, and it uses the objects of class Sort for the syntactic categories of a logical system. It is itself defined in the conventional manner in terms of the hypothetico-general judgment forms given in Figure 2.
A signature  is a context. The variables declared in a signature are written C and c to suggest their role as constants, or generators. The specialization of the judgment forms of LF to a particular signature  are defined in Figure 3 using concatenation of contexts, which is defined in the evident manner.
The rules defining the LF judgment forms are given in Figures 4, 5, and 6 which are to be understood as constituting one simultaneous inductive definition. Rule incl specifies that every sort is itself a class; the class Sort is thus formulated as a Russellian universe of "small" classes. Rule pi, and associated rules lam and app, are restricted to require that S1 be a sort, rather than a general class,2 and, similarly, equality classes are limited to equations between objects of a sort. The class Sort is required to be closed under dependent function sorts. Rule eq defines the class of equations between objects of a sort; rule self specifies that every object is equal to itself. Rules obj-cls and obj-eq-cls specifies that equal classes classify the same objects. Rules app-lam and lam-app specify the inversion principles governing abstraction and application. Rule reflection specifies that the equality class internalizes equality, and rule unicity specifies that an equation is "at most
1The double role of the meta-variable S will be explained shortly. 2But variables are nevertheless permitted to range over classes.

2

 sig

 ctx

 ctx
  K cls   O : K
  K = K cls   O = O : K

  ctx
   K cls   O : K
   K = K cls    O = O : K

Figure 3: Specialized Judgment Forms of LF

true," there being no distinction between two objects witnessing its truth. Lemma 1 (Presuppositions). 1. If   K cls, then  ctx, and if   K = K cls, then
  K cls and   K cls. 2. If   O : K, then   K cls, and if   O = O : K, then   O : K and   O : K. Lemma 2 (Weakening). Suppose that 2 ctx1. 1. If 1  K cls, then 1 2  K cls, and if 1  K = K cls, then 1 2  K = K cls. 2. If 1  O : K, then 1 2  O : K, and if 1  O = O : K, then 1 2  O = O : K. Lemma 3 (Substitution). Let  1 X:K1 2, and suppose that  ctx and 1  O1 : K1. 1. If   K2 cls, then 1 [O1/X]2  [O1/X]K2 cls, and similarly for class equality. 2. If   O2 : K2, then 1 [O1/X]2  [O1/X]O2 : [O1/X]K2, and similarly for object equality. Lemma 4 (Functionality). Let  1 X:K1 2, and suppose that  ctx and 1  O1 = O1 : K1. 1. If   K2 cls, then 1 [O1/X]2  [O1/X]K2 = [O1 /X]K2 cls. 2. If   O2 : K2, then 1 [O1/X]2  [O1/X]O2 = [O1 /X]O2 : [O1/X]K2,

3 Two Type Theories
The benefit of a logical framework is that it permits the concise specification of type theories as a signature.
3.1 Gödel's T
The signature T defining Gödel's System T is given in Figure 7. The specifications are verbose, but an implementation would eliminate much of the redundancy.
3

sort  ctx
  Sort cls

incl   S : Sort
  S cls

pi-cls   S1 : Sort

 , X:S1  K2 cls

  {X : S1} K2 cls

eq-cls   S : Sort   O1 : S   O2 : S
  O1 =S O2 cls

pi-sort   S1 : Sort

 , X:S1  S2 : Sort

  {X : S1} S2 : Sort

app   O : {X : S1} K2

  O1 : S1

  O O1 : [O1/X]K2

lam   S1 : Sort

 , X:S1  O2 : K2

  [X : S1] O2 : {X : S1} K2

self O:S
  · : O =S O

Figure 4: Formation Judgments

emp  ctx

snoc   K cls
 , X:K ctx

var 1 X:K 2 ctx
1 X:K 2  X : K

cls-rfl   K cls
  K = K cls

cls-st   K = K cls

  K = K cls

  K = K cls

obj-rfl O:K
O=O:K

obj-st   O = O : K

  O = O : K

  O = O : K

obj-cls O:K

  K = K cls

  O : K

obj-eq-cls   O = O : K

  K = K cls

  O = O : K

Figure 5: Structural Judgments

4

incl-eq   S = S : Sort
  S = S cls

pi-class-eq   S1 = S1 : Sort  , X:S1  K2 = K2 cls
  {X : S1} K2 = {X : S1 } K2 cls

eq-class-eq   S = S : Sort   O1 = O1 : S   O2 = O2 : S
  O1 =S O2 = O1 =S O2 cls

pi-sort-eq   S1 = S1 : Sort  , X:S1  S2 = S2 : Sort
  {X : S1} S2 = {X : S1 } S2 : Sort

lam-eq   S1 = S1 cls  , X:S1  O2 = O2 : K2   [X : S1] O2 = [X : S1 ] O2 : {X : S1} K2

app-eq   O = O : {X : S1} K2   O1 = O1 : S1
  O O1 = O O1 : [O1/X]K2

app-lam  , X:S1  O2 : K2

  O1 : S1

  ([X : S1] O2) O1 = [O1/X]O2 : [O1/X]K2

lam-app   O : {X : S1} K2
  O = [X : S1] (O X) : {X : S1} K2

reflection   O : O1 =S O2
  O1 = O2 : S

unicity   O : O1 =S O2

  O : O1 =S O2

  O = O : O1 =S O2

Figure 6: Equality Judgments

5

tp : Sort el : tp  Sort nat : tp arr : tp  tp  tp zero : el nat succ : el nat  el nat rec : {A : tp} el A  (el nat  el A  el A)  el nat  el A nat--z : {A : tp} {b : el A} {s : el nat  el A  el A}
rec A b s zero =el A b nat--s : {A : tp} {b : el A} {s : el nat  el A  el A}
{n : el nat} rec A b s (succ n) =el A s n (rec A b s n) lam : {A1 : tp} {A2 : tp} (el A1  el A2)  el(arr A1 A2) app : {A1 : tp} {A2 : tp} el (arr A1 A2)  el A1  el A2 arr- : {A1 : tp} {A2 : tp} {F : el A1  el A2} {M1 : el A1}
app A1 A2 (lam A1 A2 F ) M1 =el A2 F M1 arr- : {A1 : tp} {A2 : tp} {M : el (arr A1 A2)}
M =el (arr A1 A2) lam A1 A2 ([x : el A1] app A1 A2 M x)
Figure 7: Signature of Gödel's T
6

tp : Sort el : tp  Sort
nat : tp pi : {A : tp} (el A  tp)  tp
zero : el nat succ : el nat  el nat
rec : {A : el nat  tp} {b : el (A zero)} {s : {m : el nat} el (A m)  el (A (succ m))} {n : el nat} el (A n)
nat--z : {A : el nat  tp} {b : el (A zero)} {s : {m : el nat} el (A m)  el (A (succ m))} rec A b s zero =el (A zero) b
nat--s : {A : el nat  tp} {b : el (A zero)} {s : {m : el nat} el (A m)  el (A (succ m))} {n : el nat} rec A b s (succ n) =el (A (succ n)) s n (rec A b s n)
lam : {A1 : tp} {A2 : el A1  tp} ({x : el A1} el (A2 x))  el(pi A1 A2) app : {A1 : tp} {A2 : el A1  tp} el (pi A1 A2)  {x : el A1} el (A2 x) pi- : {A1 : tp} {A2 : el A1  tp} {F : {x : el A1} el (A2 x)} {M1 : el A1}
app A1 A2 (lam A1 A2 F ) M1 =el (A2 M1) F M1 pi- : {A1 : tp} {A2 : el A1  tp} {M : el (pi A1 A2)}
M =el (pi A1 A2) lam A1 A2 ([x : el A1] app A1 A2 M x)
Figure 8: Signature of Dependent Gödel's T
3.2 Dependent T
The essence of dependent typing is to generalize from types to families of types indexed by types: if A : tp, then el (A)  tp is the class of A-indexed families of types. As a starting point, a reformulation of Gödel's T in the dependent setting is given in Figure 8. The main changes are to extend simple function types to dependent function types, and to generalize the recursor to eliminate into a nat-indexed family of result types. The fully explicit notation is burdensome, but can be abbreviated in an implementation to permit inference of omitted parameters and arguments.
Exercise 1. Formulate the dependent sum3 type, in two forms. The formation and introduction rules are the same for the two variants, sig A1 ([x : el A1] A2) and pair A1 A2 M1 M2. The negative variant takes as elimination forms the projections, fst A1 A2 M and snd A1 A2 M , with appropriate  equivalences. The positive variant takes as elimination form splitting, split A1 A2 B M1 M2 M , with appropriate  equivalences.
3aka product, alas
7

eq : {A : tp} el A  el A  tp self : {A : tp} {M : el A} el (eq A M M ) eqref : {A : tp} {M1, M2 : el A} el (eq A M1 M2)  M1 =el A M2 equni : {A : tp} {M1, M2 : el A} {M, M  : el (eq A M1 M2)} M =el (eq A M1 M2) M 
Figure 9: Dependent Equality Type
id : {A : tp} el A  el A  tp refl : {A : tp} {M : el A} el (id A M M )
j : {A : tp} {B : {m1 : el A} {m2 : el A} el (id A m1 m2)  tp} {r : {x : el A} el (B x x (refl A x))} {m : el A} {m : el A} {p : el (id A m m)} el (B m m p)
id- : {A : tp} {B : {m1 : el A} {m2 : el A} el (id A m1 m2)  tp} {r : {x : el A} el (B x x (refl A x))} {m : el A} j A B r m m (refl A m) =el (B m m (refl A m)) r m
Figure 10: Dependent Identity Type
3.3 Equality and Identity Types
Dependent types become interesting only when there are families of types, the principal examples of which are the extensional and intensional equality types. Their formulations are given in Figures 9 and 10. The elimination rule for the extensional equality type is the corresponding equality class whose elimination principle derives the corresponding equality judgment.4 It follows from this that equality at function type is extensional. The unicity rule for equality types states that any two objects of the same equality class are judgmentally equal; that is, equality classes are "at most true" in that the evidence is immaterial beyond its existence. The intensional identity type has the same formation and introduction rules, but has a different elimination rule expressing that the identity type is the least reflexive relation on the elements of a type. It is said to be intensional because it does not validate function extensionality.
3.4 Tarskian Universes
To add a cumulative hierarchy of universes requires that LF be extended with a class of natural numbers, written Lvl, with elements 0 and i + 1 for i : Lvl. A Tarskian formulation of universes is given in Figure 11. Each u i is a universe whose elements a are type codes whose extension as a type is ext i a. Cumulativity is expressed by sending a in u i to  i a in u (i + 1). The extension of each of the type codes is defined by equations suggested by the notation.
4It is sometimes said that equality reflection cannot be formulated in a logical framework, and is therefore suspect. But whether this is so depends on the choice of framework; it is certainly not problematic here.
8

u : Lvl  tp ext : {i : Lvl} el (u i)  tp
 : {i : Lvl} el (u i)  el (u (i + 1)) u : {i : Lvl} el (u (i + 1)) nat : el (u 0) pi : {i : Lvl} {a1 : el (u i)} {a2 : el (ext i a1)  el (u i)} el (u i) eq : {i : Lvl} {a : el (u i)} el (ext i a)  el (ext i a)  el (u i) ext-uni : {i : Lvl} ext (i + 1) (u i) =tp u i ext-nat : ext 0 nat =tp nat ext-cum : {i : Lvl} {a : el (u i)} ext (i + 1) ( i a) =tp ext i a ext-pi : {i : Lvl} {a1 : el (u i)} {a2 : el (ext i a1)  el (u i)}
ext i (pi a1 a2) =tp pi (ext i a1) ([x : el (ext i a1)] ext i (a2 x)) ext-eq : {i : Lvl} {a : el (u i)} {m1 : el (ext i a)} {m2 : el (ext i a)}
ext i (eq a m1 m2) =tp eq (ext i a) m1 m2
Figure 11: Tarskian Universes
References
Robert Harper, Furio Honsell, and Gordon Plotkin. A framework for defining logics. Journal of the Association for Computing Machinery, 40:194­204, 1993.
Per Martin-Löf. Truth of a proposition, evidence of a judgement, validity of a proof. Synthese, pages 407­420, 1987.
Jan Smith, Bengt Nordström, and Kent Petersson. Programming in Martin-Löf's Type Theory. An Introduction. Oxford University Press, 1990.
Taichi Uemura. A general framework for the semantics of type theory. Online, November 2019. URL https://arxiv.org/abs/1904.04097.
9

