© 2015 IEEE. Personal use of this material is permitted. Permission from IEEE must be obtained for all other uses, in any current or future media, including

reprinting/republishing this material for advertising or promotional purposes, creating new collective works, for resale or redistribution to servers or lists, or reuse of

any copyrighted component of this work in other works.

DJOOI:U1R0.N11A0L9/OSEFALAAT.2E0X15C.2L6ASS FILES, VOL. 6, NO. 1, JANUARY 2007

1

URL: https://ieeexplore.ieee.org/document/7302447

ALFRED: A Methodology to Enable Component

Fault Trees for Layered Architectures

Kai Ho¨ fig, Marc Zeller, Reiner Heilmann

Abstract--Identifying drawbacks or insufficiencies in terms of safety is important also in early development stages of safety critical systems. In industry, development artefacts such as components or units, are often reused from existing artefacts to save time and costs. When development artefacts are reused, their existing safety analysis models are an important input for an early safety assessment for the new system, since they already provide a valid model. Component fault trees support such reuse strategies by a compositional horizontal approach. But current development strategies do not only divide systems horizontally, e.g., by encapsulating different functionality into separate components and hierarchies of components, but also vertically, e.g. into software and hardware architecture layers. Current safety analysis methodologies, such as component fault trees, do not support such vertical layers. Therefore, we present here a methodology that is able to divide safety analysis models into different layers of a systems architecture. We use so called Architecture Layer Failure Dependencies to enable component fault trees on different layers of an architecture. These dependencies are then used to generate safety evidence for the entire system and over all different architecture layers. A case study applies the approach to hardware and software layers.
Keywords--safety analysis, component fault tree, compositional safety, model-based development, component-based development, embedded systems, cyberphysical systems
!

1 INTRODUCTION
The development of todays safety or mission critical systems underlies a series of legislative and normative regulations making safety and reliability the most important non-functional properties of embedded systems in many application domains of embedded systems, such as aerospace, railway, health care, automotive and industrial automation. Thus, along with the growing system complexity, also the need for safety assessment as well as its effort is increasing drastically in order to guarantee the high quality demands in these application domains. However, this trend is contrary to industry's aim to reduce development costs and time-tomarket of new products. Particularly in the case of software intensive embedded systems, their complexity is rapidly increasing and extended analysis techniques are required that scale to the increasing system complexity.
· K. Ho¨fig, M. Zeller, R. Heilmann are with Siemens AG, Corporate Technology, Munich, Germany. E-mail: {firstname}.{lastname}@siemens.com
Manuscript received March 8, 2015; revised May 17, 2015.

The rapid development and analysis of safety analysis models is important also in early stages during the development of safety critical systems. Such models aim at identifying drawbacks or insufficiencies in terms of safety. The early identification of such drawbacks is crucial for a cost efficient development process. In industry, development artefacts such as components or units, are often reused from existing artefacts to save time and costs and increase product quality.
Changes are made to these artefacts to match the requirements for a new product. In software development such a reuse strategy is also known as clone and own. When development artefacts are reused, their existing safety analysis models are an important input for an early safety assessment for a new system or product, since they already provide a valid model in terms of the former system or product. Nevertheless, changes and adoptions during the new development invalidate former analyses and require an adoption to the changes.
Another area where the rapid and automated development of safety analysis models is es-

JOURNAL OF LATEX CLASS FILES, VOL. 6, NO. 1, JANUARY 2007

2

sential are safety critical cyberphysical systems. Cyberphysical systems consist of more or less loosely coupled embedded systems. Their exact alignment is unclear at design time and the possible configurations at runtime are typically infinite. So, each embedded system, as a part of a cyberphysical system, is reused in many different configurations. For a safety critical function of such systems it might be necessary to be certified automatically at runtime to assure a safe operation.
For fault tree analysis, models exist that support such reuse strategies by a compositional strategy. Fault tree elements are related to their development artefacts and can be reused along with the reused development artefact. Modular or compositional safety analysis methodologies such as component fault trees [1] or HipHops [2] ease the adoption of changes for existing development artefacts by constraining the adoption activities for safety to the artefacts that require changes and provide benefits for an automated proof.
But current development strategies do not only divide systems horizontally, e.g., by encapsulating different functionality into separate components, but also vertically. An example for a vertical decomposition of a system is the distinction between software and hardware. Another example is the decomposition into a functional layer and a physical layer. Horizontal and vertical decompositions reduce complexity and increase reusability by applying the principles of divide and conquer and separation of concerns. As can be seen in section 2, current safety analysis methodologies allow a horizontal decomposition of safety analysis models, even into arbitrary levels of hierarchy, but lack at dividing models into different vertical layers and then generate safety evidence from it.
Therefore, we present in this paper a methodology that is able to divide safety analysis models into different vertical layers of a sys tems architecture. We use so called Architecture Layer FailuRE Dependencies (ALFRED) to enable component fault trees on different layers of an architecture. The architecture layer failure dependencies are then used to generate safety evidence for the entire system and over all different architectural layers maintaining important

properties of a vertically layered architecture model, such as transparency and independency.
The rest of this document is structured as follows: first the related approaches are summarized in section 2. In section 3, the methodology of component fault trees is described. Section 4 presents the central methodology of this paper and describes the application using a small example. Section 5 applies the methodology to a compact system from the automotive domain. Section 6 summarizes this paper and provides a prospect for future work.
2 RELATED WORK
The research presented in this paper is related to the general research area on model-based safety evaluation of software system and reuse of safety artefact as a sub-area of model-based safety evaluation.
Model-based Safety Evaluation. The use of models in safety engineering processes has gained increasing attention in the last decade [3], [4], [5]. Specifically the idea is to support automatic generation of safety artifacts such as fault trees [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21] or FMEA tables [22], [23], [24], [25], [26], [27] from system models. To construct the safety artefact, the system models are often annotated with failure propagation models [28], [29], [11], [1], [30], [15]. These failure propagation models are commonly combinatorial in nature thus producing static fault trees. This is also driven by the industrial need to certify [31], [32], [33] their system with static fault trees. Only rarely more advanced safety evaluation models such as Dynamic Fault Trees (DFTs) [34], [35], [36], [37], Generalized Stochastic Petri Nets (GSPNs)[38], State-Event Fault Trees (SEFTs) [39], [30], [40] or Markov models exist [41], [42]. Beside annotating an architecture specification, there are also approaches to construct a safety artefact via model checking techniques [43], [44], [45], [46], [47].
The approach presented in this paper complements these techniques, especially those one that generate fault trees from component-based failure propagation models. For these modelbased safety evaluation approaches, including

JOURNAL OF LATEX CLASS FILES, VOL. 6, NO. 1, JANUARY 2007

7

Fig. 5. Architecture system model as a SysML internal block definition diagram.

of M. Failures of M can influence the correct behavior of EBC functionality. Therefore EBC has an ALFRED connection to M (dotted line).
The components RadioReceiver, UltrasonicSen sor1 and UltrasonicSensor2 are so-called smart sensors, which means they have both hardware and software parts. They are dependent from the battery and therefore all have an ALFRED connection to it. The components Engine and Steering are smart actors, also with both hardware and software parts. They are not dependent from the correct functionality of the micro controller. An ALFRED connection to the battery is possible, since there is only one power source for the system. But since we are only interested in the top event of loosing the emergency braking functionality and a power loss of the battery would result in a stopped car, ALFRED connections are not used here.
The comparatively simple functionality of the emergency braking functionality results in 22 different failure modes modeled within component fault trees as so-called output failure modes as introduced in section 3. The battery and the micro controller itself have no functional interaction with the other components of the system as it is modeled. Therefore, they also have no ports with the rest of the system that would allow to model the failure behavior using component fault trees. Nevertheless, their failure behavior influences the functionality.

For example, the battery is a source for failures that influence the braking functionality, since the battery powers the ultrasonic sensors.
Within the components of the functional layer, the methodology of component fault trees eases a compositional development approach. Components, for example the ultrasonic sensors, can easily be replaced by different ones. The component fault tree for such a sensor only contains the information that is related to the sensor and can be exchanged together with the component. The failure behavior of changes within one component can be expressed using the corresponding component fault tree. Including battery-related information, for example, within the component fault tree of the ultrasonic sensor would hinder an exchange using a sensor component that is modeled independently from the system. The reason is the context-related information of the battery that would be contained in such a component fault tree.
Using ALFRED connections keep the component fault trees independent from failures in different layers. Figure 7 shows the component fault tree of the component UltrasonicSensor1. The internal basic event labeled as Falsenagative results in an undetected obstacle. The basic event labeled as False-positive results in an erroneously detected obstacle. The output failure modes of this component depicted as black

JOURNAL OF LATEX CLASS FILES, VOL. 6, NO. 1, JANUARY 2007

8

(U1.False-negative  U2.False-negative) (U1.False-negative  U2.Battery-omission) (U1.False-negative  U2.Battery-too-low) (U2.False-negative  U1.Battery-omission) (U2.False negative  U1.Battery too low)
Since the battery failures of the components UltrasonicSensor1 (U1) and UltrasonicSensor2 (U2) rely on the same basic events (so-called common cause failures), a boolean solver further reduces this formula to:

Fig. 7. Component fault tree for the component UltrasonicSensor1.

E.Speed-too-low  EBC.HW-defect PartCount  EBC.Loss-of-power  (U1.False-negative  U2.False-negative)  B.Battery-omission  B.Battery-too-low

triangles are used in the component fault trees of other components to model the system's top event no emergency braking. Due to the lack of space, all these component fault trees are not depicted here, but contain failure informations as described in section 3.
Applying the methodology as described in section 4 to the component fault trees and ALFRED connections in this system, allows to include the failure information of the micro controller and the battery in the fault tree analysis. The top event no emergency braking models the loss of the emergency braking functionality. The ALFRED methodology results in the fault tree analysis for the top event no emergency braking represented by the following minimal cutset analysis1:
E.Speed-too-low EBC.HW-defect PartCount EBC.Loss-of-power 
(U1.Battery-too-low  U2.Battery-too-low) (U1.Battery-omission  U2.Battery-omission)
(U1.Battery-omission  U2.Battery-too-low) (U1.Battery-too-low  U2.Battery-omission)
1. A minimal cutset analysis is a common way to analyze fault trees. The shortest credible way through the tree from fault to initiating event is called a minimal cut set.

As can be concluded from this result, the components of the functional layer can be maintained exchangeable from the hardware or physical layer. The ALFRED connections allowed to include the failures of the battery and the micro controller without changing the development model and add ports between the physical layer and the functional layer to model the failure behavior explicitly. Applying the ALFRED methodology is an analytical step that does not change the existing models.
6 CONCLUSION
This paper describes the methodology of architecture layer failure dependencies, an extension of component fault trees to maintain independency of model elements in different vertical layers of a vertically decomposed system architecture model. ALFRED connections ease the modeling of common cause failures without explicitly modeling dependencies using information flow elements such as ports. This keeps layers in the model independent from each other and so supports a compositional development approach. They can be used to reuse software on different hardware, as demonstrated in the case study, but also support arbitrary layers.
Using ALFERD connections, existing safety analysis models can be reused in a more effective way and so support an early safety

JOURNAL OF LATEX CLASS FILES, VOL. 6, NO. 1, JANUARY 2007

9

assessment and head towards an automated safety qualification of future cyberphysical systems. Since we already successfully using this approach for certification tasks in the railway domain, a perspective for future work can be the further development of the approach aiming for higher precision.
REFERENCES
[1] Bernhard Kaiser, Peter Liggesmeyer, and Oliver Ma¨ckel. A new component concept for fault trees. In SCS '03: Proceedings of the 8th Australian workshop on Safety critical systems and software, pages 37­46, Darlinghurst, Australia, 2003. Australian Computer Society, Inc.
[2] Yiannis Papadopoulos and John A. McDermid. Hierarchically Performed Hazard Origin and Propagation Studies. Computer Safety, Reliability and Security, 1999.
[3] A. Joshi, S. P. Miller, M. Whalen, and M. P. E. Heimdahl. A proposal for model-based safety analysis. 24th AIAA/IEEE Digital Avionics Systems Conference, 2005.
[4] O. Lisagor, J. A. McDermid, U. K. York, and D. J. Pumfrey. Towards a Practicable Process for Automated Safety Analysis. 24th International System Safety Conference, 2006.
[5] John McDermid and Tim Kelly. Software in Safety Critical Systems: Achievement and Prediction, 2006. University of York, UK.
[6] Rasmus Adler, Marc Fo¨ rster, and Mario Trapp. Determining Configuration Probabilities of Safety-Critical Adaptive Systems. In 21st International Conference on Advanced Information Networking and Applications (AINA 2007),, pages 548­555. IEEE Computer Society, 2007.
[7] Andrea Bondavalli, Istvan Majzik, and Ivan Mura. Automated Dependability Analysis of UML Designs. IEEE International Symposium on Object-oriented Real-time distributed Computing, 2, 1999.
[8] J.-L. Boulanger and Van Quang Dao. Experiences from a model-based methodology for embedded electronic software in automobile. pages 1­6, April 2008.
[9] M. Bretschneider, H. J. Holberg, E. Bode, and I. Bruckner. Model-based safety analysis of a flap control system. Proc. 14th Annual INCOSE Symposium, 2004.
[10] Holger Giese, Matthias Tichy, and Daniela Schilling. Compositional hazard analysis of uml component and deployment models. In Maritta Heisel, Peter Liggesmeyer, and Stefan Wittmann, editors, Computer Safety, Reliability, and Security, 23rd International Conference, SAFECOMP 2004, Potsdam, Germany, September 21-24, 2004, Proceedings, volume 3219 of Lecture Notes in Computer Science, pages 166­179. Springer, 2004.
[11] Lars Grunske. Towards an Integration of Standard Component-Based Safety Evaluation Techniques with SaveCCM. In Christine Hofmeister, Ivica Crnkovic, and Ralf Reussner, editors, Second Int. Conf. on Quality of Software Architectures, QoSA 2006,, volume 4214 of LNCS, pages 199­213. Springer, 2006.
[12] Lars Grunske and Bernhard Kaiser. Automatic generation of analyzable failure propagation models from component-level failure annotations. In Fifth International

Conference on Quality Software (QSIC 2005), 19-20 September 2005, Melbourne, pages 117­123. IEEE Computer Society, 2005.
[13] Anjali Joshi, Steve Vestal, and Pam Binns. Automatic Generation of Static Fault Trees from AADL Models. In DSN Workshop on Architecting Dependable Systems, Lecture Notes in Computer Science. Springer, 2007.
[14] M. A. de Miguel, J. F. Briones, J. P. Silva, and A. Alonso. Integration of safety analysis in model-driven software development. Software, IET, 2(3):260­280, June 2008.
[15] Y. Papadopoulos, J. A. McDermid, R. Sasse, and G. Heiner. Analysis and synthesis of the behaviour of complex programmable electronic systems in conditions of failure. Int. Journal of Reliability Engineering and System Safety, 71(3):229­247, 2001.
[16] Y. Papadopoulos and M. Maruhn. Model-Based Automated Synthesis of Fault Trees from Matlab.Simulink Models. International Conference on Dependable Systems and Networks, 2001.
[17] Andrew Rae and Peter Lindsay. A behaviour-based method for fault tree generation. Proceedings of the 22nd International System Safety Conference, pages 289 ­ 298, 2004.
[18] G. Szabo and G. Ternai. Automatic Fault Tree Generation as a Support for Safety Studies of Railway Interlocking Systems. IFAC Symposium on Control in Transportation Systems, 2009.
[19] N. Mahmud, M. Walker, and Y. Papadopoulos. Compositional synthesis of temporal fault trees from state machines. In Availability, Reliability and Security (ARES), 2011 Sixth International Conference on, pages 429­435, Aug 2011.
[20] Martin Walker and Yiannis Papadopoulos. Qualitative temporal analysis: Towards a full implementation of the fault tree handbook. Control Engineering Practice, 17(10):1115 ­ 1125, 2009.
[21] Kai Hfig. Failure-dependent timing analysis - a new methodology for probabilistic worst-case execution time analysis. In JensB. Schmitt, editor, Measurement, Modelling, and Evaluation of Computing Systems and Dependability and Fault Tolerance, volume 7201 of Lecture Notes in Computer Science, pages 61­75. Springer Berlin Heidelberg, 2012.
[22] Tadeusz Cichocki and Janusz Go´ rski. Failure mode and effect analysis for safety-critical systems with software components. In Floor Koornneef and Meine van der Meulen, editors, Computer Safety, Reliability and Security, 19th International Conference, SAFECOMP 2000, Rotterdam, The Netherlands, October 24-27, 2000, Proceedings, volume 1943 of Lecture Notes in Computer Science, pages 382­394. Springer, 2000.
[23] Tadeusz Cichocki and Janusz Go´ rski. Formal support for fault modelling and analysis. In Udo Voges, editor, Computer Safety, Reliability and Security, 20th International Conference, SAFECOMP 2001, Budapest, Hungary, September 26-28, 2001, Proceedings, volume 2187 of Lecture Notes in Computer Science, pages 190­199. Springer, 2001.
[24] Pierre David, Vincent Idasiak, and Frederic Kratz. Towards a Better Interaction Between Design and Dependability Analysis: FMEA Derived From UML/SysML Models. In Safety, Reliability and Risk Analysis: Theory, Methods and Applications, pages 2259­2266, Jan. 2008.

JOURNAL OF LATEX CLASS FILES, VOL. 6, NO. 1, JANUARY 2007

10

[25] Y. Papadopoulos, D. Parker, and C. Grante. Automating the failure modes and effects analysis of safety critical systems. In Int. Symp. on High-Assurance Systems Engineering (HASE 2004), pages 310­311. IEEE Comp. Society, 2004.
[26] M. Walker, Y. Papadopoulos, D. Parker, and H. Lnn et al. Semi-automatic fmea supporting complex systems with combinations and sequences of failures. SAE Int. J. Passeng. Cars - Mech. Syst. 2(1), pages 791­802, 2009.
[27] Kai Ho¨ fig, Marc Zeller, and Lars Grunske. metafmeaa framework for reusable fmeas. In Frank Ortmeier and Antoine Rauzy, editors, Model-Based Safety and Assessment, volume 8822 of Lecture Notes in Computer Science, pages 110­122. Springer International Publishing, 2014.
[28] Dominik Domis and Mario Trapp. Integrating Safety Analyses and Component-Based Design. In SAFECOMP, pages 58­71, 2008.
[29] Jonas Elmqvist and Simin Nadjm-Tehrani. SafetyOriented Design of Component Assemblies using Safety Interfaces. Formal Aspects of Component Software, 2006.
[30] Bernhard Kaiser. State/Event Fault Trees: A Safety and Reliability Analysis Technique for Software-Controlled Systems. PhD thesis, Technische Universita¨t Kaiserslautern, Fachbereich Informatik, 2005.
[31] CENELEC EN 50126,128,129. CENELEC (European Committee for Electro-technical Standardisation) : Railway Applications ­ the specification and demonstration of Reliability, Availability, Maintainability and Safety, Railway Applications ­ Software for Railway Control and Protection Systems, Brussels, 2000.
[32] IEC61508. International Standard IEC 61508, 1998. International Electrotechnical Commission (IEC).
[33] ISO 26262. ISO/DIS 26262- Road vehicles Functional safety , 2009.
[34] S. Amari, G. Dill, and E. Howald. A new approach to solve dynamic fault trees. In Reliability and Maintainability Symposium, 2003. Annual, pages 374­379, 2003.
[35] Joanne Bechta-Dugan, Salvatore Bavuso, and Mark Boyd. Dynamic fault-tree models for fault-tolerant computer systems. IEEE Transactions on Reliability, 41(3):363­77, sep 1992.
[36] JOSH Dehlinger and Joanne Bechta Dugan. Analyzing dynamic fault trees derived from model-based system architectures. Nuclear Engineering and Technology: An International Journal of the Korean Nuclear Society, 40(5):365­374, 2008.
[37] P. Ganesh and J.B. Dugan. Automatic Synthesis of Dynamic Fault Trees from UML SystemModels. 13th International Symposium on Software Reliability Engineering (ISSRE), 2002.
[38] Ana-Elena Rugina, Karama Kanoun, and Mohamed Kaa^niche. A System Dependability Modeling Framework Using AADL and GSPNs. In Architecting Dependable Systems IV, volume 4615 of LNCS, pages 14­38. Springer, 2007.
[39] Lars Grunske, Bernhard Kaiser, and Yiannis Papadopoulos. Model-driven safety evaluation with state-eventbasedcomponent failure annotations. In 8th Int. Symp. on Component-Based Software Engineering, CBSE 2005, Proc., pages 33­48, 2005.
[40] Bernhard Kaiser, Catharina Gramlich, and Marc Fo¨ rster. State/event fault trees­A safety analysis model for

software-controlled systems. Reliability Engineering & System Safety, 92(11):1521 ­ 1537, 2007. SAFECOMP 2004, the 23rd International Conference on Computer Safety, Reliability and Security.
[41] Marco Bozzano, Alessandro Cimatti, Joost-Pieter Katoen, Viet Yen Nguyen, Thomas Noll, and Marco Roveri. Safety, dependability and performance analysis of extended aadl models. Comput. J., 54(5):754­775, 2011.
[42] Marco Bozzano, Alessandro Cimatti, Joost-Pieter Katoen, Viet Yen Nguyen, Thomas Noll, and Marco Roveri. The compass approach: Correctness, modelling and performability of aerospace systems. In Bettina Buth, Gerd Rabe, and Till Seyfarth, editors, Computer Safety, Reliability, and Security, 28th International Conference, SAFECOMP 2009, Hamburg, Germany, September 15-18, 2009. Proceedings, volume 5775 of Lecture Notes in Computer Science, pages 173­186. Springer, 2009.
[43] Lars Grunske, Robert Colvin, and Kirsten Winter. Probabilistic model-checking support for FMEA. In Fourth International Conference on the Quantitative Evaluaiton of Systems (QEST 2007), pages 119­128. IEEE Computer Society, 2007.
[44] Matthias Gu¨ demann and Frank Ortmeier. A framework for qualitative and quantitative formal model-based safety analysis. In 12th IEEE High Assurance Systems Engineering Symposium, HASE 2010, San Jose, CA, USA, November 3-4, 2010, pages 132­141. IEEE Computer Society, 2010.
[45] M. Gu¨ ndemann, F. Ortmeier, and W. Reif. Using Deductive Cause-Sequence Analysis (DCCA) with SCADE. SAFECOMP 2007, LNCS 4680, pages 465­478, 2007.
[46] Mats Per Erik Heimdahl, Yunja Choi, and Michael W. Whalen. Deviation analysis: A new use of model checking. Automated Software Engineering, 12(3):321­347, 2005.
[47] Michael Lipaczewski, Simon Struck, and Frank Ortmeier. Using tool-supported model based safety analysis - progress and experiences in saml development. In 14th International IEEE Symposium on High-Assurance Systems Engineering, HASE 2012, Omaha, NE, USA, October 25-27, 2012, pages 159­166. IEEE Computer Society, 2012.
[48] Ian Wolforth, Martin Walker, Lars Grunske, and Yiannis Papadopoulos. Generalizable safety annotations for specification of failure patterns. Softw., Pract. Exper., 40(5):453­ 483, 2010.
[49] Ian Wolforth, Martin Walker, and Yiannis Papadopoulos. A language for failure patterns and application in safety analysis. In IEEE Conference on Dependable Computing Systems (DEPCOSA08). IEEE Computer Society, 2008.
[50] Ian Wolforth, Martin Walker, Yiannis Papadopoulos, and Lars Grunske. Capture and reuse of composable failure patterns. IJCCBS, 1(1/2/3):128­147, 2010.
[51] William Vesely, Joanne Dugan, Joseph Fragola, Joseph Minarick, and Jan Railsback. Fault Tree Handbook with Aerospace Applications, 2002. NASA Office of Safety and Mission Assurance.
[52] Jessica Jung, Andreas Jedlitschka, Kai Hfig, Dominik Domis, and Martin Hiller. A controlled experiment on component fault trees. In Friedemann Bitsch, Jrmie Guiochet, and Mohamed Kaniche, editors, Computer Safety, Reliability, and Security, volume 8153 of Lecture Notes in Computer Science, pages 285­292. Springer Berlin Heidelberg, 2013.

