SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM
JOHN C. BAEZ1,2, JOE MOELLER3, AND TODD TRIMBLE4
Abstract. It is known that the Grothendieck group of the category of Schur functors is the ring of symmetric functions. This ring has a rich structure, much of which is encapsulated in the fact that it is a `plethory': a monoid in the category of birings with its substitution monoidal structure. We show that similarly the category of Schur functors is a `2-plethory', which descends to give the plethory structure on symmetric functions. Thus, much of the structure of symmetric functions exists at a higher level in the category of Schur functors.

arXiv:2106.00190v2 [math.RT] 2 Jun 2021

Contents

1. Introduction

1

2. Schur functors

6

3. Equivalence with polynomial species

14

4. The 2-birig structure on Schur functors

21

5. Plethories, plethysm, and 2-plethories

28

6. The rig-plethory of positive symmetric functions

36

7. The ring-plethory of symmetric functions

46

References

53

1. Introduction
The symmetric groups Sn play a distinguished role in group theory, and their representations are rich in structure. Much of this structure only reveals itself if we collect all these groups into the groupoid S of finite sets and bijections. Let FinVect be the category of finite-dimensional vector spaces over a field k of characteristic zero. Any functor  : S  FinVect can be expressed as a direct sum of representations of the groups Sn. We denote the full subcategory of FinVectS consisting of finite direct sums of finite-dimensional representations by Schur.
This category Schur binds all the finite-dimensional representations of all the symmetric groups Sn into a single entity, revealing more structure than can be seen working with these groups one at a time. In particular, Schur has a monoidal structure called the `plethysm' tensor product, with respect to which Schur acts on the category Rep(G) of representations of any group G. Each object of Schur acts as an endofunctor of Rep(G) called a `Schur functor'. Thus, Schur plays a fundamental role in representation theory, which we aim to clarify.
We also apply our results on Schur to study the ring of symmetric functions, denoted . This ring shows up in many guises throughout mathematics. For example:
· It is the Grothendieck group of the category Schur.
1

2

BAEZ, MOELLER, AND TRIMBLE

· It is the subring of Z[[x1, x2, . . . ]] consisting of power series of bounded degree that are invariant under all permutations of the variables.
· It is the cohomology ring H(BU), where BU is the classifying space of the infinite-dimensional unitary group.
As a mere ring,  is not very exciting: it is isomorphic to a polynomial ring in countably many generators. But  is richly endowed with a plethora of further structure [Mac95, Egg19]. Hazewinkel [Haz09] writes:
It seems unlikely that there is any object in mathematics richer and/or more beautiful than this one [....] Following ideas of Tall and Wraith [TW70], Borger and Wieland [BW05] defined a concept of `plethory' (which we call `ring-plethory') that encapsulates much of this rich structure on . Here we derive the ring-plethory structure on  from a `2-plethory' structure on Schur, of which  is the Grothendieck group. More than merely proving that  is a ring-plethory, this shows that much of its rich structure exists at a higher level in the category of Schur functors. What is a ring-plethory? To understand this, it is good to start with the simplest example of all, Z[x], the ring of polynomials with integer coefficients in one variable. (Following the algebraic geometers, we always use `ring' to mean `commutative ring with unit'.) This ring Z[x] is the free ring on one generator. But besides the usual ring operations, Z[x] also has `co-operations' that act like ring operations going backwards. These are all derived by exploiting the freeness property. Namely, Z[x] is equipped with the unique ring homomorphisms that send x to the indicated elements: · `coaddition':
 : Z[x]  Z[x]  Z[x]
x  x1+1x
· `co-zero', or the `coadditive counit':
o : Z[x]  Z
x0
· `co-negation':
 : Z[x]  Z[x]
x  -x
· `comultiplication':
µ : Z[x]  Z[x]  Z[x]
xxx
· and `co-one', or the `comultiplicative counit':
 : Z[x]  Z
x  1.
These obey all the usual ring axioms if we regard them as morphisms in the opposite of the category of rings. Thus we say Z[x] is a biring: a ring object in Ringop.
Why is Z[x] a biring? Any ring can be seen as the ring of functions on some kind of space, and Z[x] is the ring of functions on the affine line, A1. Grothendieck made

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

3

this into a tautology by defining the category of affine schemes to be Ringop and defining A1 to be the ring Z[x] seen as an object in Ringop. But the affine line itself can be made into a ring, much like the real or complex line. Thus A1 becomes a ring
object in the category of affine schemes. But this is precisely a biring! The formulas above express the ring operations on A1 as co-operations on Z[x].
A biring can equivalently be seen as a ring B such that the representable functor

Ring(B, -) : Ring  Set

is equipped with a lift to a functor B taking values in the category of rings, as follows [TW70]:

Ring

B



U

Ring

Set.

Ring(B,-)

Given a biring B, the co-operations on B give Ring(B, R) a ring structure for any ring R in a way that depends functorially on R. For example, since Z[x] is the free ring on one generator, Ring(Z[x], -) assigns to any ring its underlying set. Thus Ring(Z[x], -) lifts to the identity functor on Ring. This gives Z[x] a natural biring structure, and one can check that this is the one described above.
This second viewpoint is fruitful because endofunctors on Ring can be composed. Though not all endofunctors on Ring are representable, those that are representable are closed under composition. Thus for any birings B and B there is a biring B B such that
B  B = BB.
This puts a monoidal structure  on the category Biring, called the composition tensor product. A ring-plethory is then a monoid object in (Biring, ). Since the category Biring is defined as the opposite of the category of ring objects in Ringop, B is a ring-plethory when B is a comonad.
For example, since Ring(Z[x], -) lifts to the identity functor on Ring, Z[x] with the resulting biring structure is actually the unit object for the plethysm tensor product. The unit object in a monoidal category is always a monoid object in a canonical way, so Z[x] becomes a ring-plethory. Concretely, this ring-plethory structure on Z[x] simply captures the fact that one can compose polynomials in one variable.
A more interesting ring-plethory is , the ring of symmetric functions. This structure is often described in terms of fairly elaborate algebraic constructions. It seems not to be generally appreciated that there is a conceptual explanation for all this structure. It is the purpose of this paper to provide that explanation.
We achieve this by categorifying the story so far, developing a theory of 2plethories, and showing that Schur is a 2-plethory. Using this fact we show that , the Grothendieck group of Schur, is a ring-plethory.
Before doing this, we must categorify the concepts of ring and biring. Or rather, since it is problematic to categorify subtraction directly, we start by omitting additive inverses and work not with rings but with `rigs', which again we assume to be commutative. A birig is then a rig object in the opposite of the category of rigs. For example, the free rig on one generator is N[x], and this becomes a birig with co-operations defined just as for Z[x] above--except for co-negation.

4

BAEZ, MOELLER, AND TRIMBLE

The concept of plethory also generalizes straightforwardly from rings to rigs. In fact it generalizes to algebras of any monad M on Set. Such a generalized plethory has been called a `Tall­Wraith monoid' [TW70, SW11], but we prefer to call it an `M-plethory' in order to refer to various specific monads M. If M is the monad whose algebras are rings, then M-plethories are ring-plethories, but when M is the monad for rigs, we call an M-plethory a `rig-plethory'. For example, just as Z[x] becomes a ring-plethory, N[x] becomes a rig-plethory. This captures the fact that we can compose polynomials in N[x].
There are various ways to categorify the concept of rig. Since our goal is to study Schur functors and some related classical topics in representation theory, we shall fix a field k of characteristic zero and define a `2-rig' to be a symmetric monoidal Cauchy complete linear category. In more detail:

Definition 1.1. A linear category is an essentially small category enriched over Vect, the category of vector spaces over k. A linear functor is a Vect-enriched functor between linear categories. A linear category is Cauchy complete when it has biproducts and all idempotents split. A symmetric monoidal linear category is a linear category with a symmetric monoidal structure for which the tensor product is bilinear on hom-spaces. A 2-rig is a symmetric monoidal linear category that is also Cauchy complete.

In language perhaps more familiar to algebraists, a linear category is Cauchy complete when it has finite direct sums and any idempotent endomorphism has a cokernel. In this definition of 2-rig we do not need to impose a rule saying that the tensor product preserves biproducts and splittings of idempotents in each argument, since this is automatic: these are `absolute' colimits for linear categories, meaning they are preserved by any linear functor. This absoluteness is one of the virtues of demanding only Cauchy completeness rather a larger class of colimits.
With this definition, Schur turns out to be the free 2-rig on one generator. Many other important categories are also 2-rigs:
· the category FinVect of finite-dimensional vector spaces over k, · the category of representations of any group on finite-dimensional vector
spaces, · the category of finite-dimensional G-graded vector spaces for any group G, · the category of bounded chain complexes of finite-dimensional vector spaces, · the category of finite-dimensional super vector spaces, · for k = R or C, the category of finite-dimensional vector bundles over any
topological space, or smooth vector bundles over any smooth manifold, · the category of algebraic vector bundles over any algebraic variety over k, · the category of coherent sheaves of finite-dimensional vector spaces over any
algebraic variety (or scheme or algebraic stack) over k.
Some of these categories are abelian, but categories of vector bundles are typically not. They are still Cauchy complete, and this is another reason we develop our theory at this level of generality.
There is a 2-category of 2-rigs, denoted 2-Rig, and we define a 2-birig to be a 2-rig B such that the 2-functor 2-Rig(B, -) : 2-Rig  Cat is equipped with a lift

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

5

to a 2-functor B taking values in 2-rigs:
B

2-Rig



U

2-Rig

Cat

2-Rig(B,-)

There is a 2-category of 2-birigs. Analogously with birings, for any 2-birigs B and B there is a 2-birig B  B corresponding to endofunctor composition. This equips the 2-category 2-Birig with a monoidal structure. We define a 2-plethory to be a pseudomonoid--roughly, a monoid object up to coherent isomorphism-- in (2-Birig, ). The multiplication in this pseudomonoid is called the `plethysm' tensor product.
Just as N[x] is the free rig on one generator, we prove that Schur is the free 2-rig on one generator. It follows that 2-Rig(Schur, -) lifts to the identity functor on 2-Rig:
2-Rig

1 

U

2-Rig

Cat.

2-Rig(Schur,-)

This makes Schur into a 2-birig, and since 1  1 = 1, Schur becomes a 2-plethory.

This captures the fact that we can compose Schur functors.

Taking the Grothendieck group of Schur, we obtain the known ring-plethory structure on , the ring of symmetric functions. The birig structure is fairly straightforward. The rig-plethory structure takes considerably more work. Most subtle of all

is the biring structure, and in particular the co-negation: this involves Z2-graded chain complexes of Schur functors, and is connected to the `rule of signs' in Joyal's

theory of species [Joy81].

Outline of the paper. Section 2 begins with an overview of the classical theory of Schur functors in representation theory, as well as their relation to finite-dimensional linear species, which we call `polynomial species'. The rest of this section builds up to our abstract definition of Schur functors as endomorphisms of the forgetful 2functor U : 2-Rig  Cat.
Our first main result, Theorem 3.1, is that the category Schur of abstract Schur functors is equivalent to the category Poly of polynomial species. Section 3 is dedicated to proving this. En route, we prove in Theorems 3.2 and 3.3 that Poly is the underlying category of the free 2-rig on one generator, which we call kS, and that this 2-rig represents the 2-functor U : 2-Rig  Cat.
In Section 4, we define 2-birigs, a categorification of the notion of biring. In Theorem 4.4 we show that Schur has a 2-birig structure coming from its equivalence with the free 2-rig on one generator.
In Section 5, we begin by exposing an alternative perspective on birigs. Birigs and birings are examples of the more general notion of `M-bialgebras': that is, bialgebras of a monad M on Set. Moreover, the category of M-bialgebras admits a substitution (non-symmetric) monoidal structure. This allows us to define `Mplethories' as monoids with respect to this monoidal structure [SW11]. Then we use this perspective to categorify the notion of rig-plethory, obtaining the concept of 2-plethory. In Theorem 5.15 we give Schur the structure of a 2-plethory.

6

BAEZ, MOELLER, AND TRIMBLE

In Section 6 we begin the decategorification process by studying the rig of isomorphism classes of objects in Schur. We denote this rig by +, and call its elements `positive symmetric functions', since it is a sub-rig of the famous ring of symmetric functions, . In Theorem 6.7 we equip + with a birig structure using the 2-birig structure on Schur, and in Theorem 6.12 we equip + with a rig-plethory structure using the 2-plethory structure on Schur.
In Section 7 we study the group completion of +, which is . This is evidently a ring, but making it into a biring is less straightforward: to define co-negation in this
biring and prove its properties we need the homology of Z2-graded chain complexes of Schur functors. We make  into a biring in Theorem 7.12, and make it into a ring-plethory in Theorem 7.13.

Notation. We use a sans serif font for 1-categories, e.g. Cat, and a bold serif font for 2-categories, e.g. Cat. On occasion we need to think of a 1-category as a locally discrete 2-category, in which case we do not change the font, and hope it is clear by context. Other times, we need to modify a 2-category to give a 1-category. In these cases, we do not change the font, but merely decorate the name of the 2-category to indicate what was done, e.g. Cath.

2. Schur functors
We begin this section with a brief overview of the classical theory of Schur functors as they relate to the representation theory of the symmetric groups.

2.1. Classical treatment: symmetric group representations and polynomial species. Classically, a Schur functor is a specific sort of functor
F : FinVect  FinVect
where FinVect stands for the category of finite-dimensional vector spaces over some field k of characteristic zero. Namely, it is a functor where F (V ) is obtained by taking a tensor power of V , say V n, and then picking out the subspace that transforms according to a particular irreducible representation of the symmetric group Sn, which acts on V n by permuting the tensor factors.
Irreducible representations of Sn correspond to n-box Young diagrams, so Schur functors are usually described with the help of these. An n-box Young diagram is simply a notation for a way to write n as a sum of natural numbers listed in decreasing order. For example, this 17-box Young diagram:

describes the partition of 17 as 5 + 4 + 4 + 2 + 1 + 1. However, it also can be used to construct an irreducible complex representation of the symmetric group S17, and thus a Schur functor.
The relation between Young diagrams and Schur functors can be described using the group algebra of the symmetric group, k[Sn]. Given an n-box Young diagram , we can think of the operation `symmetrize with respect to permutations of the

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

7

boxes in each row' as an element pS  k[Sn]. Similarly, we can think of the operation `antisymmetrize with respect to permutations of the boxes in each column' as an element pA  k[Sn]. By construction, each of these elements is idempotent. They do not commute, but their product pA pS , times a suitable nonzero constant, gives an idempotent p.
The element p  k[Sn] is called the Young symmetrizer corresponding to the n-box Young diagram . Since the group algebra k[Sn] acts on V n by permuting the factors, the Young symmetrizer gives a projection
p : V n  V n
whose range is a subspace called S(V ). Since p commutes with everything in k[Sn], this subspace is invariant under the action of Sn, and--as already mentioned--it is a direct sum of copies of a specific irreducible representation of Sn. But the point is this: there is a functor
S : FinVect  FinVect
which sends a space V to corresponding subspace S(V ). Any finite direct sum of functors of the form S is traditionally called a `Schur functor'. For example:
· For each n  0, the nth tensor power V  V n is a Schur functor. · If F and G are Schur functors, the functor V  F (V )  G(V ) is a Schur
functor. · If F and G are Schur functors, the functor V  F (V )  G(V ) is also a Schur
functor. · If F and G are Schur functors, the composite V  F (G(V )) is a Schur
functor. This way of constructing Schur functors is known as plethysm.
There is a category Schur with Schur functors as objects. We shall give a conceptual explanation of this category, its structure, and its relation to symmetric functions. In particular, we shall show that the ring-plethory structure on symmetric functions arises from a `2-plethory' structure on Schur.
Joyal introduced combinatorial species and linear species in [Joy81]. We begin by describing a category Poly of `polynomial species' which is equivalent to Schur, as we shall show. For this it is convenient to work with a skeleton of the groupoid of finite sets, namely the symmetric groupoid S where objects are natural numbers, all morphisms are automorphisms, and the automorphisms of the object n form the group Sn.
Definition 2.1. A polynomial species is a functor F : S  FinVect such that F (n) = 0 for all sufficiently large n. Let Poly be the category where objects are polynomial species and morphisms are natural transformations.

Note that Poly is a subcategory of the category of representations of S, by which we simply mean functors F : S  Vect. Every irreducible representation of S is finite-dimensional: it is really just an irreducible representation of some group Sn. Every representation of S is a direct sum of irreducibles. The category Schur may be identified with the full subcategory consisting of finite direct sums of irreducibles.

2.2. Abstract Schur functors. We have described Schur functors as special endofunctors on FinVect. In fact, Schur functors make sense much more broadly. We now show that they can be applied to any 2-rig (as defined in Definition 1.1). A

8

BAEZ, MOELLER, AND TRIMBLE

somewhat novel feature of our treatment is that we do not require the theory of Young diagrams to define and study Schur functors.
Our strategy is as follows. We fix a 2-rig R. Though the group algebra k[Sn] begins life as a monoid in the symmetric monoidal category FinVect, we shall explain how to interpret it as living in R by a `change of base' functor going from FinVect to R. This lets us use the Young symmetrizers p to construct idempotents on V k for any object V  R. Splitting these idempotents, we obtain the Schur functors S : R  R.
2.2.1. Change of base. In Definition 2.5 we describe a 2-category of 2-rigs. To achieve the desired change of base, notice that FinVect is initial among 2-rigs.

Proposition 2.2. For any 2-rig R there is exactly one symmetric monoidal linear functor i : FinVect  R, up to symmetric monoidal linear isomorphism.
Proof. Let Mat be the linear category whose objects are integers m  0 and whose morphisms m  n are m × n matrices with entries in k. Since R is Cauchy complete and in particular has finite biproducts, there is an evident linear functor
Mat  R
which takes m to Im, the direct sum of m copies of the tensor unit I. It is the unique linear functor taking 1 to I, up to unique linear isomorphism. In the case R = FinVect, the linear functor
Mat  FinVect
taking 1 to k is a linear equivalence (exhibiting Mat as a skeleton of FinVect). Because of this equivalence, we could equally well say that there is a linear functor
i : FinVect  R
which, up to unique linear isomorphism, is the unique linear functor taking k to I. Notice that a symmetric monoidal functor of this form must take the tensor unit k to I (up to coherent isomorphism, as always), and in fact i is symmetric monoidal, because there is a canonical isomorphism
Im  In = Imn,
using the fact that  preserves direct sums in each argument, and the fact that there is a canonical isomorphism I  I = I.

2.2.2. The action of Young symmetrizers. Next we explain how given an object X in a 2-rig R, any Young symmetrizer in k[Sn] acts as an idempotent on Xn. For this we only need to know a little bit about the group algebra k[Sn], which we recall here. By Maschke's theorem, for any finite group G, the group algebra k[G] decomposes
as a direct sum of matrix algebras

hom(V, V)

where  ranges over isomorphism classes of irreducible representations of G. The identity elements of these matrix algebras hom(V, V) thus correspond to certain special elements p  k[G]. Clearly these elements are idempotent:
p2 = p.

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

9

We are particularly interested in the case G = Sn. In this case, the idempotents p are the Young symmetrizers we have already discussed. However, we will not need the formula for these idempotents.
The key step is to apply base change to k[Sn]. Here we exploit the fact that

k[Sn] = k
Sn

is a monoid in the monoidal category FinVect. Since the functor i : FinVect  R given in Proposition 2.2 is monoidal, it follows that i carries k[Sn] to a monoid in R, which we again call k[Sn] by abuse of notation. As an object of R, we have

k[Sn] = I.

(1)

Sn

There is a general concept of what it means for a monoid in a monoidal category to
act on an object in that category. In particular, if X is an object of C, the monoid k[Sn] acts on the tensor power Xn. To see this, note that for each   Sn, there is a corresponding symmetry isomorphism

 : Xn  Xn

Putting these together via copairing, and with the help of Eq. (1) we obtain a morphism
k[Sn]  Xn  Xn
which is the desired action. Finally, we would like to describe how each Young symmetrizer p  k[Sn] acts on
Xn. Any element x  k[Sn] gives a linear map from k to k[Sn], namely the unique map sending 1 to x. Applying the functor i to this, we obtain a morphism which by abuse of language we call
x : I  k[Sn]
This then yields an endomorphism
x : Xn  Xn

given as the following composite. Xn -= I  Xn -x-1 k[Sn]  Xn - Xn
It is easy to check that for any x, y  k[Sn], xy = xy.

Thus, for any Young symmetrizer p, the morphism p : Xn  Xn
is idempotent, because p is. By construction, the morphisms p : Xn  Xn
are the components of a natural transformation from the functor X  Xn to itself.

10

BAEZ, MOELLER, AND TRIMBLE

2.2.3. Constructing Schur functors. We can now define the Schur functor associated to a Young diagram, or more generally to a polynomial species.

Definition 2.3. For any Young diagram  and any 2-rig R, the Schur functor
F : R  R is defined as follows. Given an object X of R, let F(X) be the cokernel of 1 - p : Xn  Xn, or in other words, the coequalizer of the following pair.

p

X n

X n

1

Given a morphism f : X  Y in C, let F(f ) be the unique map F(X)  F(Y ) such that

X n

F(X )

f n

!F(f )

Y n

F(Y )

commutes, where the horizontal arrows are the cokernel maps. More generally, for a polynomial species  : S  FinVect, define the Schur functor

F : R  R
as follows. We can write  as a finite direct sum of irreducible representations of symmetric groups Sn for various n:

 = Vi
i

and then define

F(-) = Fi(-).
i

A useful alternative way of setting up the definition of F begins by putting together the left action
l : k[Sn]  Xn  Xn
(with k[Sn] acting covariantly on Xn) with the right action

r : k[Sn]  k[Sn]  k[Sn]

of k[Sn] acting on itself as right module, by multiplication in the group algebra (with the right action being contravariant). We have a coequalizer diagram

k[Sn]



k[Sn]



X n

r1


k[Sn]



X n



X n

1l

even independent of the fact that 2-rigs do not admit general coequalizers: if a map
f : k[Sn]  Xn  Y coequalizes the two parallel maps, then f factors through the purported coequalizer via the map Xn  Y obtained as the composite

Xn = I  Xn -e-×1 k[Sn]  Xn -f Y
where e : I  k[Sn] names the identity element of the group algebra. We may express this coequalizer as
k[Sn] Sn Xn = Xn

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

11

Then if p is a Young symmetrizer, the coequalizer

p
Xn 1 Xn - F(X)
may thus be identified with a coequalizer

pSn 1
k[Sn] Sn Xn 1 k[Sn] Sn Xn

V Sn X n

induced by a idempotent-splitting coequalizer of right modules

p

k[Sn] 1 k[Sn]

V.

2.2.4. Schur functors are natural. Suppose that we have a symmetric monoidal linear functor G : R  R between 2-rigs. We can think of G as a `change of base category'. We now show that Schur functors are `natural' with respect to change of base.

Proposition 2.4. A Schur functor commutes with any symmetric monoidal linear functor, i.e. for a polynomial species  and a symmetric monoidal linear functor G : R  R, then G  F,R = F,R  G.
Proof. By definition G preserves tensor products, and G will automatically preserve both direct sums by linearity as well as splittings of idempotents (as all functors do). Therefore, for any Young diagram , with corresponding irreducible right module V, we have natural isomorphisms
F,R(GX ) = V,R Sn (GX )n = V,R Sn G(X n) = G(V,R) Sn G(Xn) = G(V,R Sn Xn)
= G(F,R(X))
where the first isomorphism uses the symmetric monoidal structure of G, the second uses the fact that V,R = G(V,R) because there is only one symmetric monoidal linear functor FinVect  D up to isomorphism, and the third uses the symmetric monoidal structure again and preservation of idempotent splittings.
More generally, if  is any polynomial species, then by writing  as a direct sum of irreducible representations V and using the fact that G preserves direct sums, we have
F,R  G = G  F,R.

2.2.5. Definition of abstract Schur functors. As we have seen, Schur functors are defined on any 2-rig R. So, we can define a Schur functor
F,R : R  R
for any polynomial species . Moreover, in Proposition 2.4 we show that if G : R  R is a symmetric monoidal linear functor between 2-rigs, the Schur functors on R and

12

BAEZ, MOELLER, AND TRIMBLE

R are `naturally' compatible, in the sense that the diagram

R G R

F,R

F,R

R

R

G

commutes up to a canonical isomorphism G : F,R  G - G  F,R. Moreover these G fit together sensibly when we compose symmetric monoidal linear functors, in a manner we shall explain.
In this abstract framework, it may be wondered what significant role is played by the representations R of the symmetric group. The natural isomorphisms G which relate the Schur functors across change of base G : R  R are pleasant to observe, but surely this is just some piddling abstract nonsense in the larger story of Schur functors, which are, after all, deeply studied and incredibly rich classical constructions? Let us put the question another way. We have seen the Schur functors F,R : R  R are constructed in a uniform (or `polymorphic') way across all 2-rigs, and this construction is natural with respect to maps between 2-rigs G : R  R. Or rather: not natural in a strict sense, but pseudonatural in the sense that naturality squares commute up to isomorphism G. Now pseudonaturality is a very general phenomenon in 2-category theory. So the question is: among all such pseudonatural transformations S : R  R, what is special about the Schur functors? What extra properties pick out exactly the Schur functors from the class of all pseudonatural transformations?
The perhaps surprising answer is: no extra properties! That is, the Schur functors are precisely those functors that are defined on all 2-rigs and that are pseudonatural with respect to maps between 2-rigs.
Let us now make this precise. Schur functors are defined on certain symmetric monoidal linear categories, but they respect neither the symmetric monoidal structure nor the linear structure. So, we have to forget some of the structure of the objects on which Schur functors are defined. This focuses our attention on the `forgetful' 2-functor

U : 2-Rig  Cat

where:

Definition 2.5. Let 2-Rig denote the 2-category with
· symmetric monoidal Cauchy complete linear categories as objects, · symmetric monoidal linear functors as morphisms, · symmetric monoidal linear natural transformations as 2-morphisms.

We now claim that Schur functors correspond to pseudonatural transformations from U to itself, and morphisms between Schur functors correspond to modifications between these pseudonatural transformations. For the reader unaccustomed to these 2-categorical concepts, we recall:

Definition 2.6. Given two 2-functors V, W : C  D between 2-categories, a pseudonatural transformation  : V  W is a rule that assigns to each object x of C a morphism x : V (x)  W (x) of D, and to each morphism f : x  y of C an

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

13

invertible 2-morphism f of D:

V (x) V (f)
f x

V (y)
x

W (x)

W (y)

W (f )

such that the following pasting diagram equalities hold:

V (x) V (f) V (y) V (g) V (z)

V (x) V (gf) V (z)

f x

y

g

= z

x

gf

z

W (x)

W (y)

W (z)

W (f )

W (g)

W (x)

W (z)

W (gf )

and

V (x) V (1x)

x

1x

V (x)
x

= 1x

W (x)

W (x)

V (1x)

Definition 2.7. With notation as above, let ,  : V  W be two pseudonatural transformations. A modification m :    is a rule which associates to each object x of C a 2-morphism m(x) : (x)  (x) of D such that the following compatibility condition holds:

V (x) V (f) V (y)

V (x) V (f) V (y)

x

f

 =  y mx y

x mx x

f

y

W (x)

W (y)

W (f )

W (x)

W (y)

W (f )

Given two 2-functors V, W : C  D between 2-categories, let [V, W ] be the category with pseudonatural transformations  : V  W as objects and modifications between these as morphisms.

We now propose our conceptual definition of the category of Schur functors:

Definition 2.8. A Schur functor is a pseudonatural transformation S : U  U, where U : 2-Rig  Cat is the forgetful 2-functor. A morphism of Schur functors is a modification between such pseudonatural transformations. Let Schur = [U, U] be the category with Schur functors as objects and modifications between these as morphisms.

What this proposed definition makes manifestly obvious is that Schur functors are closed under composition. This will provide a satisfying conceptual explanation of `plethysm'.

14

BAEZ, MOELLER, AND TRIMBLE

3. Equivalence with polynomial species

Our first main result, Theorem 3.1, will be that Schur is equivalent to Poly. But before launching into the proof, it is worth pondering an easier problem where we replace categories by sets and 2-rigs by rings. So, let Ring be the category of rings (commutative, as always). There is a forgetful functor

U : Ring  Set.

What are the natural transformations from this functor to itself? Any polynomial P  Z[x] defines such a natural transformation, since for any ring R there is a function PR : U(R)  U(R) given by
PR : x  P (x)
and this is clearly natural in R. But in fact, the set of natural transformations from this functor turns out to be precisely Z[x]. And the reason is that Z[x] is the free ring on one generator!
To see this, note that the forgetful functor

U : Ring  Set

has a left adjoint, the `free ring' functor

F : Set  Ring.

The free ring on a 1-element set is F (1) = Z[x]

and homomorphisms from F (1) to any commutative ring R are in one-to-one correspondence with elements of the underlying set of R, since
U(R) = Set(1, U(R)) = Ring(F (1), R).

So, we say F (1) represents the functor U. This makes it easy to show that the set of natural transformations from U to itself, denoted [U, U], is isomorphic to the underlying set of Z[x], namely U(F (1)):
U(F (1)) = Ring(F (1), F (1)) = [Ring(F (1), -), Ring(F (1), -)] = [U, U].
In the first step here we use the representability U = Ring(F (1), -), in the second we use the Yoneda lemma, and in the third we use the representability again.
We shall carry out a categorified version of this argument to prove that Schur is equivalent to Poly. The key will be showing that just as Z[x] is the free ring on one generator, Poly is the free 2-rig on one generator.
We now build a bridge from abstract Schur functors as pseudonatural transformations to polynomial species. For this, we reserve the right to regard a polynomial species  as a functor Sop  Vect (taking advantage of the evident isomorphism S = Sop by inverting group elements), given by a sequence of right Sn-modules (n).

Theorem 3.1. There is an equivalence of categories Poly  Schur which sends any polynomial species  : S  FinVect to the Schur functor F defined by the formula

F,R(x) =

(n) k[Sn] xn

n

for any 2-rig R and any object x  R.

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

15

In what follows we use kS to denote the `k-linearization' of the symmetric groupoid: that is, the linear category formed by replacing the homsets in S by the free k-vector spaces on those homsets. This means that for each object n of kS, we may speak of the representable functor kS(-, n) : kSop  Vect. We use kS to denote the Cauchy
completion of kS as a linear category. As we shall see, kS is the free 2-rig on one generator. To be careful, we use U(kS) to denote its underlying category. We construct the equivalence in Theorem 3.1 in several steps:

Poly  U(kS)

Theorem 3.2

 2-Rig(kS, kS)

Theorem 3.3

 [2-Rig(kS, -), 2-Rig(kS, -)] 2-categorical Yoneda Lemma

 [U, U] = Schur

Theorem 3.3.

The equivalences here are equivalences of categories, but since kS is a 2-rig they give
a way to make Poly and Schur into 2-rigs as well. We describe the resulting 2-rig
structure on Poly in Proposition 3.9, and on Schur in Proposition 3.10.
In general, the Cauchy completion (or `Karoubi envelope') C of a linear category C consists of the full subcategory of linear functors Cop  Vect that are retracts of finite direct sums of representables C(-, c) : Cop  Vect [BD86]. In the case C = kS
we can identify this Cauchy completion with Poly as follows:

Theorem 3.2. The functor Poly  U(kS) which sends a polynomial species  : S  FinVect to its unique extension to a linear functor kS  FinVect is an equivalence.

Proof. Since S is a groupoid we can identify a polynomial species  : S  FinVect

with a functor Sop  FinVect, and this in turn extends uniquely to a linear functor

kSop  FinVect. Every polynomial species  is a finite coproduct

n j=0

(j)

where

(j) : S  FinVect vanishes on all objects i = j. By Maschke's theorem, each

representation of Sj is the retract of a finite sum of copies of the group algebra

k[Sj], which corresponds to the representable kS(-, j). Thus, the polynomial species correspond precisely to the linear functors kSop  FinVect that are in the Cauchy

completion kS.

Next we prove that kS is the free 2-rig on one generator and use this to show that it represents the forgetful 2-functor from 2-rigs to categories.

Theorem 3.3. The forgetful 2-functor

U : 2-Rig  Cat

has a left 2-adjoint F : Cat  2-Rig, and U is represented by F (1) = kS. In other words:
2-Rig(kS, -)  U(-)
This equivalence sends any morphism of 2-rigs  : kS  R to the object (1) in U (R).

As a first step toward this, we write U as a composite of three functors, each of which have left 2-adjoints:

S

k(-)

(-)

Cat  SMCat  SMLin  2-Rig

U0

U1

U2

16

BAEZ, MOELLER, AND TRIMBLE

The 2-rig kS is obtained by applying the composite of these left adjoints to the terminal category 1, so we say kS is the free 2-rig on one generator. We construct these 2-adjunctions in the lemmas below. We shall need a number of 2-categories:

Definition 3.4. Let SMCat be the 2-category of
· symmetric monoidal categories, · (strong) symmetric monoidal functors, and · monoidal natural transformations.
Let Lin be the 2-category of
· linear categories, · linear functors, and · linear natural transformations.
Let SMLin be the 2-category of
· symmetric monoidal linear categories, · symmetric monoidal linear functors, and · symmetric monoidal linear natural transformations.
Let CauchLin be the 2-category of
· Cauchy complete linear categories, · linear functors, and · linear natural transformations.

Lemma 3.5. The forgetful 2-functor

U0 : SMCat  Cat

has a left 2-adjoint

S : Cat  SMCat

such that S(1) is equivalent as a symmetric monoidal category to S. In particular, the
functor x : 1  U0C which picks out an object x in a symmetric monoidal category C corresponds to the symmetric monoidal functor x : S  C with n  xn.

Proof. See [BKP89], and also [FGHW08, Sec. 4.1].

Lemma 3.6. The forgetful 2-functor

U1 : SMLin  SMCat

has a left 2-adjoint

k(-) : SMCat  SMLin.

In particular, the symmetric monoidal functor x : S  U1C such that x(n) is the object xn in a symmetric monoidal linear category C corresponds to the symmetric
monoidal linear functor x : kS  C such that n  xn.

Proof. The underlying 2-functor Lin  Cat has a left 2-adjoint k(-) : Cat  Lin [Bor94, Prop. 6.4.7]. Given any category C, kC is the linear category with the same objects whose hom-spaces are the free vector spaces on the homsets of C. The 2functor k(-) is also given by `change of base' along the strong symmetric monoidal functor sending any set to the free vector space on that set. It therefore sends symmetric pseudomonoids [DS97] in Cat to symmetric pseudomonoids in Lin. In other words, it sends symmetric monoidal categories to symmetric monoidal linear

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

17

categories. Therefore, the 2-adjunction k(-)  U0 between Cat and Lin lifts to one between SMCat and SMLin:

k(-)
SMCat  SMLin
U1
Lemma 3.7. The forgetful 2-functor

U2 : 2Rig  SMLin

has a left 2-adjoint
(-) : SMLin  2Rig
making 2Rig into a reflective sub-2-category of SMLin. In particular, for a 2-rig C, a symmetric monoidal linear functor x : kS  U2C that picks out an object x in the underlying symmetric monoidal linear category of C corresponds to a unique symmetric monoidal linear functor x : kS  C such that   n (n) k[Sn] xn.
Proof. Linear Cauchy completion gives a 2-reflector (-) : Lin  CauchLin which is left 2-adjoint to the 2-embedding i : CauchLin  Lin, and again the 2-adjunction (-)  i lifts to the level of symmetric monoidal structure to give a 2-adjunction

(-)
SMLin  2-Rig.
U2
For this, we introduce a tensor product  appropriate to Cauchy complete linear categories C, D: it is simply the (linear) Cauchy completion of the tensor product of their underlying linear categories:
C  D = UC  UD.
Objects of C  D are thus retracts of finite coproducts of tensor products i ci  di where such sums are formally defined as coproducts of linear functors C(-, ci)  D(-, di) : (UC  UD)op  Vect. It is worth remarking that `bilinearity relations', e.g.
(c  c)  d = (c  d)  (c  d),
do not need to be imposed, but are automatically built into the definition of C  D, due to the absoluteness of coproducts as Vect-enriched colimits.
A useful fact is that for linear categories A, B, there is a canonical enriched functor A  B  A  B. This amounts to asserting a canonical equivalence

UA  UB  A  B.

18

BAEZ, MOELLER, AND TRIMBLE

To prove this, it suffices to show that UA  UB and A  B have equivalent enriched presheaf categories. But
[(U A  U B)op, Vect]  [U Aop  U Bop, Vect]  [U Aop, [U Bop, Vect]]  [U Aop, [Bop, Vect]]  [Aop, [Bop, Vect]]  [(A  B)op, Vect]

because the enriched presheaf category of any enriched category is equivalent to that of its Cauchy completion [Kel05, Str83]. Thus, Cauchy completion becomes a
strong monoidal 2-functor (-) : (Lin, )  (CauchLin, ). Even better, this 2functor is symmetric monoidal, so it sends symmetric pseudomonoids to symmetric pseudomonoids. In other words, it sends symmetric monoidal linear categories to symmetric monoidal Cauchy complete linear categories.
To check that the formula given for the extension x : kS  C of x : kS  C to the Cauchy completion is correct, we check that it matches x when we apply it to representables. On a representable, we have

kS(m, -)  kS(m, n) k[Sn] xn
n
= k[Sm] k[Sm] xm = xm
= x(m).

Proof of Theorem 3.3. The underlying 2-functor U : 2-Rig  Cat is the composite 2-Rig --U2 SMLin --U1 SMCat --U0 Cat

and thus by the above lemmas we have pseudonatural equivalences
2-Rig(kS, -) = SMLin(kS, U2-) = SMCat(S, U1U2-) = U0U1U2 = U

so that kS is the representing object for U.

Proof of Theorem 3.1. First we describe a chain of equivalences

Poly  U(kS)  2-Rig(kS, kS)  [2-Rig(kS-), 2-Rig(kS, -)]  [U, U] = Schur

and then we explicitly describe the Schur functor corresponding to a polynomial species. Let   Poly and let R be any 2-rig.
· We have Poly  U(kS) by Theorem 3.2. Denote the counterpart of  under this equivalence by   U(kS).
· We have U(kS)  2-Rig(kS, kS) by Theorem 3.3. Thus the functor  : 1  U(kS) admits a unique extension to a morphism of 2-rigs  : kS  kS.

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

19

· We have 2-Rig(kS, kS)  [2-Rig(kS, -), 2-Rig(kS, -)] by the 2-categorical Yoneda lemma [JY21, Ch. 8]. Thus  gives a pseudonatural transformation
 : 2-Rig(kS, -)  2-Rig(kS, -),
the R component of which, R, maps any morphism of 2-rigs  : kS  R to the composite   . · Theorem 3.3 gives an equivalence 2-Rig(kS, R)  U(R) mapping  : kS  R to (1). The inverse of this sends x  R to x : kS  R. Conjugating by this equivalence gives an equivalence
[2-Rig(kS, -), 2-Rig(kS, -)]  [U, U].
and this maps  to F  [U, U ]. We now calculate F explicitly by seeing how F,R acts on an object x  R. Passing x through the equivalence R  2-Rig(kS, R), we obtain

x : kS  R.

Acting on x with , we obtain

kS - kS -x R

Turning this back into an object of U(R) by evaluating at the generator  : 1  kS, we obtain
1 - kS - kS -x R,

which is really just

1 - kS -x R.

By the formula for x in Lemma 3.7 we obtain

x() = (n) k[Sn] xn
n
and by our calculation this is FR,(x).

A corollary is that by transport of structure across equivalences, the monoidal product on any of the categories

2-Rig(kS, kS)  [2-Rig(kS, -), 2-Rig(kS, -)]  [U, U],

given in each case by endofunctor composition, induces a monoidal product on Poly or U(kS), called plethysm or substitution product, and denoted

· : U(kS) × U(kS) - U(kS).

We return to this theme in Section 5, where we discuss the general notions of plethories and 2-plethories. For now, we state the calculation:

Corollary 3.8. For polynomial species ,  : Sop  Vect, the substitution product is given by the formula

· =

(n) k[Sn]  n

n

and this defines a monoidal product whose monoidal unit is S(-, 1) : Sop  Vect.

20

BAEZ, MOELLER, AND TRIMBLE

Proof. In the proof of Theorem 3.1 where we calculate F, put R = kS, and put x =  . The composite
kS - kS - kS, which is the monoidal product    in 2-Rig(kS, kS), is sent by the functor
2-Rig(kS, kS)  U(kS)
to the composite
1 - kS - kS - kS = 1 - kS - kS

which names the object  () = (n) k[Sn]  n,
n
again by Lemma 3.7. This completes the proof.

The transport-of-structure method gives at once both the fact that plethysm on U(kS) defines a monoidal product, and that we have monoidal equivalences

U(kS), ·  2-Rig(kS, kS),   ([U, U], ) .

We now use Theorems 3.1 and 3.2 to transport structure in the other direction, transferring the 2-rig structure on kS to Schur and Poly. Their structure as linear categories is evident, so the real question is: what do the tensor products on these categories look like? We first answer this question for Poly, and then for Schur.
The category of polynomial species inherits a monoidal structure from S via Day convolution. In fact it has two, but here we consider the one arising from the additive monoidal structure on S, which is given on the level of objects by adding natural numbers, and on the morphism level by group homomorphisms

Si × Sj  Si+j that juxtapose permutations. These can be linearized to give algebra maps

k[Si]  k[Sj]  k[Si+j]
which give the monoidal category structure of kS. This monoidal structure uniquely extends via Day convolution to the Cauchy completion kS, which is intermediate between kS and the category of Vect-valued presheaves on kS. The general formula for the Day convolution product applied to presheaves ,  : Sop  Vect is

(  )(n) =

((i)  (j)) k[Si×Sj] k[Sn]

i+j=n

By restriction and the isomorphism S = Sop coming from the fact that S is a

groupoid, this formula gives a tensor product on polynomial species. This tensor

product is a kind of categorification of the usual definition of product of ordinary

polynomials, where given

F (x) =

fixi i!

0iM

G(x) =

gj xj j!

0jN

the nth Taylor coefficient of the product F (x)G(x) is

n! i!j!

figj

.

i+j=n

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

21

In summary:

Proposition 3.9. The 2-rig kS is equivalent to Poly made into a 2-rig whose tensor product is given by Day convolution with respect the additive monoidal structure on S.

Next we turn to the corresponding 2-rig structure on Schur.

Proposition 3.10. The 2-rig kS is equivalent to Schur made into a 2-rig with the pointwise tensor product: given F, G  Schur their tensor product F  G has
(F  G)R(x) = FR(x)  GR(x)
for any 2-rig R and any object x  R. This formula also holds for morphisms in R.

Proof. We prove this using Theorem 3.1. Given F, G  Schur, up to isomorphism we may assume
FR(x) = (n) k[Sn] xn
n
and GR(x) = (n) k[Sn] xn
n
for some polynomial species , . Then the tensor product of F and G corresponding to the Day tensor product of  and  is

(F  G)R(x) = =

(  )(n) k[Sn] xn
n
((i)  (j)) k[Si×Sj] k[Sn] k[Sn] xn
n i+j=n

=

((i)  (j)) k[Si×Sj] xn

n i+j=n

=

(i) k[Si] xi 

i

= FR(x)  GR(x).

(j) k[Sj] xj
j

The same argument applies to morphisms in R.

Using these propositions we can equip Schur or Poly with the structure of a 2-rig, making either one into the free 2-rig on one generator. However, in what follows we usually adhere to this discipline: we use kS to stand for the free 2-rig on one generator, and Schur  U(kS) for the underlying category.

4. The 2-birig structure on Schur functors
Now we turn to the 2-birig structure of Schur. It is again helpful to start with a warmup exercise one step down the n-categorical ladder. In Section 1 we described the `co-operations' on the biring Z[x]. But we did not explain in detail how these co-operations arise. Let us do this now--but in the closely related case of the birig N[x].
First, recall that a rig (also called `semirings') is a set R with a commutative monoid structure (R, +, 0) and a commutative monoid structure (R, ·, 1) such that · distributes over + and 0 · r = 0 for all r  R. Commutative monoids admit a tensor product analogous to that of abelian groups, which we denote by .

22

BAEZ, MOELLER, AND TRIMBLE

This leads to a more highbrow definition of a rig: it is a commutative monoid in (CommMon, ) The category of commutative monoid objects in a symmetric monoidal category (C, ) is always cocartesian, with the tensor product  serving to give the coproduct of commutative monoid objects. Thus (Rig, ) is a cocartesian monoidal category. In other words, (Rigop, ) is cartesian monoidal.
Now, a birig is a rig B such that the functor Rig(B, -) is equipped with a lift B as follows:

Ring

B



U

Rig

Set

Rig(B,-)

where U picks out the underlying set of a rig. However, we can equivalently say that a birig is a rig object in the cartesian monoidal category (Rigop, ). Let us explain why.
Concretely, a rig object in (Rigop, ) is just a rig B equipped with these rig homomorphisms:

· coaddition:  : B  B  B · co-zero: o : B  N · comultiplication: µ : B  B  B · co-one:  : B  N

obeying dualized versions of the ring axioms. Note that N appears here because it is the initial rig, hence terminal in Rigop.
How do we get a rig object in Rigop from a rig B for which Rig(B, -) is equipped with a lift to a functor B : Rig  Rig? We can illustrate this by constructing the coaddition  : B  B  B. This comes from addition, as follows.
Since addition is defined for every rig and is preserved by rig homomorphisms, it defines a natural transformation from U × U to U:

+R : U(R) × U(R)  U(R)

(r, s)

 r + s.

By the triangle above this gives a natural transformation

Rig(B, -) × Rig(B, -)  Rig(B, -),

but the functor at left is naturally isomorphic to Rig(B  B, -), since B  B is the coproduct in Rig of two copies of B. We thus obtain a natural transformation

Ring(B  B, -)  Ring(B, -).

By Yoneda, this comes from a rig homomorphism

: B  B B

and we define this to be coaddition for the birig B. We can similarly construct all the other co-operations that a birig has, and check that they obey dualized versions of the rig laws.
How can we use these ideas to actually compute the birig co-operations for N[x], the rig of polynomials with natural number coefficients in one variable? Since N[x] is the free rig on one generator, homomorphisms from it to any other rig correspond

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

23

to elements of that rig, and it becomes a birig with the identity functor as lift:

Rig

1

U

Rig

Set

Rig(N[x],-)

Coaddition  : N[x]  N[x]  N[x] is the homomorphism such that precomposing with  gives a function  that makes this square commute for any rig R:
Rig(N[x]  N[x], R)  Rig(N[x], R)

 

U(R) × U(R)

+

U (R).

where + comes from addition on R. Let us show that

(x) = x  1 + 1  x.

To prepare for later calculations let us identify N[x]  N[x] with N[x, y] and write

(x) = x + y.

Just as homomorphisms from N[x] to R correspond to elements of U(R), homomorphisms f : N[x, y]  R correspond to pairs (r, s)  U(R) × U(R) as follows:

f (x) = r, f (y) = s

Since

(f )(x) = f (x + y) = r + s.

we see  indeed corresponds to addition in R as desired. The same sort of calculation lets us determine all the co-operations on N[x]:

· coaddition: (x) = x + y  N[x, y] · co-zero: o(x) = 0  N · comultiplication: µ(x) = xy  N[x, y] · co-one: (x) = 1  N.

With our warmup exercise complete, we can now copy this reasoning to show that Schur is a 2-birig and compute some of its co-operations. First:

Definition 4.1. A 2-birig is a 2-rig B for which the functor 2-Rig(B, -) is equipped with a lift to a functor B : 2-Rig  2-Rig:

2-Rig

2-Rig

B



U

Cat.
2-Rig(B,-)

To describe the 2-birig structure on Schur, recall that we have made Schur into a 2-rig equivalent to kS. So, we start by putting a 2-birig structure on kS. By Theorem 3.3 we know that kS represents the 2-functor U. This makes kS into a

24

BAEZ, MOELLER, AND TRIMBLE

2-birig with the identity lift:

2-Rig

1



U

2-Rig

Cat.

2-Rig(kS,-)

From this we can compute co-operations on kS, just as we did in our warmup exercise. For this we need to show that just as Rigop is a cartesian category, 2-Rigop is a cartesian 2-category.
We saw that (Rigop, ) is cartesian monoidal by noting that the category of commutative monoids in any symmetric monoidal category is cocartesian monoidal, and rigs are commutative monoid objects in (CommMon, ). We now categorify this argument replacing CommMon with CauchLin (see Definition 3.4). In the proof of Lemma 3.7 we saw that (CauchLin, ) is a symmetric monoidal 2-category. The unit object for this symmetric monoidal 2-category is FinVect.
A 2-rig R is a symmetric monoidal linear category that is also Cauchy complete. Thus, it comes with a tensor product or multiplication
m: R  R  R
which is a morphism in CauchLin. It also comes with a unit object I  R, which determines a morphism
I : FinVect  R
in CauchLin, unique up to natural isomorphism, such that i(k) = I. It also comes with an associator, left and right unitors, and symmetry that are 2-morphisms in CauchLin, obeying the usual equations in the definition of symmetric monoidal category. We may summarize all this by saying that a 2-rig is a symmetric pseudomonoid in the symmetric monoidal 2-category (CauchLin, ).
Given 2-rigs R and R there is a natural way to make R  R into a 2-rig. The multiplication in R  R is the composite
(R  R)  (R  R) -1--S-R-,R-1 (R  R)  (R  R) -m--m R  R
where m is the multiplication for R, m is the multiplication for R, SR,R is the symmetry in (CauchLin, ), and we have suppressed associators. The unit for R  R is
FinVect - FinVect  FinVect -I-I R  R
where I is the unit for R and I is the unit for R. The rest of the 2-rig structure is equally straightforward. The interesting fact is that this tensor product of 2-rigs is their coproduct:
Lemma 4.2. The symmetric monoidal 2-category 2-Rig is cocartesian, with the coproduct of R, R  2-Rigop being R  R.
Proof. This follows from a general result proved by Sch¨appi [Sch14, Thm. 5.2]: given symmetric pseudomonoids M and M in a symmetric monoidal bicategory (C, ), there is a natural way to make M  M into a symmetric pseudomonoid, of which the tensor product of 2-rigs is an example. Furthermore there is a 2-category of symmetric pseudomonoids in (C, ), and this is cocartesian in the 2-categorical sense, with M  M being the 2-categorical coproduct of M and M.

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

25

We now compute the coaddition
 : kS  kS  kS. For this it is helpful to note that, just as the ring Z[x]  Z[x] is isomorphic to Z[x, y], kS  kS is equivalent to kS(2). Indeed:

Lemma 4.3. The following are equivalent Cauchy complete linear categories: · (kS)n
· kS(n)
· the linear category of n-variable polynomial species: functors Sn  FinVect such that F (x) = {0} except for finitely many isomorphism classes of objects x, and natural transformations between these.
The underlying category of any of these is equivalent to the category of n-variable Schur functors, [Un, U].

Proof. First we show that (kS)n  kS(n). Since S is a left adjoint, S(n) is the n-fold coproduct of S(1)  S in SMCat. Since SMCat has biproducts in the 2categorical sense [FS19, Thm. 2.3], this n-fold coproduct is equivalent to Sn. We thus have these equivalences in CauchLin:
kS(n)  k(Sn)  (kS)n  (kS)n.
Here the second uses the fact that k(-) : SMCat sends products of categories to tensor products of linear categories (cf. the proof of Lemma 3.6). The third uses the fact that (-) preserves the tensor product of linear categories (cf. the proof of Lemma 3.7).
The equivalence of kS(n) to the linear category of n-variable polynomial species can be shown using the same style of argument as in the proof of Theorem 3.2.
Finally, note that
[U n, U ]  [2-Rig(kS, -)n, 2-Rig(kS, -)]  2-Rig(kS, kSn)  U (kSn).
Here the first equivalence comes from Theorem 3.3, the second comes from the 2categorical Yoneda lemma and the fact that (kS)n is the n-fold coproduct of kS, and the third is Theorem 3.2.
We can trace through the equivalences to make explicit the equivalence
 : U (kSn)  [U n, U ].
An object of U(kSn) is, by definition, an object of the linear Cauchy completion of (kS)n  k(Sn)  k(S(n)). It is given by a collection F of finite-dimensional representations of n-fold products of symmetric groups, i.e. functors
F (m1, . . . , mn) : Sm1 × · · · × Smn  Vect
that are zero-dimensional except for finitely many tuples (m1, . . . , mn) of natural numbers.
For R a 2-rig, given a tuple of objects x = (x1, . . . , xn)  Un(R), there is a corresponding symmetric monoidal functor Sn  R that is uniquely induced by the tuple x. It takes the object m = (m1, . . . , mn)  Sn to xm = xm1  · · ·  xmn. The symmetric group Sm1 × . . . × Smn acts on this object by permuting tensor factors,

26

BAEZ, MOELLER, AND TRIMBLE

and symmetric algebras kSm1  . . .  kSmn act linearly on such objects. In other words, from the tuple x we derive a symmetric monoidal linear functor

(kS)n  Vect

uniquely up to isomorphism. Finally, passing up to the Cauchy completions, we obtain a single object of R defined by the formula

(F )(x1, . . . , xn) =

F (m1, . . . , mn) k(Sm1 )···k(smn ) (xm1  . . .  xmn ),

m=(m1,...,mn)

which, adapting a familiar multi-index notation m = (m1, . . . , mn), might be be more neatly written as

(F )(x) =

mSn
F (m) · xm =

F (m) Sm xm.

m

It follows that the functor U × U is represented by kS  kS  kS(2). Coaddition can then be defined to be the morphism of 2-rigs

 : kS  kS(2)
such that precomposition with this gives a functor  for which this square commutes up to a natural isomorphism:

2-Rig(kS(2), R)  2-Rig(kS, R)


 

U(R) × U(R)



U (R).

We can follow the proof of the Yoneda lemma to determine what  must be. Put R = kS(2), and let x denote the object generating kS, and x, y the generators of kS(2). Chasing the identity object

1  2-Rig(kS(2), kS(2))
around the square, the left vertical functor takes 1 to the pair (x, y); applying the bottom horizontal map, we arrive at x  y. On the other hand, (1) = 1   = , and this maps down to the value (x), which as we just saw must match x  y. Hence
 : kS  kS(2)
must be the 2-rig map, unique up to isomorphism, such that (x) = x  y in kS(2). We can determine other co-operations on kS in the same way. Beyond those
present in a birig, a 2-birig has other types of co-operations: for example, corresponding to the operation of splitting idempotents, a 2-birig has a `co-splitting', which we do not describe here. We only describe the four `classical' co-operations:
· coaddition: (x) = x  y  kS(2) · cozero: o(x) = 0  FinVect · comultiplication: µ(x) = x  y  kS(2) · co-one: (x) = 1  FinVect.

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

27

Next we interpret the 2-birig structure of kS directly in terms of Schur. Recall that having an object F  Schur is the same as having an endofunctor FR : U(R)  U(R) on the underlying category of every 2-rig R, depending pseudonaturally on R. This is a technical statement, but we may think of it as saying that a Schur functor F : U  U is a unary functorial operation that is definable in the language of 2-rigs. Similarly, a 2-variable Schur object is the same as an endofunctor FR : U(R)×U(R)  U(R) that depends pseudonaturally on R, or a binary functorial operation definable in the language of 2-rigs. Our next result gives straightforward interpretations of operations and co-operations on kS in terms of their effect on Schur objects.
Theorem 4.4. Under the equivalence U(kS)  [U, U], the 2-rig operations on U(kS) correspond to 2-rig operations on [U, U] as follows:
· addition: Coproduct  : U(kS) × U(kS)  U(kS) corresponds to pointwise coproduct, where F  G  Schur is given by
(F  G)R(r) = FR(r)  GR(r)
where  on the right is the biproduct in R. · zero: the initial object 0 in U(kS) corresponds to pointwise 0  Schur given
by 0R(r) = 0
where 0 at right is the zero object in R. · multiplication: The convolution product  : U(kS) × U(kS)  U(kS) corre-
sponds to pointwise tensor: F  G  Schur is given by
(F  G)R(r) = FR(r)  GR(r).
· one: The convolution unit I of U(kS) corresponds to the pointwise monoidal unit I  Schur given by IR(r) = I
where I at right is the unit for the tensor product in R. Under the equivalences U(kSn)  [Un, U], co-operations on the 2-rig kS correspond to precomposition with operations as follows:
· coaddition: U() : U(kS)  U(kS2) corresponds to precomposition [, U] : [U, U]  [U2, U], taking F : U  U to F   : U2  U given by
(F  )R(r, s) = FR(r  s).
· co-zero: U(o) : U(kS)  FinVect corresponds to precomposition with, i.e. evaluation at, 0: the corresponding map [U, U]  [1, U] is given by
(F  0)R = FR(0).
· comultiplication: U(µ) : U(kS)  U((kS)2) corresponds to precomposition [, U] : [U, U]  [U2, U], taking F : U  U to F   : U2  U given by
(F  )R(r, s) = FR(r  s).
· co-one: U() : U(kS)  FinVect corresponds to precomposition with, i.e. evaluation at, the monoidal unit I: the corresponding map [U, U]  [1, U] is given by (F  I)R = FR(I).

28

BAEZ, MOELLER, AND TRIMBLE

Proof. That the convolution product  corresponds to pointwise tensor on Schur was the content of Proposition 3.10, and the other operations are evident.
On the other hand, as we saw in the case of coaddition using the Yoneda lemma, each co-operation cited in the theorem, of the form
 : kS  kSn  kS(n),

is defined to be the 2-rig map, uniquely determined up to isomorphism, such that

(x) = b(x1, . . . , xn)
where x1, . . . , xn are the generators of kS(n), and b : U(kS(n))n - U(kS(n)) is the corresponding Schur-functor operation evaluated at R = kS(n). Finally, according to these definitions, we have a square

[U, U ] [b,U] [U n, U ]


 

U (kS)

U (kS(n))

U ()

that commutes up to a 2-cell isomorphism, using Theorem 3.1. Chasing an object F  [U, U] both ways around the square, this says precisely that the co-operation  corresponds to the assignment F  F b, as stated for each case in the theorem.

5. Plethories, plethysm, and 2-plethories
We have defined a birig to be a rig B together with a lifting B of the representable functor Rig(B, -) : Rig  Set through the forgetful functor U : Rig  Set.
We have an analogous categorified notion of 2-birig. We now present another viewpoint on these notions, which paves the way for a simple definition of rigplethory, and then of 2-plethory: that a birig is simply an endofunctor
 : Rig  Rig
that is a right adjoint. None of this depends on special features of Rig, beyond the fact that the forgetful functor U : Rig  Set is monadic. Thus, we might as well work more generally.
5.1. M-plethories. For this section, let M be a monad on Set and MAlg its Eilenberg­Moore category, with free-forgetful adjunction as below.
F
Set  MAlg
U
In order to define M-plethories we introduce M-bialgebras. The two monads to keep in mind are those for rings and rigs. When M is the monad for rings an M-bialgebra will be a biring, and when M is the monad for rigs an M-bialgebra will be a birig.

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

29

Definition 5.1. An M -bialgebra is an M-algebra B equipped with a lift B of the functor MAlg(B, -) : MAlg  Set through U:

M Alg

B



U

M Alg

Set.

M Alg(B,-)

Two other equivalent definitions of M-bialgebra will often be more useful. For these we need some lemmas.

Lemma 5.2. If a functor G : C  Set is a right adjoint, then it is representable. Moreover, G is represented by F (1), where F is left adjoint to G.

Proof. For any such functor G : C  Set with a left adjoint F , we have natural

isomorphisms

G = Set(1, G(-)) = C(F (1), -)

(where the first exists for any functor with codomain Set), so that F (1) is a repre-

senting object for G.

Lemma 5.3. A right adjoint endofunctor  : MAlg  MAlg determines, uniquely up to isomorphism, an M-algebra B which carries an M-bialgebra structure with lift given by .

Proof. The composite U is a right adjoint. Lemma 5.2 then tells us that there is an M-algebra B such that U = MAlg(B, -), which is precisely the condition of  lifting MAlg(B, -) through U.

Theorem 5.4. Any lift B : MAlg  MAlg of a representable MAlg(B, -) : MAlg  Set is a right adjoint.

Proof. The proof uses some well-known facts:
(1) Every representable functor MAlg(B, -) : MAlg  Set has a left adjoint, denoted B · -. This takes a set X to the coproduct B · X in MAlg of an X-indexed collection of copies of B.
(2) A lift B of MAlg(B, -) through U is precisely equivalent to a left M-algebra structure on the representable MAlg(B, -): that is, a natural transformation

 : M  MAlg(B, -)  MAlg(B, -)

obeying the usual axioms for M-algebras (this fact is the 2-universal property of the Eilenberg­Moore construction). (3) Giving such an M-algebra structure  is equivalent to giving a morphism of monads
M  MAlg(B, -)  (B · -) = MAlg(B, B · -)

and it is also equivalent to giving a right M-algebra structure  : (B · -)  M  (B · -)

which may also be written as  : B · M-  B · -. The counit  of the adjunction (B · -)  MAlg(B, -) coequalizes the following parallel pair:

M Alg(B,-)

B · MAlg(B, -)

B · MAlg(B, -)



Id

B·T

30

BAEZ, MOELLER, AND TRIMBLE

(4) MAlg is cocomplete [Bor94, Theorem 4.3.5], and in particular has reflexive coequalizers.
Now, the existence of a left adjoint B of B may be exhibited directly as follows. It suffices to show that for any M-algebra R, the functor MAlg(R, B-) : MAlg  Set is representable; the representing object S is then the value BR. Let  : MUR  UR denote the M-algebra structure on UR afforded by the structure of R as an Malgebra. We form S as the coequalizer of the following reflexive pair:

UR

B · MUR

BF · UR.

B·

(This coequalizer might be suggestively written as (B · -) M UR, recalling the construction of a tensor product of a right M-module (B · -) with a left M-module UR.) The rest follows the proof of the adjoint lifting theorem [Bor94, Theorem 4.5.6 and Exercise 4.8.6], although we have given enough hints that the patient reader could work out the details.

We defined an M-bialgebra to be an M-algebra B equipped with a lift B of the functor MAlg(B, -) it represents. Theorem 5.4 then tells us that B is necessarily a right adjoint. Conversely, Lemma 5.3 tells us that any right adjoint MAlg  MAlg is a lift of a representable, and thus determines an M-bialgebra. If one takes morphisms of M-bialgebras as pointing in the same direction as morphisms of their underlying M-algebras B (hence in the direction opposite to natural transformations between representable functors MAlg(B, -), where B is in the contravariant argument), then that direction is in alignment with identifying M-bialgebras with left adjoint endofunctors on MAlg. We thus have an equivalence of categories

MBialg  LAdj(MAlg, MAlg).

The category LAdj(MAlg, MAlg) is a monoidal category where the monoidal product is endofunctor composition. This monoidal product transports across the equivalence, making MBialg into monoidal category. We denote the monoidal product of two M-bialgebras B and C by B  C. The identity functor on MAlg is the unit for endofunctor composition, and by Lemma 5.2 this identity functor corresponds to the M-bialgebra F (1), so the monoidal unit for  must be F (1).
Given an M-bialgebra B, we let Bo denote its underlying M-algebra, and temporarily write F (1) to mean the above M-bialgebra. Write B for the left adjoint of the endofunctor lift B.

Lemma 5.5. There are natural isomorphisms Bo = (B  F (1))o = B(F (1)o).

Proof. The mate of the natural isomorphism U  B = M Alg(Bo, -)
is a natural isomorphism B  F = Bo · -
where U = MAlg(F (1), -) has left adjoint F = F (1) · -. Applying B  (F (1)o · -) = Bo · -
to the terminal set 1 we obtain B(F (1)o) = Bo.

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

31

Proposition 5.6. Let B and C be M-bialgebras. Then there is a natural M-algebra isomorphism
B,C : (B  C)o - B(Co).
Proof. This isomorphism is the composite of natural isomorphisms we have seen: (B  C)o = BC(F (1)) = BC(F (1)) = B(Co).
With this proposition in hand, for an M-bialgebra B there is no real harm in using B  C both for the monoidal product (if C is an M-bialgebra) and for the value of the left adjoint B(C) (if C is merely an M-algebra), letting the meaning be inferred from context. In fact, what we have is an actegory structure whereby the monoidal category MBialg acts on MAlg via a functor
 : MBialg × MAlg  MAlg,
so that if B and C are M-bialgebras and R is an M-algebra, then there is a coherent compatibility constraint
(B  C)  R = B  (C  R)
which is just another way of restating the way in which the monoidal product  on MBialg was defined by transport of structure:
BC = B  C .
Summarizing some of these results, we have:

Theorem 5.7. If M is a monad on Set, then the following are equivalent as monoidal categories:
(1) (MBialg, ) (2) (LAdj(MAlg, MAlg), ) (3) (RAdj(MAlg, MAlg), )op.
Definition 5.8. An M -plethory is a monoid in the monoidal category (MBialg, ).
When M is the monad for rings, Borger and Wieland [BW05] call an M-plethory just a `plethory', but we shall use the term ring-plethory. We are also interested in the case where M is the monad for rigs; then we call an M-plethory a rig-plethory. The simplest M-plethory of all given by the identity functor on MAlg viewed as right adjoint comonad. The underlying M-algebra of this M-plethory is F (1). When M is the monad for rings this gives the plethory structure on Z[x]. When M is the monad for rigs it gives the rig-plethory structure on N[x].
By Theorem 5.7 we can also think of an M-plethory B as a left adjoint monad B : MAlg  MAlg or as a right adjoint comonad B : MAlg  MAlg, though in the latter case we need to remember that a morphism of M-plethories goes in the opposite direction from a comonad morphism. We thus have three perspectives on M -plethories.
For example, in Theorem 7.13 we describe the ring-plethory structure on the ring of symmetric functions, . In the first perspective, we think of this ring-plethory as a monoid in (Biring, ). In the second, we think of it as a left adjoint monad  : Ring  Ring. Here (R) =   R is called the `free -ring' on R. In the third, we think of this ring-plethory as a right adjoint comonad  : Ring  Ring. Here (R) is called the ring of `Witt vectors' of R.

32

BAEZ, MOELLER, AND TRIMBLE

To actually obtain the ring-plethory structure on , we need yet a fourth perspective on M-plethories, one which makes more explicit contact with the operations of M. We develop this fourth perspective now.
As we have noted, an M-bialgebra structure is equivalent to an M-algebra B together with a lift  of MAlg(B, -) : MAlg  Set through the forgetful functor U : MAlg  Set. Thus (C) consists of a hom-set hom(B, C) endowed with an M-algebra structure induced from the bialgebra structure on B. In this way, for M-algebras A, C we may speak of M-algebra maps A  hom(B, C); in particular, it makes sense to speak of M-algebra maps B  hom(B, B), formalized by maps h : B  (B). At the underlying set level, a function B  hom(B, B) corresponds to a binary operation B × B  B.
The guiding idea behind the fourth perspective is to see an M-plethory as an Mbialgebra B together with an M-algebra map h : B  (B) whose corresponding binary operation B × B  B, called plethysm, is associative and has a unit e : 1  B. However, the situation is slightly richer than that: we need h : B  (B) to correspond to a bialgebra map m : B  B  B. We also need the unit e : 1  B to correspond to a bialgebra map F (1)  B. As we shall see, an M-plethory is precisely equivalent to an algebra map h : B  (B) and unit satisfying these conditions. (In general (B) does not carry M-bialgebra structure, so we cannot simply ask that h : B  (B) be a bialgebra map.)
We shall go further, though, by writing out these conditions explicitly in terms of co-operations. In general, an M-algebra can be described as a set A equipped with a collection of J-ary operations
 : AJ  A
obeying certain equations. Here J potentially ranges over all sets, though finite sets suffice if the monad M comes from a Lawvere theory, as in our main examples of interest. Similarly, an M-bialgebra can be described as an M-algebra B equipped with J-ary `co-operations' obeying the same sort of equations. These co-operations are M-algebra morphisms
[] : B  J · B
where J ·B is the coproduct in MAlg of J copies of B. In Section 1 we described some of these co-operations in the case of the biring Z[x], and at the start of Section 4 we worked them out in a principled way for the birig N[x]. We now describe how an M-plethory structure interacts with these co-operations.
Let us take as our starting point that an M-plethory consists of a bialgebra (B, ) together with a comonad structure
 :   ,  :   1.
These maps correspond to bialgebra morphisms B B  B and F (1)  B between the representing objects.
Lemma 5.9. A natural transformation  : U  U is precisely equivalent to an M-algebra map h : B  (B).
Proof. To say  is a lifting of MAlg(B, -) : MAlg  Set means precisely that we have a representation U = MAlg(B, -). It follows that U = MAlg(B, -)   = MAlg(B, (-)), so that a transformation  : U  U may be identified with a transformation
 : MAlg(B, -)  MAlg(B, (-)),

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

33

but this corresponds to an algebra map h : B  (B), by the Yoneda lemma.

In more detail, the transformation  is retrieved from h by the formula

C(f ) = (B -h (B) --(f) (C)), or, in terms of hom-sets, by precomposing the -functoriality structure with h:

C = (M Alg(B, C)  M Alg(B, C) -M--A-lg(-h-,1) M Alg(B, C)).
Before stating our next result, we introduce the following construction: for a given algebra map h : B  (B) and any set J, we let hJ : J · B  (J · B) be the unique algebra map such that for every j  J, and coproduct coprojection ij : B  J · B, the map hJ  ij equals the composite
B -h (B) --(-ij) (J · B).

Lemma 5.10. A natural transformation  :    is precisely equivalent to an M-algebra map h : B  (B) such that the diagram

B [] J · B

h

hJ

B

(J · B)

([])

commutes for every co-operation [] : B  J · B of the M-bialgebra B.

Proof. To have such a transformation  between M-algebra-valued functors is equivalent to having the underlying transformation  = U preserve the operations of the monad. In other words, writing
U = MAlg(B, -), U = MAlg(B, -)

the condition is that for every J-ary operation  we have a commutative diagram:

M Alg(B, -)J J M Alg(B, -)J





MAlg(B, -)

MAlg(B, -).



These operations are induced from co-operations [] : B  J · B in the contravariant argument, i.e. we use the natural isomorphism MAlg(B, C)J = MAlg(J · B, C) to rewrite the last diagram into the form

MAlg(J · B, -)

MAlg(J · B, -)

M Alg([],-)

M Alg([],-)

MAlg(B, -)

MAlg(B, -)



where [] denotes the corresponding co-operation. Applying the Yoneda lemma as in the previous lemma, the commutativity of this last diagram holds if and only if it holds when applied to the identity element 1  MAlg(J · B, J · B). In that case, the top horizontal arrow sends this identity 1 to hJ , and the right vertical arrow sends this in turn to the composite hJ  []. The left vertical arrow sends 1 to [], and

34

BAEZ, MOELLER, AND TRIMBLE

the bottom horizontal arrow sends this in turn to the composite ([])  h. Thus commutativity of the preceding diagram is equivalent to the equation
hJ  [] = ([])  h
and this completes the proof.
Lemma 5.11. A morphism  :   1MAlg precisely corresponds to a bialgebra map  : F (1)  B.

Proof. This follows from Theorem 5.7: such a morphism  :   1MAlg is equivalent to a bialgebra morphism between their representing bialgebras, and the representing bialgebra of the identity 1MAlg is given by the free algebra on one generator F (1), with its canonical bialgebra structure.

Lemma 5.12. The coassociativity and counit equations for the data
 :   ,  :   1MAlg
precisely correspond to associativity and unit equations for the plethysm and plethysm unit 1 -u1 U F (1) -U U B, where u denotes the unit of the adjunction F  U .

Proof. We focus on coassociativity, leaving the counit equation to the reader. By faithfulness of U, the coassociativity square for  commutes if and only if we have commutativity of the following equivalent diagrams:

MAlg(B, -)  MAlg(B, -)

U  U U 

U

U 





MAlg(B, -)

U 

U 

U 

M Alg(h,-)

MAlg(B, -)

MAlg(B, -)

M Alg(B,)

where the vertical composite uses the hom-set expression of U =  given after the proof of Lemma 5.9. Chasing through the Yoneda lemma, the last diagram commutes iff the following square commutes (whose import is that h defines a coalgebra structure):
B h B

h

h

B

B.

B

Again by faithfulness of U, this last square commutes if and only if we have com-

mutativity of the following diagrams:

U B Uh U B

UB

Uh

MAlg(B, B)

Uh

Uh 

Uh

M Alg(B,h)

U B

U B

U B

MAlg(B, B)

MAlg(B, B)

MAlg(B, B)

M Alg(h,1)

where the horizontal composite uses the hom-set expression of UB = B given after the proof of Lemma 5.9.

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

35

At this point, it is simplest to think of the last diagram purely in terms of sets and functions; for example, B is just a hom-set equipped with M-algebra structure. The function Uh gives a function
UB  MAlg(B, B)  Set(UB, UB)
which de-curries to a map called the plethystic multiplication, denoted for now as p : UB × UB  UB. Chasing an element a  UB around the last diagram, the commutativity of the last diagram is equivalent to commutativity of an element assignment where going across (A) and then down (D) we arrive at
a A [p(a, -) = [b  p(a, b)]] D (b  p(p(a, b), -))
whereas going down and then across, we arrive at
a D p(a, -) A [f  p(a, -)  f ] A [b  p(a, -)  p(b, -) = p(a, p(b, -)]
so that the commutativity asserts precisely p(p(a, b), -) = p(a, p(b, -)), which is associativity for the plethysm.

5.2. 2-Plethories. Next we categorify the concept of rig-plethory. We believe it is possible to categorify the entire preceding story. For example, Theorem 5.4 should categorify to the statement that any lift  : 2-Rig  2-Rig of a representable 2-Rig(B, -) : 2-Rig  Cat through the forgetful functor U : 2-Rig  Cat must be a right biadjoint. However, proving this would require a detour through some 2-categorical algebra, including for example a 2-categorical analogue of the adjoint lifting theorem [Nun16]. Since we have a number of equivalent definitions of Mplethory, we prefer to categorify the one most convenient for our purposes. So, we define a 2-plethory as a right 2-adjoint 2-comonad:

Definition 5.13. A 2-plethory is a 2-comonad  : 2-Rig  2-Rig whose underlying 2-functor is a right 2-adjoint.

The underlying 2-rig of  may be extracted by an easy categorification of Lemma 5.2:

Proposition 5.14. Let U : 2-Rig  Cat be the forgetful functor, and  a 2plethory. Then U : 2-Rig  Cat is representable, and the representing object is (kS), where  is left 2-adjoint to .

The representing object B = (Schur) is the underlying 2-rig of the 2-plethory ; the fact that U  2-Rig(B, -) means that  is a lift of 2-Rig(B, -) through U, so that  endows B with 2-birig structure as in this by now all too familiar picture:

2-Rig





U

2-Rig

Cat.

2-Rig(B,-)

Proof. By the proof of Theorem 3.3, U has a left 2-adjoint taking any category C to the 2-rig kS(C). Thus U : 2-Rig  Cat is a right 2-adjoint, with left 2-adjoint L say, and we have

U  C(1, U-)  2-Rig(L(1), -).

36

BAEZ, MOELLER, AND TRIMBLE

making L(1) a representing object for U. But L, being the left 2-adjoint of U, is equivalent to   kS(-) where  is the left 2-adjoint of . Thus L(1)  (kS(1)) = (kS).
Theorem 5.15. The identity 1 : 2-Rig  2-Rig is a 2-plethory with underlying 2-rig kS, which in turn has underlying category Schur.
Proof. The identity 1 : 2-Rig  2-Rig is naturally a comonad 2-comonad whose underlying 2-functor has a left 2-adjoint, namely the identity. The result then follows from Proposition 5.14 taking  =  = 1, together with Proposition 3.10, which says that Schur is equivalent to the underlying category of kS.
Any 2-plethory  has a left 2-adjoint , and the 2-comonad structure on  is mated to a 2-monad structure on . The representing object for U is B = (Schur), so the 2-monad multiplication m :    applied to Schur results in a 2-rig map
(B)  B which by the adjunction    transforms to a 2-rig map
h : B  (B)
Applying U : 2-Rig  Cat, this results in a functor
UB  2-Rig(B, B)
whose codomain maps into Cat(UB, UB). From the cartesian closure of Cat, the resulting functor UB  Cat(UB, UB) uncurries to a functor
·B : UB × UB  UB
called the plethystic monoidal structure for the 2-plethory .

6. The rig-plethory of positive symmetric functions
Our next major goal is to decategorify the 2-rig Schur by taking its Grothendieck group and show that the result is , the ring of symmetric functions. In this section we show that the 2-birig structure on Schur induces a birig structure on the rig of `positive symmetric functions', +, and that the 2-plethory structure on Schur makes + into a rig-plethory. In the next section we extend this birig structure to the full ring of symmetric functions , and explain how the rig-plethory structure on + induces a ring-plethory structure on .
It helps to break down the Grothendieck group construction K into two steps. For the first step, given a Cauchy complete linear category C, we define J(C) to be the set of isomorphism classes of objects of C. This is made into a commutative monoid with its addition and additive unit coming from coproducts and the initial object in C:
[x] + [y] = [x  y], 0 = [0]
for all x, y  C. In fact J extends to a 2-functor
J : CauchLin0  CommMon
where we treat CommMon as a 2-category with only identity 2-morphisms, and for any 2-category B we let B0 be the sub-2-category with the same objects and morphisms, but only invertible 2-morphisms as 2-morphisms. The point here is

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

37

that naturally isomorphic functors have the same effect on isomorphism classes of objects.
Similarly, if R is a 2-rig, then J(R) acquires a rig structure with its multiplication and multiplicative unit coming from monoidal products and the monoidal unit in R:

[x] · [y] = [x  y], 1 = [I].

In particular, we call J(Schur)--or more precisely J(kS)--the rig of positive symmetric functions, and we denote it as +.
The second step is to take the group completion of the commutative monoid J(C). This gives the Grothendieck group K(C). The theory of rings and their modules extends to rigs, and just as an abelian group is the same as an Z-module, a commutative monoid may be seen as an N-module. In these terms group completion is the functor
Z N - : CMon  Ab.
Thus we have a commutative diagram

K

CauchLin0

J

CMon

Ab

ZN -

Similarly, if R is a 2-rig, then by group-completing the additive monoid of the rig J(R), we get a ring K(R), so that we have a commutative diagram

K

2-Rig0

J

Rig

Ring

ZN -

In particular, the ring K(Schur)--or more precisely, K(kS)--is denoted . This is the famous ring of symmetric functions.
In the rest of this paper, we transport the conceptually simple 2-plethory structure on Schur to a ring-plethory structure on  using the functor K. This is not trivial, and we shall have to consider the functors J and Z N - separately in what follows.
Some technical considerations include the following. We would like for the 2-birig structure on kS, which involves 2-rig co-operations of type

kS  kS  kS,

to yield rig co-operations of type

J(kS)  J(kS)  J(kS)

making J(kS) into a birig. This would hold automatically if J : (CauchLin0, )  (CMon, ) preserved tensor products. As we shall see, this is not true in complete generality. But it turns out to be true for the tensor products we are interested in, involving kS. In Lemma 6.5 we prove this using facts about symmetric group representations over fields of characteristic zero.
A separate issue is that we need to examine when the group completion of a birig is a biring, and when the group completion of a rig-plethory gives a ring-plethory. We reserve those considerations for Section 7.

38

BAEZ, MOELLER, AND TRIMBLE

6.1. The rig structure on +. We begin by making + into a rig. To do this, we lift the 2-functor
J : CauchLin0  CMon to a 2-functor from 2-rigs to rigs. Applying this to the 2-rig kS whose underlying category is Schur, we obtain the rig structure on +.
As a warm-up, we begin with a more detailed consideration of J from the viewpoint of base change for enriched categories. To bring CauchLin and CMon together on a level playing ground, we performed two moves. The first was the move from CauchLin to CauchLin0 by discarding all 2-cells except for the invertible ones. The second was to treat CMon as a 2-category whose only 2-cells are identity 2-cells.
Both moves involve change of base. If we consider a 2-category (like CauchLin) as a Cat-enriched category, i.e. with homs valued in Cat,
hom : Ob(CauchLin) × Ob(CauchLin)  Cat,
then the first move amounts to composing hom with the functor
core : Cat  Grpd
that assigns to a category C the groupoid core(C) whose objects are the same as those of C, and whose arrows are the invertible arrows of C. (Note that this functor core is a 1-functor only, not a 2-functor. Note also that this 1-functor preserves cartesian products. In general, for change of base of enrichment to work properly, one needs at a minimum a lax monoidal functor from one base to the other; for cartesian monoidal products, this is the same as (strong) preservation of cartesian products.) In general, for any 2-category C, the composite
Ob(C) × Ob(C) -h-om Cat -c-ore Grpd
defines a Grpd-enriched category C0. On the other hand, if we consider an ordinary 1-category (like CMon) as a Set-
enriched category, i.e. with homs valued in Set,
hom : Ob(CMon) × Ob(CMon)  Set,
then the second move amounts to composing this hom with the product-preserving functor from sets to groupoids,
disc : Set  Grpd,
that assigns to a set X the discrete groupoid disc(X) whose objects are the elements of X. In general, for any category C, the composite
Ob(C) × Ob(C) -h-om Set -d-isc Grpd
defines a Grpd-enriched category. By these moves, the homs are brought to a level playing field in Grpd, and J is
construed as a Grpd-enriched functor, involving maps of groupoids
core(hom(C, D))  disc(hom(JC, JD)).
Now, disc : Set  Grpd has a left adjoint 0 : Grpd  Set which assigns to a groupoid its set of `connected components', or isomorphism classes. Thus the above maps of groupoids are equivalent to functions between sets
(0  core)(hom(C, D))  hom(JC, JD)

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

39

and since it is easily seen that 0 preserves products, we obtain a product-preserving change of base,
0  core : Cat  Set.
In many cases, applying the base change 0  core is the `right' way to turn a 2-category into a 1-category. It is, in fact, simply a formalization of `decategorification', which demotes isomorphisms to equalities. The construction is sometimes called the homotopy category of a 2-category, so we write Ch for this construction applied to a 2-category C.
We now apply this to our goal: decategorifying a 2-rig and obtaining a rig. First, note that 2-Righ is the 1-category whose objects are 2-rigs and whose morphisms are symmetric monoidal natural isomorphism classes of 2-rig maps. We define H : 2-Righ  Set to be the functor given by the composite
2-Righ -Uh Cath -h-om-(-1-,-) Set.
This functor H assigns to a small 2-rig its set of isomorphism classes. Another point of view on this functor will be useful to us. Observe that the
1-functor between 1-categories

core : Cat  Grpd

extends to a 2-functor core : Cat0  Grpd
from the Grpd-enriched category Cat0 consisting of categories, functors, and natural isomorphisms to the 2-category of groupoids, functors and natural isomorphisms. We also have an evident 2-functor 0 : Grpd  Set. Let

 : Cat0  Set

denote the composite 2-functor 0  core. Finally, to  we may apply the homotopy 1-category construction, obtaining a

functor

Cath  (Cat0)h -h Seth  Set.

Lemma 6.1. The above functor from Cath to Set is naturally isomorphic to

hom(1, -) : Cath  Set.

Proof. For any category C  Cath, hom(1, C) is the set of isomorphism classes of objects [c] : 1  C of C, and for any class of functors [F ] : C  D, hom(1, [F ]) is the (well-defined) function taking [c] to [F (c)]. If  : F  G is a 2-cell of Cat0, then () is the identity 2-cell between functions (F ), (G) where (F )(c) = [F (c)]. So h has the same effect as hom(1, -) on 0-cells and 1-cells of Ch.

Corollary 6.2. Let C be a 2-category, and for objects c, d of C, regard the homcategory C(c, d) as an object of Cath. Then
Cath(1, C(c, d)) = Ch(c, d).

With this infrastructure in place, we can begin the decategorification process. Starting with any 2-rig R, the underlying category U(R) comes equipped with categorical operations making the category a 2-rig, e.g. the coproduct operation and tensor operation
,  : UR × UR  UR

40

BAEZ, MOELLER, AND TRIMBLE

and so on. There are various coherent natural isomorphisms such as associativity, symmetry, distributivity, etc. but when we change our base of enrichment from Cat to Set along 0  core, and interpret these isomorphisms as equations in Cath, the object UR becomes simply a rig object in Cath. Then we apply the productpreserving functor Cath(1, -) : Cath  Set to this rig object to get a set H(R) equipped with rig structure. As above, this rig is denoted J(R).
Similarly, the underlying functor of a 2-rig map R  S preserves these categorical operations up to coherent isomorphisms, but these isomorphisms become equations when in Cath, so that we get a rig homomorphism U(R)  U(S) between rig objects in Cath. Applying Cath(1, -) : Cath  Set, the function H(R)  H(S) preserves the rig operations, giving a homomorphism J(R)  J(S) in Rig.
Thus we have the following result.
Lemma 6.3. The functor H : 2-Righ  Set lifts through the forgetful functor U : Rig  Set to a product-preserving functor J : 2-Righ  Rig:
Rig
J U
2-Righ H Set.
Proof. The product-preservation of J follows from product-preservation of H and the fact that U reflects products (products in Rig are created from products in Set).

Applying this to the 2-rig kS we obtain:
Theorem 6.4. + = J(kS) is a rig, so its group completion  = Z N + is a ring.
6.2. The birig structure on +. Next we decategorify the co-operations on Schur to make + into a birig. The composite functor
CauchLinh -Uh Cath -C-a-t-h(-1,--) Set
lifts through the forgetful functor U : CMon  Set to a functor
J : CauchLinh  CMon
since coproducts in Cauchy complete linear categories induce addition on isomorphism classes of objects. We would be all set if this J were a strong monoidal functor, and thus equipped with natural isomorphisms
J(C) N J(D) = J(C  D)
for all Cauchy complete linear categories C, D. The co-operations on Schur would then give co-operations on J(Schur) = + making + into a birig.
Alas, this fails in general. We certainly have a natural map J(C) N J(D)  J(C  D), making J into a lax monoidal functor. The trouble is that this map is not always onto. For example, take k = R and let C be the linear category of finitedimensional real representations of C, regarded as an algebra over R. This linear category is Cauchy complete, and every object in it is a finite coproduct of copies of C. We thus have J(C) = N, and it follows that J(C) N J(C) = N. On the other hand J(C  C) is equivalent to the category of representations of C R C = C  C, so by a similar argument J(C  C) = N2.

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

41

This sort of problem occurs whenever k is not algebraically complete. However, with regard to -products of kS we are more fortunate, since we have the following result.

Lemma 6.5. Let k be a field of characteristic zero and let n1, . . . , np be a collection of natural numbers. Then every irreducible representation of k[Sn1 × · · · × Snp] is a tensor product 1  · · ·  p of irreducible representations i of k[Sni] that are determined uniquely up to isomorphism.

Proof. This result is well known [JK84], but for completeness we give a proof. Maschke's theorem implies that for any field k of characteristic zero and any finite group G the group algebra k[G] is semisimple. We say k is a splitting field for G if k[G] is a product of matrix algebras over k. In this case

k[G] = Md[][k]
[]

where [] ranges over isomorphism classes of irreducible representations of G over
k and d[] is the dimension of any representative . Any irreducible representation  of G, or equivalently of k[G], is isomorphic to the representation of k[G] on kd[]
that factors through Md[][k] in the obvious way. Suppose k is a splitting field for two finite groups G and G. Then we can write
k[G] as above and similarly

k[G] = Md[][k]
[ ]

where [] ranges over isomorphism classes of irreducible representations of G over

k. Thus

k[G × G] = k[G]  k[G] =

Md[][k]  Md[][k] =

Md[]d[][k].

[] []

[], []

It follows that k is a splitting field for G × G as well, and each irreducible representation of G × G is isomorphic to the tensor product of an irreducible representation of G and one of G.
It is well-known that that Q is a splitting field for the symmetric group Sn, where the isomorphism classes of irreducible representations are indexed by n-box Young diagrams [Lor18, Corollary 4.16]. The lemma thus follows for the field Q.
If k is a splitting field for G so is any field extension K of k, because

K[G] = K k k[G] = K k Md[][k] = Md[][K].

[]

[]

Since every field of characteristic zero is an extension of Q, every such field is a splitting field for the groups Sn, and the lemma follows for all such fields.
The 2-rig kS(n) = kSn, considered in 2-Righ, is the coproduct of n copies of kS, so we have n coproduct coprojections

i1, . . . , in : kS  kS
to which we apply J. Since J(kS)n is the coproduct in Rig of n copies of J(kS), the maps J(i1), . . . , J(in) collate into a single rig map
J(kS)n  J(kSn)

42

BAEZ, MOELLER, AND TRIMBLE

and we have the following corollary:
Corollary 6.6. The canonical rig map J(kS)n  J(kSn) is an isomorphism.
Proof. J(kS) is a free N-module on isomorphism classes of irreducible representations of symmetric groups Sk, so that J(kS)n is a free N-module on n-tuples of such classes. Likewise, J(kS(n)) is a free N-module on isomorphism classes of irreducible representations of products of symmetric groups Sk, and the rig map of the statement is the N-module map which freely extends the mapping
([1], . . . , [n])  [1  . . .  n].
Since this mapping is a bijection according to Lemma 6.5, this N-module map is a rig isomorphism.
This result immediately leads to a birig structure on + = J(kS): each cooperation for the 2-birig kS induces a corresponding co-operation on J(kS). For example, the coaddition  : kS  kSkS pertaining to kS as a 2-corig object in 2-Rig gives the coaddition  for kS as a corig object in 2-Righ. Applying J : 2-Righ  Rig, we define the coaddition on J(kS) to be the composite in Rig
J(kS) J() J(kS  kS) = J(kS)  J(kS)
by virtue of Corollary 6.6. The remaining co-operations are defined by a similar procedure, and the following result is clear.
Theorem 6.7. + = J(kS) with the co-operations thus defined is a birig.
6.3. The rig-plethory structure on +. Our next task is to establish a rigplethory structure on +. The birig structure on + induces a rig structure on the representable functor Rig(+, -), giving in particular a rig structure on the hom-set Rig(+, +), and a subsidiary task is to construct a suitable rig map
h : +  Rig(+, +)
that represents plethysm. The function h : URig+  Rig(+, +) is constructed from the 2-plethysm on kS,
given by a functor U(kS)  2-Rig(kS, kS)
living as a morphism in Cat. We treat this as a morphism in Cath, and then apply Cath(1, -) : Cath  Set. The result is a function
H(kS)  2-Righ(kS, kS)
with the help of Corollary 6.2. Then compose the above function with the map
2-Righ(kS, kS)  Rig(J(kS), J(kS)) = Rig(+, +)
arising from the functoriality of J. The resulting composite is the desired function
h : URig(+) = URig(J(kS)) = H(kS)  Rig(+, +).
The next battery of results show that h gives + a rig-plethory structure, following the general breakdown of M-plethories given in Lemma 5.9, Lemma 5.10, Lemma 5.11, and Lemma 5.12. It should be noted the proof techniques follow essentially the same pattern over and over, used throughout the remainder of this section:

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

43

· Observe the analogous condition at the 2-rig level. This is usually trivial
because the 2-plethory itself is trivial, being just an identity 2-comonad on
2-rigs.
· By changing the base of enrichment from Cat to Set, observe the same con-
dition as a strictly commuting diagram in 2-Righ. · Apply H : 2-Righ  Set. Usually H lifts through J : 2-Righ  Rig, and
moreover it converts hom-categories or hom-2-rigs of type 2-Rig(R, S) ap-
pearing in the last step into hom-sets or hom-rigs 2-Righ(R, S). · Postcompose with maps 2-Righ(R, S)  Rig(J(R), J(S)) that express func-
toriality of J, and combine with properties of J (preservation of products,
preservation of suitable copowers) to establish the corresponding condition
at the rig level.

We begin by checking the condition in Lemma 5.9.

Lemma 6.8. The map h is a rig homomorphism.

Proof. We indicate why h preserves the rig multiplication; preservation of the other operations is treated similarly. Letting µ denote comultiplication, we have a 2-rig map U(kS)  2-Rig(kS, kS) which means we have a 2-cell isomorphism

U(kS) × U(kS)
m
U (kS)

2-Rig(kS, kS) × 2-Rig(kS, kS)
= 2-Rig(kS  kS, kS)
2-Rig(µ,1)
2-Rig(kS, kS)



in Cat. This 2-cell becomes an equation in Cath. Applying Cath(1, -) : Cath  Set together with Corollary 6.2, we obtain the following commutative diagram in Set:

H(kS) × H(kS)
m
H (kS)

2-Righ(kS, kS) × 2-Righ(kS, kS)
2-Righ(kS  kS, kS)
2-Righ (µ,1)
2-Righ(kS, kS).



44

BAEZ, MOELLER, AND TRIMBLE

Abbreviating Q×Q to Q2 to conserve space, we append to this last diagram another diagram which instantiates functoriality of J, and we invoke Corollary 6.6:

H (kS)2

2-Righ(kS, kS)2

Rig(J(kS), J(kS))2

 

Rig(J(kS)  J(kS), J(kS))

m

2-Righ(kS  kS, kS) Rig(J(kS  kS), J(kS))

2-Righ (µ,1)

Rig(J (µ),1)

H (kS)

2-Righ(kS, kS)

Rig(J(kS), J(kS))

The perimeter of this last diagram shows that h preserves rig multiplication.

Next we check the condition in Lemma 5.10.

Lemma 6.9. The map h satisfies the commutativity condition of Lemma 5.10.

Proof. The pseudonatural equivalence
 : 12-Rig  kS on 2-Rig has as its component at kS the canonical 2-rig map
 = (kS) : kS  kS(kS) that provides the 2-plethysm on kS. The map
n = (kSn) : kSn  kS(kSn) is, by pseudonaturality of , the (unique up to isomorphism) 2-rig map that makes the following square commute up to isomorphism:

kS =(kS) kS(kS)

ij

kS(ij )

kSn n =(kSn) kS(kSn).

It follows, again by pseudonaturality, for each 2-birig co-operation [] : kS  kSn we have a square in 2-Rig that commutes up to 2-cell isomorphism:

kS



kS(kS)

[]

kS ([])

kSn n kS(kSn)

This is the 2-rig form of the commutative square in Lemma 5.10. Changing our base of enrichment along 0  core : Cat  Set, this gives a strictly
commuting square in 2-Righ. To this square we apply J to get a commuting square in Rig. Now, for any 2-rig R, the underlying set of J(kS(R)) is
Cath(1, UhkS(R)) = Cath(1, 2-Rig(kS, R)) = 2-Righ(kS, R)

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

45

This set acquires a rig structure, using the corig structure that kS has as an object
in 2-Righ. Thus the diagram of rigs obtained by applying J may be written in the form

J (kS) J() 2-Righ(kS, kS)

J ([])

2-Righ(kS,[])

J (kS)n  J (kSn) J(n ) 2-Righ(kS, kSn)

and we append to this diagram a square that expresses functoriality of J:

J (kS)

2-Righ(kS, kS)

[]=J ([])

2-Righ (1,[])

J (kS)n  2-Righ(kS, kSn)

hn

Rig(J(kS), J(kS))
Rig(1,[])
Rig(J(kS), J(kSn))
Rig(J(kS), J(kS)n).



The top horizontal composite is the map h of Lemma 6.8. The bottom arrow is hn, using the fact that J preserves coproducts and a simple diagram chase. Hence this last diagram manifests the square whose commutativity is:

+ h + (+)

[]

+ ([])

+n hn + (+n)

Next, the unit of our rig-plethory is the unique rig map

I : N[x]  J(kS) = +
that takes x to [k · S(-, 1)], where k · S(-, 1) is the plethysm unit of the 2-plethory kS; equivalently, the canonical generator of kS as free 2-rig. We now check that this rig map satisfies the condition in Lemma 5.11.

Lemma 6.10. The rig homomorphism I : N[x]  + is a birig homomorphism.
Proof. The proof is a straightforward computation; we check that I preserves coaddition to illustrate. The 2-rig coaddition  : kS  kS  kS is the unique 2-rig map that takes the generator X = k · S(-, 1) to X  1  1  X. The composite

J(kS) J() J(kS  kS) = J(kS)  J(kS)

which defines coaddition on + = J(kS) takes the isomorphism class [X] to [X]  [1] + [1]  [X]. Hence +  I takes x to [X]  [1] + [1]  [X]. Clearly
N[x]  N[x]  N[x] -I-I +  +

46

BAEZ, MOELLER, AND TRIMBLE

takes x also to [X][1]+[1][X], since the coaddition on N[x] takes x to x1+1x.

Since the two legs of

N[x]

I

+



+

N[x]  N[x] II +  + take x to the same element, they must be the same rig map.

Finally we check the condition in Lemma 5.12.

Lemma 6.11. The plethysm multiplication and unit for + satisfy the monoid equations.

Proof. The 2-plethysm multiplication for kS comes from the functor  : U(kS)  2-Rig(kS, kS)

given on objects by   (   · ), and the de-curried map (,  )   ·  is associative up to isomorphism by Corollary 3.8. The usual decategorification procedure (interpret this map in Cath, apply Cath(1, -), and compose with the action of J on homs) leads to the plethysm structure on +
U + = HkS  2-Righ(kS, kS)  Rig(J(kS), J(kS)) = Rig(+, +)
which is the following well-defined map on isomorphism classes:
[]  ([ ]  [ · ])
Thus, this binary operation in de-curried form is associative on the nose. The unit equations also follow by applying Corollary 3.8 and passing to isomorphism classes.

Thanks to the fourth perspective on M-plethories developed in Lemmas 5.9­5.12, by proving Lemmas 6.8­6.11 we have completed the proof of the following theorem:

Theorem 6.12. The 2-plethory structure on kS induces a rig-plethory structure on + = J(kS), the rig of positive symmetric functions.

7. The ring-plethory of symmetric functions
The preceding development shows that the rig + = J(Schur) of isomorphism classes of Schur functors carries a canonical rig-plethory structure, giving a right adjoint comonad on Rig whose underlying functor
+ : Rig  Rig
lifts hom(+, -) : Rig  Set through the underlying-set functor U : Rig  Set. What we now show is that the actual Grothendieck ring
K(Schur) = Z N J(Schur),
also denoted  = Z N +, similarly carries a ring-plethory structure. By way of background, group completion is the functor CMon  Ab left adjoint to
the full inclusion functor Ab  CMon. In terms of the symmetric monoidal product N on CMon, it is the functor that sends a commutative monoid A to Z N A.
Lemma 7.1. The functor Z N - : (CommMon, N)  (AbGrp, ) is symmetric strong monoidal.

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

47

Proof. Just as in the more familiar case of ring modules, extension of scalars from modules of a rig to modules of a larger rig is a symmetric strong monoidal functor:
(Z N A) Z (Z N B) = ((Z N A) Z Z) N B = (Z N A) N B = Z N (A N B).

Being a (strong) symmetric monoidal functor, group completion takes commutative N-monoids in CMon, which are commutative rigs, to commutative -monoids in Ab which are commutative rings. In fact, the functor Z N - : Rig  Ring is left adjoint to the full embedding i : Ring  Rig. It follows that
Ring -i Rig --+ Set

is the lift of the representable functor Ring(, -) : Ring  Set through U : Rig  Set, because
U  +  i = Rig(+, -)  i = Rig(+, i-) = Ring(Z N +, -) = Ring(, -).
This lift gives the Set-valued representable Ring(, -) a rig structure +  i, and our first task is to see that this extends to a ring structure, thus making  a biring. Such a biring extension is unique up to unique isomorphism when it exists, because the embedding i : Ring  Rig is full and faithful. Put differently, a rig structure can be a ring structure in at most one way; we are simply asking "does this rig structure on Ring(, -) have the property of being a ring structure?"
To show it does, it is necessary and sufficient to identify a suitable co-negation on , where `negation' is in the sense of `additive inverse'. A co-negation is a ring map

:  

such that the following diagram in the category of rings commutes.



1









o

Z

!



(2)







1



Again, such a co-negation is unique if it exists. By cocommutativity of coaddition , commutativity of either pentagon implies commutativity of the other. Thus we focus on the top pentagon, which we call the co-negation equation.
Before constructing the co-negation , we review the Grothendieck ring G(R) = Z N R of a rig R, with a view toward categorification. First, G(R) is a quotient rig of a rig R[x]/(x2 = 1). This rig is the same as the group rig R[Z2], whose underlying additive monoid is R × R (regarding elements a + bx modulo (x2 - 1) as ordered pairs (a, b)), and in which elements are multiplied by the rule

(a, b) · (a, b) = (aa + bb, ab + ab).

48

BAEZ, MOELLER, AND TRIMBLE

Then, to form G(R) as a quotient of R[Z2], q : R[Z2]  G(R), one introduces a rig-congruence relation on R[Z2], generated by a symmetric transitive relation  defined by
(a, b)  (c, d)  a + d = b + c
and we denote the -equivalence class of (a, b) by a - b. If the additive monoid of R is cancellative, then  is already transitive. Note that + = J(Schur) is cancellative because it is a free N-module, by Maschke's theorem.
The categorified analog of +[Z2] is the 2-rig of Z2-graded Schur functors, which we denote as G. The underlying category of G is the product Schur × Schur, whose objects we write as (C0, C1). This category can be equivalently described as the category of Z2-graded polynomial species, i.e. linearly enriched functors valued in Z2-graded finite-dimensional vector spaces,
F : kS  GrZ2(FinVect),
for which all but finitely many values F (n) are zero. The tensor product is the usual graded tensor, and exactly mirrors multiplication
in the group rig R[Z2]:
(C0, C1)  (D0, D1) = ((C0  D0)  (C1  D1), (C0  D1)  (C1  D0)).
The symmetry
C,D : (C0, C1)  (D0, D1)  (D0, D1)  (C0, C1)
is the standard one involving a sign convention. Namely, if C = (C0, C1) and D = (D0, D1) are two graded Schur objects, then
(C,D)0 = C0,D0  -C1,D1 : (C0  D0)  (C1  D1)  (D0  C0)  (D1  C1); (C,D)1 = C0,D1  C1,D0 : (C0  D1)  (C1  D0)  (D1  C0)  (D0  C1).
Lemma 7.2. We have an isomorphism of rigs +[Z2] = J(G).
Let q : J(G) = +[Z2]   be the quotient map. It is given by q([C0], [C1]) = [C0] - [C1] for an object (C0, C1) of G.
Lemma 7.3. The canonical rig map J(G)  J(G)  J(G  G) is an isomorphism.

Let x abbreviate the generating object S(-, 1) (as a linearized representable) of kS. Let + : kS  G be the essentially unique 2-rig map that sends x to the graded object (x, 0)  G. Let - : kS  G be the essentially unique 2-rig map that sends x to the graded object (0, x)  G. Applying J, we obtain rig maps
J(+) : J(kS)  J(G), J(-) : J(kS)  J(G).
Lemma 7.4. The unique ring map    that extends the composite
+ = J (kS) -J-(-+) J (G) -q 
of rig maps is the identity map on .

Proof. It suffices to check that the composite is the inclusion +  . Since (x, 0)n = (xn, 0), it is clear that +() = (, 0) for any Schur object . Hence
J(+) takes a class [] to ([], [0]), and q takes the latter to [] - [0] = []. This
completes the proof.

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

49

Definition 7.5. The co-negation on  is the unique ring map  :    that extends the composite of rig maps
+ = J (kS) -J-(--) J (G) -q .
Proposition 7.6. The map  satisfies the co-negation equation, Eq. (2).

The proof will be broken down into a series of simple lemmas. The first two are preparatory lemmas requiring no essentially new ideas.

Lemma 7.7. The restriction of the composite  -    -1-    -- 

along the inclusion +   equals the composite
+ = J (kS) -J-() J (kS  kS) -J-(-+----) J (G  G) -J-(-G) J (G) -q .
The proof amounts to a simple diagram chase together with Lemma 7.4 and Lemma 7.3.

Lemma 7.8. The composite kS - kS  kS --+--- G  G -G G

is (x,x) : kS  G, the essentially unique 2-rig map that takes x to (x, x). Proof. This amounts to the element chase

x  (x  1)  (1  x)  ((x, 0)  1)  (1  (0, x))  (x, 0)  (0, x) = (x, x).

To make further progress, we introduce another 2-rig. Let DG denote the 2-rig of
differential Z2-graded Schur functors. The objects of DG are tuples (C0, C1, d0, d1)
where Ci  kS, and d0 : C0  C1 and d1 : C1  C0 are morphisms of Schur objects such that d1d0 = 0 and d0d1 = 0. Morphisms are pairs of morphisms between Schur objects that respect the differentials di. The tensor product coincides with the tensor product of the underlying objects in G, equipped with differentials defined by the usual rule (c  d) = c  d + (-1)degcc  d. To be more precise:

dCD,0 =

1C0  dD,0 + dC,0  1D0 dC,1  1D1 - 1C1  dD,1

: (C0D0)(C1D1)  (C0D1)(C1D0)

dCD,1 =

1C0  dD,1 + dC,0  1D1 dC,1  1D0 - 1C1  dD,0

: (C0D1)(C1D0)  (C0D0)(C1D1).

The symmetry isomorphism coincides with the symmetry on the underlying graded objects.
The forgetful functor UDG : DG  G that forgets the differentials di is manifestly a 2-rig map. Let Mx : kS  DG denote the 2-rig map that sends the generator x to the complex where d0 = 1x, d1 = 0x, which we display as

1

x

x.

0

50

BAEZ, MOELLER, AND TRIMBLE

(This is the mapping cone of the identity on (x, 0), hence the notation Mx.) Clearly the following diagram commutes up to isomorphism:

kS

Mx

(x,x)

DG

G.

UDG

Combining this observation with Lemma 7.7 and Lemma 7.8, we have the following result.

Lemma 7.9. The restriction of the composite (one side of the co-negation equation)  -    -1-    -- 
along the inclusion +   equals the composite + = J (kS) -J-(M-x) J (DG) -J-(-UD-G) J (G) -q .
We now turn to the other side of the co-negation equation. This will be contextualized using the homology functor
H : DG  G which sends an object (d0 : C0  C1, d1 : C1  C0) to its homology (H0, H1). This functor is a 2-rig map, thanks to the algebra underlying the Ku¨nneth theorem.

Lemma 7.10. The restriction of the composite (one side of the co-negation equation)
 -o Z -! 
along the inclusion +   equals the composite

+ = J (kS) -J-(M-x) J (DG) -J-(-H) J (G) -q .

Proof. Because

1

Hx

x = (0, 0)

0
it is clear that the following diagram in 2-Rig commutes up to isomorphism, since both 2-Rig composites kS  G send the generator x to (0, 0):

FinVect

!

kS

0

+

kS

DG

G.

Mx

H

Applying J to this last diagram, and augmenting to this a commutative triangle
that expresses the equation q  J(+) = i : +   (Lemma 7.4), we arrive at a commutative diagram

N
o+

+ = J(kS)

J (Mx)

!
J (DG)

+
J (+) J (H )

i
J (G)


q

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

51

and the result follows.
Combining Lemma 7.9 and Lemma 7.10, the proof of the co-negation equation has been reduced to the following result.

Lemma 7.11. The following diagram commutes. J (kS) J(Mx) J (DG) J(UDG) J (G)

J (Mx)

q

J (DG)

J (G)

J (H )

q



Proof. It clearly suffices to show that q coequalizes the two maps

J(UDG), J(H) : J(DG)  J(G).
But if C is an object of DG, with underlying graded object (C0, C1) and homology object (H0, H1), this says precisely
[C0] - [C1] = [H0] - [H1].
This is well-known fact about the Euler characteristic of a chain complex--here a 2term chain complex in kS. It follows easily from our ability to split exact sequences in kS, which gives these equations involving cycles Zi and boundaries Bi:
[C0] = [Z0] + [B1], [C1] = [Z1] + [B0], [Z0] = [B0] + [H0], [Z1] = [B1] + [H1].
Having proved the co-negation equation, we have established the following result:

Theorem 7.12. The birig structure on J(Schur) extends to a biring structure on K(Schur) = Z N J(Schur).

We may explicitly calculate the effect of co-negation on the class of a Schur functor , by evaluating  at the object (0, x) in the 2-rig G:

[](-x) = q

(n) Sn (0, x)n .

n0

The nth summand here lives in grade 1 when n is odd, and grade 0 when n is even. Taking into account that each transposition of tensor factors (0, x) introduces a sign change, since (0, x) is in odd degree, the result is

([]) = (-1)n[(n)][det(n)]
n0
where det(n) is the alternating representation of Sn. Note that because (n) vanishes except for finitely many n, this is effectively a finite sum.
It is interesting to compare Joyal's `rule of signs' for so-called virtual species, i.e. formal differences of ordinary Set-valued species [Joy86]. Joyal constructs a virtual species exp(-X) as a geometric series

Here

exp(X)-1 = (-1)k(exp(X) - 1)k = E0(X) - E1(X).
n0
Ei(X) = Ei[n] ×Sn Xn
n0

52

BAEZ, MOELLER, AND TRIMBLE

where the nth coefficient object E0[n] is the set of ordered partitions of the set {1, . . . , n} into an even number of blocks, while E1[n] is the set of ordered partitions into an odd number of blocks. He uses this to construct a virtual species F (-X)
for any given species F , given by

F (-X)[n] = F [n] × exp(-X)[n].

Thus, Joyal's virtual species exp(-X) is analogous to the linear species whose nth coefficient object is (-1)n det(n); indeed it is virtually equivalent to this upon applying linearization Set  Vect to the coefficient objects.
Finally, we address the ring-plethory structure of  = K(Schur). Indeed, the rigplethory structure on + = J(Schur), given by a comonad structure on + : Rig  Rig, restricts to a comonad structure on  : Ring  Ring, making  a ring-plethory. This follows easily from the full faithfulness of the inclusion i : Ring  Rig. For example, from the comonad comultiplication  : +  +  +, we obtain a composite
i = + i -i + + i = + i = i
and this composite gives a comultiplication   , by full faithfulness of i. The requisite equations for a comonad are easily established using the naturality of the isomorphism i = +i.
In conclusion, we have:

Theorem 7.13. The biring structure on  = K(Schur) given in Theorem 7.12 extends to a ring-plethory structure.

The algebras of the ring-plethory  viewed as a left adjoint monad

 =   - : Ring  Ring
are called `-rings'. These are equivalent to coalgebras of the comonad , where (R) is called the "big Witt ring" of a given ring R. Any 2-rig R gives rise to a -ring K(R) = Z N J(R). The rig J(R) is what one might call a `+-rig', i.e. a coalgebra of +. Its coalgebra structure is described by a rig map
h : J(R)  + J(R)
whose underlying function is given, in what is now the usual way, as a composite U J(R) = 2-Righ(kS, R)  Rig(J(kS), J(R)) = Rig(+, J(R)) = U +J(R).
Then the -coalgebra structure on K(R) is the unique ring map K(R)  K(R) that extends the rig map formed as the composite
J (R) h + J (R)  + +iK(R) = iK(R)
where  : J(R)  iK(R) is the canonical inclusion.

Acknowledgements. We would like to thank Abdelmalek Abdesselam, Martin Brandenburg, Richard Garner, Julia Ramos Gonz´alez, Steve Lack, Jade Master, Jackie Shadlen, Mike Shulman, David Spivak, Benjamin Steinberg, and Christian Williams for helpful conversations. Special thanks goes to Allen Knutson as the `Primary Instigator'. The work in this paper was completed while the second author was affiliated with UCR, not with NIST.

SCHUR FUNCTORS AND CATEGORIFIED PLETHYSM

53

References
[BD86] F. Borceux and D. Dejean. Cauchy completion in category theory. Cah. Topol. G´eom. Diff´er. Cat´eg., 27(2):133­146, 1986. (Referred to on page 15.)
[BKP89] R. Blackwell, G. M. Kelly, and A. J. Power. Two-dimensional monad theory. J. Pure Appl. Algebra, 59(1):1­41, 1989. (Referred to on page 16.)
[Bor94] F. Borceux. Handbook of Categorical Algebra 2: Categories and Structures, volume 51 of Encyclopedia of Mathematics and its Applications. Cambridge U. Press, Cambridge, 1994. (Referred to on page 16, 30.)
[BW05] J. Borger and B. Weiland. Plethystic algebra. Adv. Math., 194(2):246­283, 2005. Also available as arXiv:0407227. (Referred to on page 2, 31.)
[DS97] B. Day and R. Street. Monoidal bicategories and Hopf algebroids. Adv. Math., 129(1):99­157, 1997. (Referred to on page 16.)
[Egg19] E. S. Egge. An Introduction to Symmetric Functions and Their Combinatorics, volume 91 of Student Mathematical Library. American Mathematical Society, 2019. (Referred to on page 2.)
[FGHW08] M. Fiore, N. Gambino, M. Hyland, and G. Winskel. The cartesian closed bicategory of generalised species of structures. J. London Math. Soc., 77(2):203­220, 2008. (Referred to on page 16.)
[FS19] B. Fong and D. I. Spivak. Supplying bells and whistles in symmetric monoidal categories. Available as arXiv:1908.02633, 2019. (Referred to on page 25.)
[Haz09] M. Hazewinkel. Witt vectors. Part 1. In M. Hazewinkel, editor, Handbook of Algebra, volume 6, pages 319­472. Elsevier, North-Holland, 2009. Also available as arXiv:0804.3888. (Referred to on page 2.)
[JK84] G. D. James and A. Kerber. The Representation Theory of the Symmetric Group, volume 51 of Encyclopedia of Mathematics and its Applications. Cambridge U. Press, Cambridge, 1984. (Referred to on page 41.)
[Joy81] A. Joyal. Une th´eorie combinatoire des s´eries formelles. Adv. Math., 42(1):1­82, 1981. (Referred to on page 5, 7.)
[Joy86] A. Joyal. Foncteurs analytiques et esp`eces de structures. In G. Labelle and P. Leroux, editors, Combinatoire E´num´erative, pages 126­159. Springer, 1986. (Referred to on page 51.)
[JY21] N. Johnson and D. Yau. 2-Dimensional Categories. Oxford U. Press, 2021. Available as arXiv:2002.06055. (Referred to on page 19.)
[Kel05] G. M. Kelly. Basic Concepts of Enriched Category Theory. Repr. Theory Appl. Categ., (10):vi+137, 2005. Reprint of the 1982 original (Cambridge U. Press). (Referred to on page 18.)
[Lor18] M. Lorenz. A Tour of Representation Theory, volume 193 of Graduate Studies in Mathematics. American Mathematical Society, Providence, RI, 2018. (Referred to on page 41.)
[Mac95] I. G. MacDonald. Symmetric Functions and Hall Polynomials, volume 96 of Oxford Mathematical Monographs. Oxford U. Press, Oxford, second edition, 1995. (Referred to on page 2.)
[Nun16] F. L. Nunes. On biadjoint triangles. Theory Appl. Categ., 31(9):217­256, 2016. (Referred to on page 35.)
[Sch14] D. Scha¨ppi. Ind-abelian categories and quasi-coherent sheaves. Math. Proc. Camb. Philos. Soc., 157(3):391­423, 2014. Available as arXiv:1211.3678. (Referred to on page 24.)
[Str83] R. Street. Absolute colimits in enriched categories. Cah. Topol. G´eom. Diff´er. Cat´eg., 24(4):377­379, 1983. (Referred to on page 18.)
[SW11] A. Stacey and S. Whitehouse. Tall­Wraith monoids. Available as arXiv:1102.3549, 2011. (Referred to on page 4, 5.)
[TW70] D. O. Tall and G. Wraith. Representable functors and operations on rings. Proc. London Math. Soc., 3(4):619­643, 1970. (Referred to on page 2, 3, 4.)

54

BAEZ, MOELLER, AND TRIMBLE

1Department of Mathematics, University of California, Riverside, CA 92521, USA
2Centre for Quantum Technologies, National University of Singapore, 117543, Singapore
3National Institute of Standards and Technology, Gaithersburg, MD 20899, USA
4Department of Mathematics, Western Connecticut State University, Danbury, CT 06810, USA
Email address: baez@math.ucr.edu, moeller@math.ucr.edu, trimblet@wcsu.edu

