arXiv:2106.01340v1 [cs.CR] 2 Jun 2021

Transaction Fee Mechanism Design
TIM ROUGHGARDEN, Columbia University
Demand for blockchains such as Bitcoin and Ethereum is far larger than supply, necessitating a mechanism that selects a subset of transactions to include "on-chain" from the pool of all pending transactions. EIP-1559 is a proposal to make several tightly coupled changes to the Ethereum blockchain's transaction fee mechanism, including the introduction of variable-size blocks and a burned base fee that rises and falls with demand. These changes are slated for deployment in Ethereum's "London fork," scheduled for late summer 2021, at which point it will be the biggest economic change made to a major blockchain to date.
The first goal of this paper is to formalize the problem of designing a transaction fee mechanism, taking into account the many idiosyncrasies of the blockchain setting (ranging from off-chain collusion between miners and users to the ease of money-burning). The second goal is to situate the specific mechanism proposed in EIP1559 in this framework and rigorously interrogate its game-theoretic properties. The third goal is to suggest competing designs that offer alternative sets of trade-offs. The final goal is to highlight research opportunities for the EC community that could help shape the future of blockchain transaction fee mechanisms.
ACM Reference Format: Tim Roughgarden. 2021. Transaction Fee Mechanism Design. In Proceedings of the 22nd ACM Conference on Economics and Computation (EC '21), July 18­23, 2021, Budapest, Hungary. ACM, New York, NY, USA, 19 pages. https://doi.org/10.1145/nnnnnnn.nnnnnnn
1 INTRODUCTION
Real estate on a major blockchain is a scarce resource. For example, Bitcoin [Nakamoto, 2008] and Ethereum [Buterin, 2013], the two biggest blockchains, process roughly 5 and 15 transactions per second on average, respectively. Demand for these blockchains is far larger, necessitating a mechanism that selects a subset of transactions to include "on-chain" from the pool of all submitted transactions.
Most blockchain protocols, including Bitcoin and Ethereum, employ a pay-as-bid transaction fee mechanism. Every transaction is submitted with a bid (in the blockchain's native currency), the miner of a block decides which transactions should be included in it, and upon publication of that block, the bid of each included transaction is transferred from its creator to the miner. We follow blockchain convention and refer to this mechanism as a first-price auction (FPA).
FPAs are natural enough and are currently the dominant paradigm in blockchain protocols, but are they really the best we can do? For example, could a different transaction fee mechanism offer stronger incentive guarantees?
The first goal of this paper is to frame these questions as a mechanism design problem, while taking into account the many idiosyncrasies of the blockchain setting relative to more traditional applications of the field. For example:
(1) The miner of a block has dictatorial control over its contents, and in particular may deviate from the allocation rule intended by the protocol designer.
Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for third-party components of this work must be honored. For all other uses, contact the owner/author(s). EC '21, July 18­23, 2021, Budapest, Hungary © 2021 Copyright held by the owner/author(s). ACM ISBN 978-x-xxxx-xxxx-x/YY/MM. https://doi.org/10.1145/nnnnnnn.nnnnnnn

(2) The miner of a block can costlessly include fake transactions that are indistinguishable from real transactions.
(3) Payments should be computable from "on-chain" data, which typically discloses no information about losing bids.
(4) Miners and users can easily collude off-chain to manipulate a transaction fee mechanism.
The sequential and repeated nature of the blockchain setting also offers some advantages to the mechanism designer. For example:
(5) The choice of mechanism (such as a reserve price) for a given block could be informed by the (publicly visible) outcomes for previous blocks.
(6) Revenue from a block need not be transferred directly to the block's miner and could instead be redirected, for example to the miners of future blocks.
In addition to its scientific interest, the problem of transaction fee mechanism design is central to a debate that is currently raging over the future of the Ethereum blockchain (see e.g. Beiko [2020]). EIP-1559 is the name of a proposal, developed by Ethereum's founder [Buterin, 2014, 2016, 2018a, Buterin et al., 2019], that suggests several tightly coupled changes to the transaction fee mechanism (which is currently an FPA), including the introduction of variable-size blocks and a burned "base fee" that rises and falls with demand.1 While not without critics, this proposal appears likely to be adopted and deployed in late 2021. If implemented, it would be the biggest economic change made to a major blockchain to date. The second goal of this paper is to investigate the game-theoretic properties of the transaction fee mechanism proposed in EIP-1559 and identify a precise sense in which it has superior incentive guarantees to the current FPA.2
The third goal of this paper is to explore two designs that offer benefits incomparable to those of the mechanism proposed in EIP-1559. One design, which we call the tipless mechanism, strengthens the incentive-compatibility guarantee for users while sacrificing some resistance to off-chain collusion by miners and users. The second, which we call the -smoothed mechanism, pays base fee revenues forward rather than burning them, thereby favoring miners relative to passive holders of Ethereum's currency.
The present work is only the tip of the iceberg for applications of mechanism design to blockchain protocol design. The final goal of this paper is to highlight several concrete research opportunities for the EC community to shape the evolution of the next generation of blockchains.3
2 PRELIMINARIES
2.1 Transactions in Ethereum
The Ethereum blockchain, through its Ethereum virtual machine (EVM), maintains state (such as account balances) and carries out instructions that change this state (such as transfers of the native currency, called ether (ETH)). A transaction specifies a sequence of instructions to be executed by the EVM. The creator of a transaction is responsible for specifying, among other fields, a gas limit and a gas price for the transaction. The gas limit is a measure of the cost (in computation, storage, and so on) imposed on the Ethereum blockchain by the transaction. The gas price specifies how
1"EIP" stands for "Ethereum improvement proposal." 2Our framework can also be used to assess other transaction fee mechanisms that have been proposed in the literature; see Section 5.3. 3While EIP-1559 provides important and timely motivation for the present work, much of the discussion and results herein are not Ethereum-specific and apply equally well to Bitcoin and many other blockchains. The Bitcoin community is famously hostile to any major changes to the Bitcoin protocol, so its transaction fee mechanism is likely to remain untouched for the foreseeable future. (Improving the transaction fee mechanism is also not an urgent issue in Bitcoin because, unlike in Ethereum, its block reward (of 6.25 BTC) dwarfs the typical transaction fee revenue of a block.) Meanwhile, some smaller blockchains have already deployed variations of the mechanism proposed in EIP-1559 (e.g. [Filecoin, 2020, NEAR, 2020]).

much the transaction creator is willing to pay (in ETH) per unit of gas. For example, the most basic type of transaction (a simple transfer) requires 21,000 units of gas; more complex transactions require more gas. Typical gas prices reflect the current demand for EVM computation and have varied over time by orders of magnitude; readers wishing to keep a concrete gas price in mind could use, for example, 100 gwei (where one gwei is 10-9 ETH). The total amount that the creator of a transaction offers to pay for its execution is then the gas limit times the gas price. For example, for a 21,000-gas transaction with a gas price of 100 gwei, the corresponding payment would be 2.1 × 10-3 ETH (or 5.67 USD at an exchange rate of 2700 USD/ETH).
A block is an ordered sequence of transactions and associated metadata (such as a reference to the predecessor block). There is a cap on the total gas consumed by the transactions of a block, which we call the maximum block size. The maximum block size has increased over time and is currently 15M gas, enough for roughly 600 of the simplest transactions. Blocks are created and added to the blockchain by miners. Each miner maintains a mempool of outstanding transactions and collects a subset of them into a block. To add a block to the blockchain, a miner provides a proof-of-work in the form of a solution to a computationally difficult cryptopuzzle; the puzzle difficulty is adjusted over time to maintain a target rate of block creation (in Ethereum, roughly one block per 13 seconds). Importantly, the miner of a block has dictatorial control over which outstanding transactions are included and their ordering within the block. Transactions are considered confirmed once they are included in a block that is added to the blockchain. The current state of the EVM is then the result of executing all the confirmed transactions, in the order they appear in the blockchain.4
The transaction fee mechanism is the part of the protocol that determines the amount that a creator of a confirmed transaction pays, and to whom that payment is directed. As noted earlier, today's biggest blockchains currently use a separate first-price (i.e., pay-as-bid) auction for each block.
2.2 The Basic Model
This paper focuses primarily on incentives for miners and users at the time scale of a single block, and on several important types of attacks that can be carried out at this time scale (untruthful user bids, the insertion of fake transactions and other deviations by a miner, and off-chain agreements between miners and users). Incentive issues and attacks that manifest over longer time scales are an outstanding direction for future work (see Section 6.3).
On the supply side, let denote the maximum size of a block in gas (e.g., 15M gas). On the demand side, we use to denote the set of transactions in a miner's mempool at the time of the current block's creation.
We associate three parameters with each transaction  :
· a gas limit in gas; · a value in gwei per unit of gas; · a bid in gwei per unit of gas.
The gas limit is the amount of gas required to carry out the transaction. The value is the maximum gas price the transaction's creator would be willing to pay for its execution in the current block. The bid corresponds to the gas price that the creator actually offers to pay, which in general can be less (or more) than the value. We view the gas limit and value as immutable properties of a transaction; the bid, by contrast, is under control of the transaction's creator. The gas limit and bid
4Technically, a longest-chain rule is used to resolve forks (that is, two or more blocks claiming a common predecessor). The confirmed transactions are then defined as those in the blocks that are well ensconced in the longest chain (that is, already extended by sufficiently many subsequent blocks).

of a confirmed transaction are recorded on-chain; the value of a transaction is known solely to its creator.

2.3 The Design Space: Allocation, Payment, and Burning Rules
A transaction fee mechanism decides which transactions should be included in the current block, how much the creators of those transaction have to pay, and to whom their payment is directed. These decisions are formalized by three functions: an allocation rule, a payment rule, and a burning rule. There are two significant differences between the formalism in this section and that in classical mechanism design, both dictated by blockchain idiosyncrasies: payments should depend only on on-chain information (see Remark 3), and revenue can be directed wherever the protocol sees fit (see Definition 2.4).

2.3.1 Allocation Rules. We use 1, 2, . . . , -1 to denote the sequence of blocks in the current longest chain (with 1 the genesis block and -1 the most recent block) and the pending transactions in the mempool.

Definition 2.1 (Allocation Rule). An allocation rule is a vector-valued function x from the onchain history 1, 2, . . . , -1 and mempool to a 0-1 value ( 1, 2, . . . , -1, ) for each pending transaction  .

A value of 1 for ( 1, 2, . . . , -1, ) indicates transaction 's inclusion in the current block ; a value of 0 indicates its exclusion. We sometimes write = x( 1, 2, . . . , -1, ), with the understanding that is the set of transactions for which ( 1, 2, . . . , -1, ) = 1.
We consider only feasible allocation rules, meaning allocation rules that respect the maximum
block size .

Definition 2.2 (Feasible Allocation Rule). An allocation rule x is feasible if, for every possible history 1, 2, . . . , -1 and mempool ,

· ( 1, 2, . . . , -1, )  .

We call a set of transactions feasible if they can all be packed in a single block: 

(1) .

R

1 (M

C

A

). While a transaction fee mechanism is generally

designed with a specific allocation rule in mind, it is important to remember that a miner ultimately

has dictatorial control over the block it creates.

2.3.2 Payment and Burning Rules. The payment rule specifies the revenue earned by the miner from included transactions.

Definition 2.3 (Payment Rule). A payment rule is a function p from the current on-chain history 1, 2, . . . , -1 and transactions included in the current block to a nonnegative number
( 1, 2, . . . , -1, ) for each included transaction  .

The value of ( 1, 2, . . . , -1, ) indicates the payment from the creator of an included transaction  to the miner of the block (in ETH, per unit of gas).
Finally, the burning rule specifies the amount of ETH burned for each of the included transactions.

Definition 2.4 (Burning Rule). A burning rule is a function q from the current on-chain his-
tory 1, 2, . . . , -1 and transactions included in the current block to a nonnegative number ( 1, 2, . . . , -1, ) for each included transaction  .

The value of ( 1, 2, . . . , -1, ) indicates the amount of ETH burned (per unit of gas) by the creator of an included transaction  . Burning money can be equated with a lump-sum refund to holders of the currency through deflation (à la stock buybacks). An alternative to moneyburning that has similar game-theoretic properties is to redirect a block's revenue to entities other than the block's miner, such as a foundation or the miners of future blocks (see Section 5.1 for further discussion).

Example 2.5 (First-Price Auction). The (intended) allocation rule x in the first-price auctions

currently deployed in Bitcoin and Ethereum is to include a feasible subset of outstanding transac-

tions that maximizes the sum of the gas-weighted bids. That is, the 's are assigned 0-1 values to

maximize

( 1, 2, . . . , -1, ) · · ,

(2)



subject to (1).5 A winner then pays its bid (per unit of gas), with all revenue going to the miner

(and none burned), no matter what the blockchain history and other included transactions:

( 1, 2, . . . , -1, ) = and ( 1, 2, . . . , -1, ) = 0 for all 1, 2, . . . , and  .

R

2 (T P

C

P

B ). A miner does not control the pay-

ment or burning rule, except inasmuch as it controls the allocation, meaning the transactions included

in . Given a choice of allocation, the on-chain payments and fee burns are completely specified by

the protocol. (Miners might seek out off-chain payments, however; see Section 3.3.)

R

3 (M

D

). The allocation rule x depends on the mempool because

a miner can base its allocation decision on the entire set of outstanding transactions. Payment and

burning rules must be computable from the on-chain information 1, 2, . . . , , and in particular cannot depend on outstanding transactions of excluded from the current block .6

Definition 2.6 (Transaction Fee Mechanism (TFM)). A transaction fee mechanism (TFM) is a triple (x, p, q) in which x is a feasible allocation rule, p is a payment rule, and q is a burning rule.

As a reminder, a TFM is a mechanism for allocating transactions to a single block. A blockchain protocol is free to use different TFMs for different blocks, perhaps informed by the blockchain's past history.

3 MINERS, USERS, AND INCENTIVE COMPATIBILITY
In a permissionless blockchain like Bitcoin or Ethereum, a mechanism designer must guard against harmful deviations from intended behavior by users (the creators of transactions), by miners, and by cartels of users and miners.

3.1 Users
We consider notions of incentive compatibility for users that are familiar from traditional mechanism design (such as dominant-strategy incentive compatibility). Recall from Section 2.2 that the value of a transaction is the maximum gas price the transaction's creator would be willing to pay for its inclusion in the current block. We assume that a user bids in order to maximize their
5In practice, some miners prefer to employ a greedy heuristic (ordering transactions by gas price) rather than solve this knapsack problem optimally. Because a typical block contains hundreds of transactions, the difference in revenue between a greedy and an optimal knapsack solution is usually negligible and can be safely glossed over. 6In principle, one could modify a blockchain protocol to also store additional data useful for computing a payment or burning rule, such as the highest bid by an excluded transaction. This idea is a nonstarter for today's blockchains, for two reasons: first, it would use up valuable space on the blockchain that could be used instead for processing more transactions; and second, such metadata could be costlessly manipulated by a block's miner.

net gain (i.e., the value for inclusion minus the cost for inclusion). To reason about the different possible bids for a transaction submitted to a mempool , we use ( ) to denote the result of adding the transaction with bid to . For simplicity, we assume that each transaction in the current mempool has a distinct creator.7
Definition 3.1 (User Utility Function). For a TFM (x, p, q), on-chain history 1, 2, . . . , -1, and mempool , the utility of the originator of a transaction  with value and bid is

( ) := - ( 1, . . . , -1, ) - ( 1, . . . , -1, ) ·

(3)

payment to miner (per-gas-unit) fee burn (per-gas-unit)
if is included in = x( 1, . . . , -1, ( )) and 0 otherwise.
In (3), we highlight the dependence of the utility function on the argument that is directly under a user's control, the bid submitted with the transaction. We assume that a transaction creator bids to maximize the utility function in (3). A TFM is then dominant-strategy incentive compatible (DSIC) if, assuming that the miner carries out the intended allocation rule, bidding truthfully (i.e., setting = ) always maximizes a user's utility (3), no matter what the bids of the other users. FPAs are, of course, not DSIC.

3.2 Myopic Miners
We next formalize incentive compatibility from the perspective of a miner and a single block that they have mined--intuitively, that the miner is incentivized to implement the intended allocation rule.
We include in our model of miner utility a marginal cost of gas, denoted by . (The casual reader is encouraged to take = 0 throughout the paper.) This parameter reflects the fact that every transaction included in a block imposes a small marginal cost on that block's miner; for example, one factor is that the probability that a block is orphaned from the main chain (i.e., the "uncle rate") increases roughly linearly with the block size [Decker and Wattenhofer, 2013]. The parameter can be interpreted as the minimum gas price that a profit-maximizing miner would be willing to accept in exchange for transaction inclusion when the maximum block size is not a binding constraint. For simplicity, we assume that is the same for all miners and common knowledge among users.8,9
In addition to choosing an allocation (Remark 1), we assume that miners can costlessly add any number of fake transactions to the mempool (with arbitrary gas limits and bids). We call a miner myopic if its utility function is its net revenue from the current block (given the transactions and bids submitted by the users).10,11
Definition 3.2 (Myopic Miner Utility Function). For a TFM (x, p, q), on-chain history 1, 2, . . . , -1, mempool , fake transactions , and choice   of included transactions (real and fake),

7For the mechanisms discussed in this work, all of the stated incentive guarantees extend easily to the case of users with
additive valuations over possibly multiple transactions; see also Remark 4. 8Calculations by Buterin [2019] suggest that is extremely small--at this time of writing, on the order of 0.4­3.3 gwei. 9The first-price auction in Example 2.5 is stated for the case of = 0. More generally, the miner should be expected to
maximum revenue minus gas costs and the " · " term in (2) should be replaced by ( - ) · . 10We ignore the block reward (currently 2 ETH), as it is independent of the miner's actions and therefore irrelevant for our
single-block game-theoretic analysis. 11Understanding non-myopic miner behavior is an outstanding open question; see Section 6.3.

the utility of a myopic miner is

( , ) :=

( 1, 2, . . . , , ) · -

( 1, 2, . . . , , ) · -

. (4)







miner's revenue

fee burn for miner's fake transactions gas costs

The first term sums over only the real included transactions, as for fake transactions the payment goes from the miner to itself. The second term sums over only the fake transactions, as for real transactions the burn is paid by their creators (not the miner). In (4), we highlight the dependence of the utility function on the two arguments that are under a miner's direct control, the choices of the fake transactions and included (real and fake) transactions .12
A transaction fee mechanism is generally designed with a specific allocation rule in mind (Remark 1), but will miners actually implement it?

Definition 3.3 (Incentive-Compatibility for Myopic Miners (MMIC)). A TFM (x, p, q) is incentivecompatible for myopic miners (MMIC) if, for every on-chain history 1, 2, . . . , -1 and mempool , a myopic miner maximizes its utility (4) by creating no fake transactions (i.e., setting = ) and following the suggestion of the allocation rule x (i.e., setting = x( 1, 2, . . . , -1, )).
For example, FPAs are MMIC--the intended allocation rule maximizes miner revenue less gas costs, which the miner is happy to do. Second-price-type auctions are not MMIC, however, as in many cases a miner can boost its revenue through the inclusion of fake transactions (as noted, essentially, by Basu et al. [2019] and Lavi et al. [2019]).
Definition 3.3 is related to the notion of a credible mechanism [Akbarpour and Li, 2020]. Intuitively, a mechanism is credible if the agent tasked with carrying it out has no plausibly deniable utility-improving deviation. Interestingly, because miners can manipulate allocations but not prices (Remark 2), there is no need to restrict to "plausibly deniable" deviations in Definition 3.3. Another difference is that the current theory of credible mechanisms, and in particular the characterizations in Akbarpour and Li [2020], is largely restricted to single-item auctions (though see Daskalakis et al. [2020]). Auctions that select transactions to include on a blockchain correspond to the more general setting of (multi-item) knapsack auctions [Aggarwal and Hartline, 2006].

3.3 Off-Chain Agreements
Another idiosyncrasy of the blockchain setting is the easy availability of side channels and the consequent risk of off-chain collusion by users and miners. This danger is not hypothetical; offchain markets are easily implemented using smart contracts and are already readily available in Ethereum (e.g. [1inch, 2021]).
Definition 3.4 (Off-Chain Agreement (OCA)). For a set of transactions and a miner , an offchain agreement (OCA) between 's creators and specifies:
(i) a bid vector b, with indicating the bid to be submitted with the transaction  ; (ii) an allocation vector x, indicating the transactions that the miner will include in its block; (ii) a per-gas-unit ETH transfer from the creator of each transaction  to the miner .
In an OCA, each creator of a transaction agrees to submit with a bid of while transferring per unit of gas to the miner off-chain; the miner, in turn, agrees to mine a block comprising the agreed-upon transactions of (with on-chain bids b).

12We can assume that  , as there's no point to creating and then excluding a fake transaction.

Example 3.5 (Moving Payments Off-Chain). To get a feel for OCAs, imagine a first-price auction in which 50% of the revenue is burned and the other 50% is transferred to the miner. Miners and users could then collude off-chain to evade the fee burn as follows:
(1) Users bid zero on-chain and communicate off-chain what they would have bid in a standard first-price auction.
(2) Miners keep 75% of the (off-chain) bids of the transactions they include, with the other 25% refunded to those transactions' creators.
In the notation of Definition 3.4, this is the OCA (b, x, ) in which b = 0; = .75 , where  denotes what 's creator would have bid in a first-price auction without fee-burning; and x is the result of a first-price auction's allocation rule (Example 2.5) with bids b. Compared to the on-chain outcome with bids b, miners earn 50% more revenue and users enjoy a 25% discount, both at the expense of the protocol.

From the coalition's perspective, on-chain and off-chain payments from the users to the miner (the 's and 's) remain within the coalition and thus cancel out; the fee burn (the 's) is transferred outside the coalition and is therefore a loss. Thus, the point of an OCA is to maximize the joint utility--the amount of transaction value that is not lost to the protocol or to the miner's costs.

Definition 3.6 (Joint Utility). For an on-chain history 1, 2, . . . , -1, the joint utility of the miner and users for the block is

( - ( 1, 2, . . . , -1, ) - ) · .

(5)



We assume that miners and users act to maximize their joint utility. Using off-chain transfers, a miner and users can then split this joint utility among themselves in an arbitrary way. When analyzing OCAs, we focus on the joint utility (5) of the cartel of miner and users, without concern about how it might be split among them.13 A TFM is then OCA-proof if there is a canonical on-chain outcome whose joint utility cannot be improved upon by any OCA.
More formally, for a set of transactions and bids b for those transactions, we denote by = (b) the corresponding mempool. By a bidding strategy, we mean a function : R+  R+ mapping user valuations to on-chain bids. For a valuation profile v, (v) denotes the bid vector obtained by the component-wise application of .

Definition 3.7 (OCA-Proof). A TFM (x, p, q) is OCA-proof if there exists a bidding strategy such that, for every on-chain history 1, 2, . . . , -1 and set of outstanding transactions with valuations v, the joint utility of the on-chain outcome with bids (v) is at least that achieved by any OCA.

In other words, if a TFM is not OCA-proof, then no matter what bidding strategy users use, there will be cases in which off-chain collusion collectively benefits the miner and users.

Example 3.8 (First-Price Auctions Are OCA-Proof). Consider a set of transactions and let denote the identity function. The objective (2) maximized by the allocation rule x with bids (v) = v is identical to the joint utility (5). Thus, the joint utility of the on-chain outcome with bids (v) cannot be improved upon by any OCA. (If the marginal cost is 0, every linear bidding strategy, with ( ) = for some > 0, works equally well. If in addition all transactions have the same gas limit, an arbitrary strictly increasing bidding strategy can be used.)

13Note that if an OCA strictly increases the joint utility relative to some intended outcome, off-chain transfers can be defined so that the individual utility of every participant (miner or user) strictly increases.

4 EIP-1559
We now proceed to the second aim of the paper: investigating the extent to which the transaction fee mechanism proposed in EIP-1559 satisfies the incentive guarantees laid out in Section 3. Buterin [2018b] explains the original motivation for EIP-1559 as follows:
Our goal is to discourage the development of complex miner strategies and complex transaction sender strategies in general, including both complex client-side calculations and economic modeling as well as various forms of collusion. This section articulates the sense in which this goal is met: the transaction fee mechanism proposed in EIP-1559 retains the MMIC and OCA-proof properties of today's FPAs (Theorems 4.2 and 4.5) while also achieving a mildly relaxed form of dominant-strategy incentive compatibility (Theorem 4.4).
4.1 Burning a History-Dependent Base Fee
We proceed to describe the transaction fee mechanism proposed in EIP-1559.
EIP-1559: Key Ideas (1­3 of 8)
1. Each block has a protocol-computed reserve price (per unit of gas) called the base fee. Paying the base fee is a prerequisite for inclusion in a block.
2. The base fee is a function of the preceding blocks only, and does not depend on the transactions included in the current block.
3. All revenues from the base fee are burned--that is, permanently removed from the circulating supply of ETH.
The second point is underspecified; how, exactly, is the base fee derived from the preceding blocks? Intuitively, increases and decreases in demand should put upward and downward pressure on the base fee, respectively. But the blockchain records only the confirmed transactions, not the transactions that were priced out. If miners publish a sequence of full (15M gas) blocks, how can the protocol distinguish whether the current base fee is too low or exactly right?
4.2 Variable-Size Blocks
The next key idea is to relax the constraint that every block has size at most 15M gas and instead require only that the average block size is at most 15M gas.14 The mechanism in EIP-1559 then uses past block sizes as an on-chain measure of demand, with big blocks (more than 15M gas) and small blocks (less than 15M gas) signaling increasing and decreasing demand, respectively. Some finite maximum block size is still needed to control network congestion, which in EIP-1559 is twice the average block size.
EIP-1559: Key Ideas (continued)
4. Double the maximum block size (e.g., from 15M gas to 30M gas), with the old maximum (e.g., 15M gas) serving as the target block size.
5. Adjust the base fee upward or downward whenever the size of the latest block is bigger or smaller than the target block size, respectively.
The exact formula by which the base fee evolves will not be important for our game-theoretic analysis. There are many interesting open questions that concern base fee evolution, however, and we highlight some of these in Section 6.2.
14More generally, EIP-1559 is parameterized by a target block size, which is adjusted by miners over time (like the maximum block size is now).

If the base fee is burned rather than given to miners, why should miners bother to include any transactions in their blocks at all? Also, what happens when there are lots of transactions (more than 30M gas worth) willing to pay the current base fee?

4.3 Tips
The transaction fee mechanism proposed in EIP-1559 addresses the preceding two questions by allowing the creator of a transaction to specify a tip, to be paid above and beyond the base fee, which is transferred to the miner of the block that includes the transaction (as in a first-price auction). Intuitively, small tips should be sufficient to incentivize a miner to include a transaction during a period of stable demand, when there is room in the current block for all the outstanding transactions that are willing to pay the base fee. Large tips can be used to encourage special treatment of a transaction, such as the immediate inclusion in a block in the midst of a sudden demand spike.
EIP-1559: Key Ideas (continued)
6. Rather than a single gas price, a transaction now includes a tip and a fee cap. A transaction will be included in a block only if its fee cap is at least the block's base fee.
7. If a transaction with tip , fee cap , and gas limit is included in a block with base fee , the transaction creator pays · min{ + , } ETH.
8. Revenue from the base fee (that is, · ) is burned and the remainder ( · min{ , - }) is transferred to the miner of the block.
Thus, with respect to a base fee , a transaction with tip and fee cap is interpreted as a transaction with bid = min{ + , }.

4.4 Is EIP-1559 Incentive Compatible?
The next definition phrases EIP-1559's transaction fee mechanism in the language of Section 2. We use ( 1, 2, . . . , -1) to denote the base fee of block ; again, the definition of is orthogonal to this section's game-theoretic analysis and will be revisited in Section 6.2.

Definition 4.1 (1559 Mechanism). For each history 1, 2, . . . , -1 and corresponding base fee = ( 1, 2, . . . , -1):
(a) the (intended) allocation rule x of the 1559 mechanism is to include a feasible subset of outstanding transactions that maximizes the sum of the gas-weighted bids, less the gas costs and total base fee paid (and subject to the block size constraint (1)):

( 1, 2, . . . , -1, ) · ( - - ) · ;

(6)



(b) the payment rule of the 1559 mechanism is

( 1, 2, . . . , -1, ) = -

for all  ; (c) the burning rule of the 1559 mechanism is

 ( 1, 2, . . . , -1, ) =

for all  .

From the perspective of a myopic miner, the 1559 mechanism is incentive compatible (Definition 3.3).

T

4.2 (T 1559 M

MMIC). The 1559 mechanism (x, p, q) is MMIC.

P . Fix an on-chain history 1, 2, . . . , -1, a mempool , and a marginal cost of gas  0. Let denote the corresponding base fee ( 1, 2, . . . , -1) for the current block. By Definition 4.1, myopic miner utility (4) equals

( , )=

( - - )· -

( + )· ,

(7)





net revenue from

cost of fake txs

where denotes the transactions included by the miner and the fake transactions that it creates. Included fake transactions strictly increase the second term (by + per unit of gas) while leaving the first unaffected, so a myopic miner will only include real transactions in . In this case, myopic miner utility equals

( - - )· ,


which is identical to the quantity (6) maximized by the allocation rule x. Thus, myopic miner utility is maximized by following the allocation rule and setting equal to x ( 1, 2, . . . , -1, ).

What about from the perspective of the users? A trivial but important observation is that, if the base fee happens to be 0, the 1559 mechanism effectively reverts to a first-price auction and is not incentive compatible in any reasonably strong sense of the phrase. On the other hand, given that the base fee rises and falls with demand, one would expect a base fee of 0 only when there are not enough transactions to fill blocks up to the target size (in which case users can submit negligible bids and still expect to be included). Can we at least argue that, if the base fee "does its job," then the 1559 mechanism is incentive compatible for users?

Definition 4.3 (Excessively Low Base Fee). Let denote the marginal cost per unit of gas. A base fee is excessively low for a set of transactions with valuations v if the demand at price + exceeds the maximum block size :

>.

(8)

 : +

demand at price +

For an appropriately tuned base fee update rule , excessively low base fees should arise only while waiting for the base fee to catch up to a large and sudden demand spike.
Are excessively low base fees the only obstruction to incentive compatibility? Not quite. The issue is that if, for whatever reason, users choose to overbid (with > ), a base fee may act as if it is excessively low (with respect to the reported bids) even though it is not (with respect to the true valuations). The next result proves that these are the only two obstructions to incentive compatibility--without them, every user has a canonical bid (corresponding to a truthful fee cap and a negligible tip) that is guaranteed to be utility-maximizing. In this case, the 1559 mechanism effectively acts as a posted price mechanism with a price (per unit of gas) equal to the base fee plus the miner marginal cost .

T

4.4 (C

UI

C

). Fix an on-chain history 1, 2, . . . , -1

and corresponding base fee = ( 1, 2, . . . , -1), a marginal cost of gas to miners, a set of trans-

actions with valuations v, a transaction  , and bids b- for the transactions of - { }. Suppose

that:

(i) is not excessively low for ; and

(ii) for every  - { },  . Then, 's creator maximizes their utility by setting = min{ + , }.

P . Suppose first that < + . The objective (6) of the 1559 allocation rule prescribes including only transactions  with  + . If 's creator bids = min{ + , } = , the transaction will be excluded from the block and the resulting utility will be 0. Every alternative bid  either leads to the same outcome or, if it results in 's inclusion in the block, leads to negative utility (at most - ( + ) < 0).
Now suppose that  + . By the no overbidding condition (ii), the transactions  with  + are a subset of the transactions  with  + . In particular, because is not excessively low for (condition (i)), there is room for all of these transactions (no matter what is):



.

(9)

 : +

 : +

gas of included txs

demand at price +

If 's creator bids = min{ + , } = + , the transaction will be included in the block and

the resulting utility will be - ( + )  0. Every alternative bid either leads to 's exclusion

(resulting in utility 0) or to 's inclusion at a price higher than + . We conclude that there is no

alternative bid for that increases its creator's utility. As , , , v, , and b- were arbitrary, the proof is complete.

R

4 (U C

M

T

). Because the 1559 mechanism acts

as a posted-price mechanism (under conditions (i) and (ii)), the incentive-compatibility guarantee

in Theorem 4.4 continues to hold for users that control multiple transactions (assuming an additive

valuation over them) and for cartels of colluding users.

Finally, we show that, like in a first-price auction, miners and users cannot improve their joint utility under the 1559 mechanism through off-chain agreements. A key driver of this result is that the base fee is determined by past history and does not depend on the current actions of the miner or users (cf., Example 3.5).

T proof.

4.5 (T 1559 M

OCA P ). The 1559 mechanism (x, p, q) is OCA-

P . Fix an on-chain history 1, 2, . . . , -1 and corresponding base fee = ( 1, 2, . . . , -1). Consider a set of transactions with valuations v and let denote the identity function. Because q is the constant function always equal to (Definition 4.1), the objective (6) maximized by the allocation rule x with bids (v) = v is identical to the joint utility (5). Thus, the joint utility of the
on-chain outcome with bids (v) cannot be improved upon by any OCA.

R

5 (W B

B F ?). The threat of off-chain agreements also explains why

the 1559 mechanism burns its base fee revenues. If these revenues were instead passed on to a block's

miner, the 1559 mechanism would revert to a first-price auction (with block size 30M gas, double the

target) via the following off-chain agreement:

(1) Users bid on-chain and communicate off-chain to the miner what they would have bid in a

standard first-price auction. (2) If a miner includes a transaction with off-chain bid , 's creator transfers - per unit of

gas to the miner. (When < , this should be interpreted as a refund of - per unit of gas from the miner to 's creator.)

Overall, the 1559 mechanism earns an impressive report card with respect to the three notions of incentive compatibility defined in Section 3: it achieves two of them always, and the third under reasonable assumptions (no overbidding and a base fee that is not excessively low). But can we do better?

5 ALTERNATIVE DESIGNS
5.1 Paying the Base Fee Forward
Remark 5 shows that, for a block's base fee to be economically meaningful, revenues from it cannot be passed on to the miner of the block. EIP-1559 avoids doing so in the simplest-possible way, by burning the base fee revenues. Burning money effectively issues a lump-sum refund to all holders of Ethereum's currency. An alternative solution is to transfer these revenues to one or more miners of other blocks.

5.1.1 The -Smoothed Mechanism. Concretely, consider the variant of the 1559 mechanism in which, for some window length  (hard-coded into the protocol), the base fee revenues from a block are split equally among the miners of the next  blocks. (The 1559 mechanism can be thought of as the special case in which  = 0.) Thus, a miner of a block receives a 1/ fraction of the sum of the base fee revenues from the previous  blocks, along with all of the tips from the current block.
We can define the -smoothed mechanism as follows. Fix a blockchain history 1, 2, . . . , -1 with  +1. Let = ( 1, 2, . . . , -1) denote the base fee of block . Let = ( 1, 2, . . . , -1) denote the paid-forward base fee revenues:

( 1, 2, . . . ,

-1)

:=

1 

-1

·,

= -

where =  denotes 's size in gas. The allocation, payment, and burning rules of the smoothed mechanism are formally identical to those of the 1559 mechanism (Definition 4.1), with the understanding that the burning rule (a constant function always equal to ) now indicates a payment that is paid forward to future miners rather than burned. Technically, the paid-forward base fee revenues should be added to a miner's utility function (Definition 3.2), but because is independent of the miner's current actions, it has no effect on the optimal strategy of a myopic miner (or user). In effect, serves as a fixed bonus added to the standard block reward.

5.1.2 Properties of the -Smoothed Mechanism. Because users are indifferent to how their pay-
ments are directed, and because a myopic miner cares only about its revenue from the current block, all of the game-theoretic guarantees for users and myopic miners satisfied by the 1559 mech-
anism (Theorem 4.2, Theorem 4.4, and Theorem 4.5) carry over to the -smoothed mechanism (for any ).15

5.1.3 Pros and Cons of the -Smoothed Mechanism. A basic question is: Who should benefit from the user payments that are inevitably generated by a fully utilized blockchain? The 1559 and smoothed mechanisms offer different answers: The fee burn in the 1559 mechanism explicitly favors currency holders (through deflation), while the -smoothed mechanism favors Ethereum miners (through more transaction fee revenues).
A second trade-off between the 1559 and -smoothed mechanisms concerns whether variability in demand (and hence fees) translates to variability in security or in the issuance of new currency. In the 1559 mechanism, every block changes the money supply in two ways: minting new coins

15These guarantees would hold equally well for a blended version of the 1559 and -smoothed mechanisms, e.g. burning a  [0, 1] fraction of the base fee revenues and paying forward the remaining 1 - fraction.

for the block reward (currently 2 ETH), and burning the coins used to pay the base fee. Because the base fee rises and falls with demand, Ethereum's inflation rate would be variable and unpredictable. On the other hand, assuming negligible tips, every block confers roughly the same total reward to the miner (the block reward); the security of the Ethereum network scales with this total reward [Auer, 2019, Budish, 2018] and should therefore also stay relatively constant (modulo fluctuations in the price of ETH). Meanwhile, in the -smoothed mechanism, inflation would be as predictable as it is under the status quo (in Ethereum, currently around 4% annually). Instead, total miner reward would vary with the revenue generated by the base fee, leading to an unpredictable level of security (though never less than that with the 1559 mechanism).
Finally, because of its variable total reward, the -smoothed mechanism is vulnerable to certain attack vectors that would be fruitless under the 1559 mechanism, especially when  is small. For example, imagine that  = 1 and a miner 1 mines a block 1 with an unusually large sum of transaction fees. This windfall would be reaped by the miner 2 of the next block 2; suppose further that the sum of transaction fees in 2 is much less than . At this juncture, a miner 3 might consider trying to extend 1 with a block 3 in order to orphan 2; if other miners happen to extend 3 rather than 2, 3 will effectively have stolen the reward of from 2.16 Such examples suggest choosing a large value of  (e.g.,  = 1000) to guarantee that consecutive blocks will have nearly identical total rewards associated with them.

5.2 The Tipless Mechanism
This section presents an alternative design that has stronger incentive-compatibility guarantees for users than the 1559 mechanism, but weaker resistance to off-chain agreements.

5.2.1 The Tipless Mechanism. We next define the tipless mechanism, so called because it is essentially the 1559 mechanism with constant and hard-coded tips rather than variable and userspecified tips. As with the 1559 mechanism, each block has a base fee = ( 1, 2, . . . , -1) that depends on past blocks and is burned (or alternatively, paid forward as in Section 5.1). The creator of a transaction specifies a fee cap but no tip. This parameter induces a bid for the transaction with respect to any given base fee , namely = min{ + , }. Here is a hard-coded tip to incentivize miners to include transactions--for example, equal to (or perhaps slightly higher than) the marginal cost of gas to miners.17 In effect, the bid space of the mechanism is [0, + ], with higher bids automatically interpreted as + by the protocol. Only transactions with bid + are eligible for inclusion in a block with base fee ; transactions with lower bids included in the block are considered invalid by the protocol.

Definition 5.1 (Tipless Mechanism). Fix a hard-coded user tip . For each history 1, 2, . . . , -1 and corresponding base fee = ( 1, 2, . . . , -1):
(a) the (intended) allocation rule x of the tipless mechanism is to maximize miner revenue from eligible transactions (i.e., those with bid + ), less gas costs and subject to (1):

( 1, 2, . . . , -1, ) · ( - ) · ,

(10)

 : =+

or equivalently, in the intended regime with  , to include a largest-possible subset of eligible transactions;18

16This is similar to the undercutting attack of Carlsten et al. [2016] for a regime in which transaction fees dominate block
rewards. 17More generally, the hard-coded tip could be adjusted over time in the same way as the block reward, through social
consensus and hard forks. 18Ties between subsets are intended to be broken consistently and independently of transactions' fee caps.

(b) the payment rule of the tipless mechanism is

( 1, 2, . . . , -1, ) =
for all  ; (c) the burning rule of the tipless mechanism is

for all  .

( 1, 2, . . . , -1, ) =

5.2.2 Properties of the Tipless Mechanism. Similarly to the 1559 mechanism (Theorem 4.2), the tipless mechanism is MMIC.

T

5.2 (T T

M

MMIC). The tipless mechanism is MMIC.

P . Fix an on-chain history 1, 2, . . . , -1, a mempool , and a marginal cost of gas  0. Let denote the corresponding base fee ( 1, 2, . . . , -1) for the current block. By Definition 5.1, myopic miner utility (4) equals

( , )=

( - )· -

( + )· ,





where denotes the transactions included by the miner (all with bid + ) and the fake transactions that it creates. Included fake transactions strictly increase the second term while leaving the first unaffected. A myopic miner therefore includes only real transactions and earns utility

( - )· ,


which is identical to the quantity (10) maximized by the allocation rule x . Thus, myopic miner utility is maximized by following the allocation rule and setting equal to x ( 1, 2, . . . , -1, ).

Truthful bidding in the tipless mechanism, meaning setting one's fee cap to one's valuation, is a dominant strategy. This guarantee improves over that of the 1559 mechanism, which assures the optimality of truthful bidding (with a negligible tip) only when the base fee is not excessively low and users do not overbid. In effect, the tipless mechanism continues to act as a posted price mechanism (with price + ) when the base fee is excessively low, whereas the 1559 mechanism would revert to a first-price auction.

T

5.3 (T T

M

DSIC). The tipless mechanism is DSIC.

P . Fix an on-chain history 1, 2, . . . , -1 and corresponding base fee = ( 1, 2, . . . , -1), and a set of transactions with valuations v. Suppose the creator of a transaction  sets their
fee cap equal to its valuation , corresponding to the bid = min{ + , }. For a low-value transaction (with < + ), every alternative bid ^ either has no effect on the creator's utility or leads to 's inclusion in the block, in which case ^ = + and utility drops from 0 to ( - ^ ) · < 0. For a high-value transaction (with  + ), every alternative bid ^ either has
no effect on the creator's utility or, if the alternative bid causes to be newly excluded from the
block, drops their utility from a nonnegative number ( - - ) ·  0 to 0. We conclude that
the bid = min{ + , } is always utility-maximizing for 's creator.

Further, the tipless mechanism is OCA-proof except during periods of rapidly increasing demand.

T

5.4 (C

OCA P

). Fix an on-chain history 1, 2, . . . , -1 and

corresponding base fee = ( 1, 2, . . . , -1), and a set of transactions with valuations v such

that is not excessively low. With = , the tipless mechanism is OCA-proof.

P . The joint utility (5) of the miner and users for the current block is

( - - )· .

(11)



Because is not excessively low for , the total gas consumed by transactions with  + = + is at most the maximum block size . The joint utility (11) is therefore maximized by including precisely these transactions. With the bidding strategy ( ) = min{ + , } = min{ + , }, this outcome can be achieved on-chain, and thus cannot be improved upon by an OCA.

The tipless mechanism is not generally OCA-proof when the base fee is excessively low (even with = ). For consider an arbitrary bidding strategy . If ( ) < + for some > + , a collection of transactions all with valuation would clearly be better off in an OCA with a miner than bidding ( ) on-chain (which would lead to everyone's automatic exclusion). On the other hand, if ( ) = + for all > + , consider a collection of transactions with total size  bigger than the maximum block size and distinct valuations all bigger than + . The intended allocation rule then instructs the miner to include a subset of transactions with the maximumpossible total size (subject to the block capacity ). This will not generally be a subset  of transactions that maximizes the joint utility  ( - - ) · subject to the block capacity. The miner and users can then strictly increase their joint utility with an OCA that instead includes the latter subset of transactions (for example, with transfers arranged to share the increase in joint utility equally among the miner and users).
5.2.3 Pros and Cons of the Tipless Mechanism. Perhaps the strongest argument in favor of the tipless mechanism over the 1559 mechanism is its simplicity. On the user side, there are several simplifications. The creator of a transaction must specify only one parameter (a fee cap ) rather than two (a fee cap and a tip ). The "obvious optimal bid" in the tipless mechanism (setting =
) is optimal for every block and no matter what the bids of the competing transactions. The "obvious optimal bid" in the 1559 mechanism (setting = and = ) is optimal only in blocks with neither an excessively low base fee nor overbidding. On the miner side, assuming that  , the revenue-maximizing strategy simplifies to maximizing the block size while using only eligible transactions (with bid + ).
What about the mechanism's drawbacks? First, the hard-coded tip is yet another somewhat arbitrary parameter than may need to be adjusted over time through protocol upgrades.19 Second, in a block with an excessively low base fee (presumably due to rapidly increasing demand), OCAproofness breaks down. At such times, one might expect shenanigans from users designed to boost the chances of transaction inclusion (such as off-chain agreements with the miner to simulate the tips of the 1559 mechanism, or the submission of multiple copies of the same transaction).

5.3 Previously Proposed Alternative Designs
A variant of the "pay-it-forward" design philosophy in Section 5.1 was proposed also by Basu et al. [2019] for a transaction fee mechanism that is not directly related to the 1559 mechanism. We next explain a slightly simplified version of their proposal, which we call the BEOS mechanism (after its proposers).

19Possible counterargument: with so many such parameters already (e.g., opcode gas costs [Wood, 2020]), what's one more?

There is a fixed block size, say 15M gas, and no base fee. The first key idea is to charge all transactions included in a block a common price (per unit of gas), namely the lowest bid of an included transaction. Miner revenue is then the block size (in gas) times the lowest bid of an included transaction, and so a revenue-maximizing miner may exclude transactions in order to boost the lowest included bid.20
The second key idea in the BEOS mechanism is to automatically charge only a minimum transaction fee--for example, just enough to cover the marginal cost of gas--to all transactions in any block that is not (almost) full. This rule by itself is toothless and leads to an equivalent mechanism, as a miner can costlessly extend its favorite underfull block with minimum bid to a full block with minimum bid using fake transactions (all with bid ).
The final key idea in the BEOS mechanism is to pay transaction fees forward, with the transaction fee revenue from a block split evenly between 's miner and the miners of the  - 1 subsequent blocks. Thus, the miner of a block gets a 1/ fraction of the transaction fee revenue in that block, along with a 1/ fraction of the combined revenue of the preceding  - 1 blocks. As a result, for   2, fake transactions now carry a cost: the miner pays their full transaction fees but recoups only a 1/ fraction of them as revenue.
The BEOS mechanism is arguably simpler than that proposed in EIP-1559, as there is no base fee to keep track of. Its game-theoretic guarantees are considerably weaker, however. While the "pay it forward" idea helps discourage fake transactions, the BEOS mechanism is not in general MMIC.21 It is "approximately DSIC" as the number of users grows large, in the sense that no bidding strategy generates significantly more utility than truthful bidding. It is not OCA-proof (for   2), as a miner and users could collude to move all transaction fees off-chain, leaving no on-chain fees to pay forward (cf., Example 3.5).
6 FUTURE WORK
This work suggests a number of opportunities for future research by the EC community that would be highly relevant to the next generation of blockchain protocols.
6.1 Characterizing Incentive-Compatible Transaction Fee Mechanisms
Section 3 proposes three types of incentive-compatibility guarantees: MMIC, DSIC, and OCAproofness. The 1559 and tipless mechanisms achieve all three properties when the base fee is not excessively low (in the former case, assuming also no overbidding), but otherwise give up on DSIC and OCA-proofness, respectively. We conjecture that there is no transaction fee mechanism that always satisfies all three properties. More generally, it would be interesting to characterize the mechanisms that satisfy various subsets and relaxations of these three properties.
6.2 How Should the Base Fee Evolve?
In EIP-1559, the base fee is adjusted upward or downward whenever the size of the latest block is bigger or smaller than the target block size, respectively (Section 4.2). The specific adjustment rule that is currently proposed in EIP-1559 computes the base fee for the current block from the base fee and size of the predecessor block using the following formula, where
20This is exactly the "monopolistic price" mechanism proposed by Lavi et al. [2019]; they were motivated by the problem of maximizing the security provided by transaction fees (at the expense of economic efficiency) in a future in which Bitcoin's block rewards are negligible. This mechanism is MMIC; is "approximately DSIC," in the sense that truthful bidding is an approximately dominant strategy for users as the number of users grows large [Lavi et al., 2019, Yao, 2018]; and is not OCA-proof (on account of failing to maximize the joint utility of the miner and users). 21Basu et al. [2019] prove that the mechanism becomes "approximately MMIC" in the case of a very large number of transactions with i.i.d. valuations drawn from a distribution with bounded support.

denotes the target block size:

:=

·

1

+

1 8

·

-

.

(12)

For example, the base fee increases by 12.5% after a maximum-size block (i.e., double the target size) and decreases by 12.5% after an empty block. It is an open question to formally justify this choice of update rule or devise a superior alternative (see Monnot et al. [2020] for recent progress). When assessing a candidate update rule, there are several dimensions to consider, including its responsiveness to and recovery from a demand spike, and its manipulatibility by miners over long time scales (cf., Section 6.3).

6.3 Incentives for Non-Myopic Miners in EIP-1559
The present work analyzes the 1559 mechanism and its competitors at the time scale of a single block. Many candidate deviations by miners and users manifest already at this time scale.
In contrast to the status quo of FPAs, EIP-1559 entangles the transaction fee mechanisms for different blocks through its history-dependent base fee. Dependencies between blocks open up the possibility of miner deviations that unfold over longer time scales. For example, recall that publishing an overfull block (with total gas more than the target gas size) increases the base fee for the next block, potentially decreasing the revenue of that block's miner. Thus, while every miner would love to be able to free ride on previous miners who have sacrificed some eligible transactions to keep block sizes and hence the base fee down, a miner has no incentive to make such a sacrifice for future miners.
Suppose, however, that a cartel of miners with 51% of Ethereum's hashrate bands together, drives the base fee down to near zero (by publishing empty blocks for an appropriate duration), and keeps it there in perpetuity (publishing empty blocks when needed and target-size blocks, otherwise). This collusive strategy evades the 1559 mechanism's base fee, effectively transforming it into an FPA from the users' perspective.
Of course, if 51% of Ethereum's hashrate forms a cartel, the blockchain has much bigger problems! For example, such a cartel could deliberately orphan blocks mined by non-cartel members, or double-spend funds via major chain reorganizations. More generally, we conjecture that, in some precise and natural sense, colluding to manipulate the Ethereum blockchain would not be any easier after the deployment of EIP-1559 than it is now.

6.4 Credible Knapsack Auctions
Another worthy research direction is to narrow the gap between the assumptions and goals of the theory of credible mechanisms [Akbarpour and Li, 2020] and those relevant to blockchains. A good starting point would be to characterize all static credible mechanisms in settings more general than single-item auctions, such as multi-unit auctions with unit-demand bidders and, more generally, single-parameter knapsack auctions [Aggarwal and Hartline, 2006].

6.5 Position-Specific Valuations
The present work models a user as a binary single-parameter agent, whose transaction is either included in the current block or not. With the rise of "DeFi" (decentralized finance), an increasing number of transaction creators possess strong preferences over the ordering of the transactions in a block [Daian et al., 2020]. For example, front-running bots that scan the mempool for lucrative transactions to copy and execute immediately use very high bids in an attempt to secure the first position in the next block (thus beating out the original transaction that they copied). How should

a transaction fee mechanism take into account users' position preferences while respecting the unique design constraints imposed by the blockchain setting?

REFERENCES

1inch. 2021.

What are private transactions and how they work? (2021).

URL:

https://help.1inch.exchange/en/articles/4695716-what-are-private-transactions-and-how-they-work.

G. Aggarwal and J. D. Hartline. 2006. Knapsack auctions. In Proceedings of SODA. 1083­1092.

M. Akbarpour and S. Li. 2020. Credible Auctions: A Trilemma. Econometrica 88, 2 (2020), 425­467. URL:

http://web.stanford.edu/~mohamwad/CredibleMechanisms.pdf .

R. Auer. 2019. Beyond the doomsday economics of "proof-of-work" in cryptocurrencies. (January 2019). BIS working paper

#765. URL: https://www.bis.org/publ/work765.pdf.

S. Basu, D. Easley, M. O'Hara, and E. G. Sirer. 2019. Towards a Functional Fee Market for Cryptocurrencies. (January 2019).

arXiv:1901.06830. URL: https://arxiv.org/pdf/1901.06830.pdf.

T. Beiko. 2020.

EIP-1559 Community Outreach Report. (October 2020).

URL:

https://medium.com/ethereum-cat-herders/eip-1559-community-outreach-report-aa18be0666b5.

E. Budish. 2018. The Economic Limits of Bitcoin and the Blockchain. (2018). NBER Working Paper 24717. URL:

https://faculty.chicagobooth.edu/eric.budish/research/Economic-Limits-Bitcoin-Blockchain.pdf .

V. Buterin. 2013. Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform. (November 2013).

Unpublished white paper. URL: https://ethereum.org/en/whitepaper/.

V. Buterin. 2014. On Transaction Fees, And The Fallacy of Market-Based Solutions. (February 2014). URL:

https://blog.ethereum.org/2014/02/01/on- transaction- fees- and- the- fallacy- of- market- based- solutions/ .

V. Buterin. 2016. On Inflation, Transaction Fees and Cryptocurrency Monetary Policy. (July 2016).

URL:

https://blog.ethereum.org/2016/07/27/inflation- transaction- fees- cryptocurrency- monetary- policy/ .

V. Buterin. 2018a. Blockchain resource pricing. (August 2018). URL: https://ethresear.ch/uploads/default/original/2X/1/197884012ada19331

V. Buterin. 2018b. First and second-price auctions and improved transaction-fee markets. (July 2018). URL:

https://ethresear.ch/t/first- and- second- price- auctions- and- improved- transaction- fee- markets/2410 .

V. Buterin. 2019.

EIP-1559: Fee market change for ETH 1.0 chain. (March 2019).

URL:

https://ethereum- magicians.org/t/eip- 1559- fee- market- change- for- eth- 1- 0- chain/2783 .

V. Buterin, E. Conner, R. Dudley, M. Slipper, I. Norden, and A. Bakhta. 2019. EIP-1559 Specification. (2019). URL:

https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md.

M. Carlsten, H. A. Kalodner, S. M. Weinberg, and A. Narayanan. 2016. On the Instability of Bitcoin Without the Block

Reward. In Proceedings of the ACM SIGSAC Conference on Computer and Communications Security (CCS). 154­167. URL:

https://www.cs.princeton.edu/~arvindn/publications/mining_CCS.pdf .

P. Daian, S. Goldfeder, T. Kell, Y. Li, X. Zhao, I. Bentov, L. Breidenbach, and A. Juels. 2020. Flash Boys 2.0: Frontrunning in

Decentralized Exchanges, Miner Extractable Value, and Consensus Instability. In Proceedings of the 41st IEEE Symposium

on Security and Privacy. 910­927. URL: https://arxiv.org/pdf/1904.05234.pdf.

C. Daskalakis, M. Fishelson, B. Lucier, V. Syrgkanis, and S. Velusamy. 2020. Simple, Credible, and Approximately-Optimal

Auctions. In Proceedings of the 21st ACM Conference on Economics and Computation (EC). 713.

C. Decker and R. Wattenhofer. 2013. Information propagation in the Bitcoin network. In 13th IEEE International Conference

on Peer-to-Peer Computing. URL: https://tik-db.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf.

Filecoin. 2020. Filecoin base fee variations. (November 2020). URL: https://filfox.info/en/stats/gas.

R. Lavi, O. Sattath, and A. Zohar. 2019. Redesigning Bitcoin's fee market. In Proceedings of the World Wide Web Conference

(WWW). 2950­2956. URL: https://arxiv.org/pdf/1709.08881.pdf.

B. Monnot, H. Q. Ze, K. C. S. Marcus, S. Leonardos, and G. Piliouras. 2020. Ethereum's Transaction Fee Market Reform of

EIP 1559. In Proceedings of the WINE 2020 Workshop on Blockchain.

S. Nakamoto. 2008. Bitcoin: A peer-to-peer electronic cash system. (2008). Unpublished white paper. URL:

https://bitcoin.org/bitcoin.pdf .

NEAR. 2020. The NEAR White Paper. (2020). URL: https://near.org/papers/the-official-near-white-paper/.

G. Wood. 2020. Ethereum: A Secure Decentalized Generalised Transaction Ledger (Petersburg Version). (September 2020).

URL: https://ethereum.github.io/yellowpaper/paper.pdf .

A. C.-C. Yao. 2018. An Incentive Analysis of some Bitcoin Fee Designs. (November 2018). arXiv:1811.02351. URL:

https://arxiv.org/pdf/1811.02351.pdf .

