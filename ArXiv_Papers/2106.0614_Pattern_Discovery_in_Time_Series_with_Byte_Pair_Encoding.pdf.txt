arXiv:2106.00614v1 [eess.SP] 30 May 2021

Pattern Discovery in Time Series with Byte Pair Encoding
NAZGOL TAVABI, USC Information Sciences Institute, USA KRISTINA LERMAN, USC Information Sciences Institute, USA
The growing popularity of wearable sensors has generated large quantities of temporal physiological and activity data. Ability to analyze this data offers new opportunities for real-time health monitoring and forecasting. However, temporal physiological data presents many analytic challenges: the data is noisy, contains many missing values, and each series has a different length. Most methods proposed for time series analysis and classification do not handle datasets with these characteristics nor do they offer interpretability and explainability, a critical requirement in the health domain. We propose an unsupervised method for learning representations of time series based on common patterns identified within them. The patterns are, interpretable, variable in length, and extracted using Byte Pair Encoding compression technique. In this way the method can capture both long-term and short-term dependencies present in the data. We show that this method applies to both univariate and multivariate time series and beats state-of-the-art approaches on a real world dataset collected from wearable sensors.
ACM Reference Format: Nazgol Tavabi and Kristina Lerman. 2021. Pattern Discovery in Time Series with Byte Pair Encoding. 1, 1 (June 2021), 14 pages. https://doi.org/10.1145/nnnnnnn.nnnnnnn
1 INTRODUCTION Rapid technological advances have enabled continuous collection of physiological and activity data from wearable sensors in the form of time series. Such data offers new opportunities to quantify and characterize human behavior, monitor health, and assess psychological well-being in real-time [3].
However when it comes to modeling multiple time series there are many different variants of this problem, each with its own set of challenges. These variants include time series with, different lengths, multiple modalities­ multivariate time series­, missing data, noise, etc. Because of these challenges, many methods put constraints on the input data and can be used only on a subset of problems. Data collected from wearable sensors, usually has all of the characteristics mentioned above, hence few methods can be applied to it.
Explainability and interpretability are very helpful and important properties of machine learning approaches. Having interpretable features is necessary in applications like healthcare, where doctors and physicians need to understand the reasoning behind a decision made by the model. However, most of the state-of-the-art methods lack these properties, especially methods that rely on neural networks and are mostly black box models.
In this work we propose an unsupervised, explainable and interpretable method for learning representations from time series. This method, is scalable, can handle different variants of time series datasets, has low computation complexity, and beats state-of-the-art methods on a real world dataset. Our proposed approach extracts common patterns from the data by discretizing the time series and using Byte Pair Encoding compression technique (BPE). Afterwards, series in the dataset are represented by observed frequencies of identified patterns. The identified
Authors' addresses: Nazgol Tavabi, USC Information Sciences Institute, USA, nazgolta@isi.edu; Kristina Lerman, USC Information Sciences Institute, USA, lerman@isi.edu.
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. © 2021 Association for Computing Machinery. XXXX-XXXX/2021/6-ART $15.00 https://doi.org/10.1145/nnnnnnn.nnnnnnn
, Vol. 1, No. 1, Article . Publication date: June 2021.

2 · Tavabi et al.
patterns are interpretable and can be of different lengths. Thus, the method can capture both long term and short term dependencies present in the data.
2 RELATED WORK
Many methods have been proposed for time series classification. [1] covers a wide variety of them and categorizes time series classification methods to six groups. Based on the recent advancement of neural network and deep learning methods, we see fit to add a seventh category for methods using deep learning approaches for time series classification, [8] reviews successful deep learning approaches for time series data. The seven categories are listed below.
Whole series In these algorithms a similarity measure is defined between time series. The most notable method in this group is Dynamic Time Warping (DTW) [23] with Nearest Neighbour classifier, which is still used as a baseline for many methods.
Intervals These types of algorithms extract features from intervals, instead of the whole time series. For example in a long time series, an interval can be considered a minute/hour, and simple features such as mean and standard deviation can be calculated from each interval. [6] is a recent example and [26] is one of the earliest works with this approach.
Shapelets In these methods the focus is to find short patterns, commonly called shapelets, in time series which can distinguish between different classes. In these algorithms the presence, or lack thereof the shapelet in the series is important and its location is irrelevant [5, 13]. Most shapelet algorithms enumerate identified shapelets and choose the ones that help with the classification [25, 35]. The alternative approach is to capture different shapelets in an unsupervised manner, then perform classification on the generated features [5, 13]. The latter approach can help reduce overfitting compared to the former. Also unsupervised approaches can be easily extended to regression tasks while it may not be feasible to extend a supervised classification task like [35] to a regression problem.
Dictionary based Our proposed approach fits in this group. This type can be seen as an extension of Shapelet methods. Instead of forming the decision boundaries based on presence of patterns, features generated by dictionary based methods, capture the relative frequency of observed shapelets in each series. Most of the methods in this group first discretize the series and convert them to strings of symbols, then identify the patterns. One of the most popular methods for discretizing time series is Symbolic Aggregate Approximation (SAX) [18]. In SAX, the normalized series are first transformed by Piecewise Aggregate Approximation (PAA) [16], then discretized into bins formed from equal probability areas of the normal distribution. PAA reduces the dimension of the input time series by splitting them into segments and averaging the values in these segments. In [19] after SAX transformation, signals are broken down to windows with a fixed size L which are referred to as words, and a histogram of word counts is used as features for classification similar to bag-of-words approach. [28] has a similar approach but instead of bag-of-words it uses TF-IDF (Term Frequency-Inverse Document Frequency), and instead of calculating TF-IDF for each time series, it calculates them for each class. Probably the most popular methods in this group is Bag-of-SFA-Symbols (BOSS) model [27], which similar to DTW, is used as a baseline in many recent methods. Instead of using PAA, BOSS applies Discrete Fourier Transform (DFT) on each window; then discretizes the series. Most of the methods in this group, when instances of consecutive identical words such as "aba aba" in "aba aba acc" are observed, only count the first word and ignore the remaining repeated words to avoid over counting trivial matches.
Combinations This group contains methods that combine elements or features from different approaches. Collection Of Transformation Ensembles (COTE) [2] is known as one of the most accurate methods for time series classification. COTE combines different classifiers over representations of data in different domains including
, Vol. 1, No. 1, Article . Publication date: June 2021.

Pattern Discovery in Time Series with Byte Pair Encoding · 3
time and shapelet. HIVE-COTE [20], an extension to COTE, proposes a hierarchical structure with probabilistic voting over multiple classifiers and has also proven to be very successful.
Model based In these methods, generative models are fitted to time series and the similarity between the series is measured by comparing the similarity between the models fitted to them. For example [15] measures the distance between series by comparing their ARIMA models and [30, 31] compare the non-parametric Hidden Markov Models fitted to each series.
Deep learning Although intuitively, it seems that recurrent neural networks might be better suited for time series classification [14, 21], convolutional networks are proven to be more successful in this task [36]. An important work in this group is ROCKET (RandOm Convolutional KErnel Transform) [7]. ROCKET transforms time series with a large number of random convolutional kernels, i.e., kernels with random lengths, weights, biases, etc. It has become popular for its exceptional computation speed and accurate results.
Another notable work is an unsupervised embedding approach proposed in [10]. These embeddings are generated by an encoder with causal dilated convolutional layers. If we annotate the time series in the dataset as 1 · · ·  ; the model is trained such that the embeddings of sub-series in  are closer to each other than to a sub-series in   . Both of these methods generate unsupervised representations, and are able to handle different variants of time series (variable length, multivariate, etc). They are also among the best and most recent methods proposed for time series classification. We compare the results of our approach with these two methods.
It should be mentioned that although time series classification has gained more attention, there are also many time series regression problems such as affect estimation from wearable sensors [34], analysis of fMRI signals [9], and many more examples. Many of the methods described above, such as methods in the Combinations category, can't be extended for a regression problem. Also, most methods in Deep Learning category are not interpretable nor explainable. Dictionary Based methods are known for being interpretable, but in most cases the identified patterns have the same length. There are a few methods in motif discovery for identifying patterns with variable length [32]. However, since these methods were proposed for identifying the best set of motifs, they can't be easily compared with dictionary based methods. Motif discovery methods are mostly evaluated based on their scalability, robustness to noise, exactness, and other related characteristics and are not necessarily targeted for classification/regression tasks.
As previously mentioned, a standard practice in dictionary based methods is that, when instances of consecutive identical words are observed, the first word is counted and the remaining repeated words are ignored. However, we argue that removing data, even redundant data, can lead to information loss. In this approach, time series data is first transformed into different variations: in one variation the repeated words are kept, in another variation they are reduced to a compact version but not completely removed, and etc. These variations are described in detail in section 3.4. Patterns are extracted from each variation separately using Byte Pair Encoding compression technique. Afterwards, patterns identified from different variations are aggregated and redundant patterns are removed. Each time series is represented by the frequency of these patterns. This pipeline is proposed to keep as much information as possible in the time series representations.
3 METHOD Figure 1 shows an overview of our proposed method. Data is 1. transformed with PAA, 2. discretized, 3. transformed to multiple variations 4. Patterns are extracted from each variation. 5. Features generated from different variations are combined and post-processed to output the final representation. In the following sections each one of those steps are described in detail. We first explain the method for univariate time series, then describe how it can be extended for multivariate series.
, Vol. 1, No. 1, Article . Publication date: June 2021.

4 · Tavabi et al.
Fig. 1. Overview of the method. Data is 1.transformed with PAA, 2. discretized, 3. transformed to multiple variations 4. Patterns are extracted from each variation. 5. Features generated from different variations are combined and post-processed to output the final representation.
3.1 PAA transformation Each time series is first normalized, i.e. zero mean and standard deviation of one. The same normalization step is also applied in the original SAX paper [18], as it it shown in [17] that time series with different offsets and amplitudes can't be correctly compared with each other.
The normalized time series are then transformed using PAA. PAA reduces the dimension of the time series by splitting them into segments of length  -a hyperparameter of the method- and averaging the values in these segments. Since PAA smooths the series, it also helps mitigate the effects of noise and outliers in the data. In the left plots of Figure 2, the blue lines (also shown on the right plots) are the PAA-transformed versions of the orange colored time series. 3.2 Discretization For discretization, first outliers are detected using Inter Quartile Range (IQR) [33]. After setting the outliers aside, values are binned (discretized) by equal-width bins. Both outlier detection and the binning are based on the entire dataset, as opposed to each time series independently. Binning the values based on the entire data helps better capture the differences between series. For example if the data is coming from two participants with different levels of physical activity, the discretized data should reflect that (In this case the less active participant will not observe a subset of the symbols that correspond to high levels of activity).
Examples of this discretization in shown in the right plots of Figure 2. The PAA-transformed blue series are discretized to 4 bins: A, B, C, and D; each bin/symbol is shown by a different color. The number of bins used for discretization,  is another hyper-parameter of the method. Symbol A is only observed in the first time series. 3.3 Identifying Patterns We first describe how patterns are extracted from the series, "Find Pattern" block in Figure 1, then discuss its previous step "Handling Consecutive Identical Symbols" which addresses how the discretized series are first transformed to different variations before pattern extraction.
, Vol. 1, No. 1, Article . Publication date: June 2021.

Pattern Discovery in Time Series with Byte Pair Encoding · 5
Fig. 2. Example of time series discretization: The series are first transformed with PAA (on the left), then they are discretized based on equal-width bins (on the right). The discretized version of the first series in this plot is: 'A B C D D C B B B B'. It should be mentioned that PAA actually reduces the length of the series, but here they are plotted the same length with the original signal to show the effect of the transformation.
Fig. 3. Example of BPE on discretized time series: The first line shows the original discretized series. In each iteration the most common pair, is identified and replaced by a new symbol.
To identify variable length patterns in time series, we use the Byte Pair Encoding (BPE) compression technique [11]. BPE has been around for a long time, however since it was used in [29] it received much more recognition. BPE is a compression technique in which the most common pair of consecutive symbols is replaced by a new symbol. In [29] it was used to address the rare words problem in neural machine translation by subword tokenization. Traditionally, words were considered as tokens in text. With subword tokenization characters are initially considered as tokens and with each iteration two most common tokens are merged together to build a new token. In this way compound words like "authorship" could be understood by the model without having observed it beforehand and by breaking it into subwords "author-" and "-ship". We use the same approach in identifying patterns in time series. To the best of our knowledge this technique has not yet been used in context of time series. An example of BPE on discretized series is shown in Figure 3. In each iteration, the most common pair
, Vol. 1, No. 1, Article . Publication date: June 2021.

6 · Tavabi et al.
over all time series in the train set is identified as a new pattern and replaced by a new symbol. For example in Figure 3, in the first iteration, pair B A is identified as a new pattern and is replaced by a new introduced symbol E. The time series shown in the example observes two instances of this pattern, hence, in its representation, the feature corresponding to pattern E has the value 2. This value is later normalized by the length of the series, so that representations of series with different lengths can be compared together. With this approach, dimensions of the representation would be number of discretization bins () + number of identified patterns. For example in Figure 3, the series are discretized to 4 symbols (A, B, C, and D), and 6 new patterns are identified (E, F, G, H, I and J), hence the number of features in this representation is 10. However, this is not always the case. Not all identified patterns are added as new features. They should be present in at least  × , 0 <  < 1, where  is the number of series in the dataset, since having sparse features is not beneficial and can lead to overfitting. This constraint also serves as a stopping criteria for finding new patterns. If the overall frequency of the most common pair,  , is less than MAX( × , ×  ), the loop for finding new patterns is stopped.  is the number of all pairs in the data in the very first iteration and 0 <  < 1. In our experiments, we fix  as 20%, and  as 0.001. We arrived at these numbers empirically based on our experiments on multiple different datasets, although they can also be tuned as extra hyper-parameters. As an example, if data consist of 100 time series with equal lengths of 500, then  = 100,  = 49900, and identified patterns must be present in more than 20 time series. The cycle for finding new patterns stops when  becomes less than Max(20, 49.9) = 49.9. Criteria  <  ×  is usually reached in cases where there is a large number of datapoints (time series) in the dataset and criteria  <  ×  is usually reached when the time series are long.
3.4 Handling Consecutive Identical Symbols
When time series are discretized, multiple instances of consecutive identical symbols might be present in the data, for example in the first series in Figure 2 "A B C D D C B B B B"; "D D" and "B B B B" are instances of consecutive identical symbols. As mentioned in the related works section, most similar methods remove consecutive identical patterns and only keep the first one to avoid over counting trivial matches. However, there might be useful information in the number of times symbols are repeated. If we avoid removing consecutive identical symbols, we can extract patterns that capture this useful information, although the method might not be able to extract many other potentially important patterns that become visible only when the repeated symbols are removed. For this reason, the series are first transformed to different variations, described below, and patterns are identified from all those variations separately. Afterwards, the identified patterns from different variations are combined together. This is also shown in Figure 1.
By using the example in Figure 1, if the original series is "1 1 2 2 2 0 0 0 4", in the variation RCS (Reduce Constant Sub-series) all repeated symbols are removed and the series is transformed to "1 2 0 4". Removing all repeated symbols can reduce the time series significantly, RCSM (Reduce Constant Sub-series (median)) offers a different variation which doesn't reduce the time series as much. In this variation, the median length of constant sub-series is retrieved for all  initial patterns. For a given constant sub-series of pattern i ( ), if the length of  is less than median length of all  , then it's replaced by "i", otherwise it's replaced by "i i". Based on this variation the example in Figure 1 is transformed to "1 2 2 0 0 4", given that median length for each symbol is 2.
In discretized data, the assumption is that values in different bins have the same distance from each other, however the bins used here are ordered, e.g. in Figure 2 bin A is closer to bin B than to bin C. In order to keep this information which is in other words the slope of the time series, the Autoregressive variation is used. By marking the bins as 0 · · ·  - 1, this variation is calculated as follows: ,  =  --1. Going back to the example in Figure 1, based on this variation the series is transformed to "0 1 0 0 -2 0 0 4" (-2 is considered one symbol/pattern).
Consider an example of activity data collected from wearable sensors and one pattern (pattern A) that captures exercise activity. Feature corresponding to pattern A, in the original series shows how much time overall each
, Vol. 1, No. 1, Article . Publication date: June 2021.

Pattern Discovery in Time Series with Byte Pair Encoding · 7

participant exercised during the study period, in the RCS variation shows how many times each participant exercised, the RCSM variation shows whether a participant had a short workout or a long one compared to all other exercise instances in the dataset, and in the Autoregressive variation shows the level of the exercise compared to the activity done before.

3.5 Post Processing
Patterns are extracted from each one of the variations described in the previous section separately. Afterwards, all the identified patterns from different variations are combined together. Some patterns might exist in more than one variation, in order to avoid having redundant features corresponding to a single pattern, highly correlated features, with more than 0.95 correlation, are removed. Features with 0 variance are also removed because they do not contain useful information in representing the series.

3.6 Extension to Multivariate Series

This process can also be extended to multivariate time series. We use the approach SAX-ZSCORE proposed in [22], to extend this method.
The first step discussed in Section 3.1 for extracting patterns is normalizing the series. In the case of multivariate series, an extended multidimensional version of the zscore normalization is used. Assuming that the covariance matrix of the multivariate time series , is  and its multi-dimensional mean is , the normalized time series is:

^ = -1/2 ( - ).

(1)

Where -1/2 is the inverse of Cholesky decomposition. Afterwards, 2 norm of ^ is calculated which outputs a one dimensional series. These one dimensional time series are then fed into the method the same way as before and patterns are extracted from them.

3.7 Classification/Regression
Since the representations are unsupervised, any classifier/regressor can be used for the down-stream task. In our experiments, Support Vector Machine (SVM) with RBF kernel generally performed better than other methods. This method has two main hyper-parameters,  and .  is the regularization parameter and  is the kernel coefficient.

3.8 Hyper-parameter Tuning
For optimizing hyper-parameters, Hyperopt is used [4]. Hyperopt is a Python library with Bayesian optimization for parameter tuning. It uses the results of past evaluations to learn a probabilistic model for the objective function, and chooses the next set of values for hyper-parameters based on the learned model. Our proposed approach contains four parameters that are tuned using Hyperopt. These parameters are listed below:
· : Number of bins in discretization, 2    100 ·  : Window size in PAA transformation, 1    15 ·  & : SVM parameters

4 DATA
The data used in this paper comes from a real-world study called TILES (Tracking Individual Performance with Sensors) [24] which studies the relationship between physical activity and physiological states. The data was collected during a 10-week long study that recruited 212 hospital workers. Participants' bio-behavioral data was captured via different wearable devices during the study. In this paper we focus on data collected from Fitbit wristbands. The Fitbit wristband captures heart rate and step count. For this work, the data was pre-processed

, Vol. 1, No. 1, Article . Publication date: June 2021.

8 · Tavabi et al.

Construct

Abbreviation

Counterproductive Work Behavior (ID)

IOD-ID

Counterproductive Work Behavior (OD)

IOD-OD

Organizational Citizenship Behavior

OCB

Cognitive ability (Shipley Abstraction)

Ship-Abs

Cognitive ability (Shipley Vocabulary)

Ship-Voc

State Trait Anxiety Inventory

STAI

Alcohol Use Disorders Identification Test

AUDIT

Tobacco units used in past week

Gats-Quant

International Physical Activity Questionnaire IPAQ

Pittsburgh Sleep Quality Index

PSQI

Counterproductive Work Behavior

CWB

Table 1. Remaining IGTB & MGT constructs not discussed in text.

and averaged to 5 minute intervals. This yields heart rate and step count time series of length 288 (24 hours/ 5 minutes) for each day.
The studies also administered surveys to collect self-assessments of individual participant's stress, sleep, job performance, organizational behavior, and other personality constructs. The goal is to use time series collected from fitbit to estimate these constructs, meaning the constructs are used as targets for time series classification/regression problems. The labels are considered in two groups: pre-study surveys and daily surveys. Before the start of the study, participants were asked to fill out surveys which assessed their job performance, cognitive ability, and health. We call these constructs IGTB (Initial Ground Truth Battery). For IGTB constructs, there is one label per participant. Participants also answered daily surveys, hereafter called MGT (Mobile ground truth). For MGT constructs there is one label per day for each participant. A subset of these constructs are described below.
Big 5 personality traits [12] is among the most commonly used models of personality in psychology. It consists of 5 categories: Openness (OPE), Conscientiousness (CON), Extraversion (EXT), Agreeableness (AGR), and Neuroticism (NEU). A big 5 personality test assigns a number to each one of these 5 categories based on the answered questions. Each category represents a range between two extremes, for example extreme extraversion and extreme introversion. This test is taken from participants in both pre-study surveys and daily surveys, therefore these 5 labels are in both IGTB and MGT constructs. Constructs also include self-assessments of job performance (Individual Task Proficiency(ITP) and In-Role Behaviors(IRB)), alcohol and tobacco use, sleep quality, stress, anxiety, positive and negative affect (Pos/Neg-Affect), etc.
Most of the constructs have numerical values and are treated as regression problems, however there are a couple of categorical constructs in MGT, Atypical, Work, Location, Activity, and Interaction. In Atypical, participants report if they had experienced, or anticipate experiencing an atypical event; Work: whether that day was a work-day; Location: the location where participants spent most of the day in, and etc. These constructs are treated as classification problems.
Other IGTB and MGT constructs not discussed in text, are listed in Table 1. For more information on the constructs and their survey references please refer to the original paper [24].
Since participants have different compliance rates in wearing the sensors, different amount of data is collected from them, i.e. each participant wears the sensor for different number of days and different number of hours in each day. For the MGT labels, the length of each data-point, time series corresponding to one day, is kept fixed to
, Vol. 1, No. 1, Article . Publication date: June 2021.

Pattern Discovery in Time Series with Byte Pair Encoding · 9
288 time steps and the missing data is filled with 0. The days where the collected data overall was less that 6 hours (72 data points) were removed from the dataset. For IGTB constructs each data point corresponds to all data collected from one participant over the study period, which consists of different number of days. For these constructs, data points (corresponding to participants) with less than 7 days worth of data were removed. Data from both IGTB and MGT constructs have noise and missing values, IGTB labels have time series with variable length (different number of days), while in MGT, time series all have the same length.
In daily surveys, MGT, most of the times participants don't answer all of the questions, therefore, for each MGT construct there are different number of answers (labels). In general there are 12391 number of days collected from 205 participants in the dataset. Number of labels for different constructs ranges between 725 and 10220, with average of 5374 data-points. For IGTB constructs, overall there are 206 participants with more than 6 days worth of data. Number of data-points for different IGTB constructs ranges between 198 and 206 with average number of 205. In IGTB dataset number of days -length of the time series- ranges between 7 and 85 with 61 average number of days for each participant.
5 RESULTS As described in Section 4, Fitbit wristbands collect steps and heart-rates of participants. In order to estimate IGTB/MGT constructs from this data, patterns are extracted from each modality separately (heart rate and steps), and the resulting representations are concatenated together. Table 2 shows the results of our proposed method Pattern Discovery with Byte Pair Encoding (PD-BPE), time series embedding proposed in [10] shown here as TS-Embed, and Rocket [7], for IGTB constructs. For both TS-Embed and Rocket the implementation and hyper-parameters suggested by their corresponding authors were used. The results are reported in RMSE (Root Mean Squared Error) and the #Patterns column shows the number of patterns identified in the dataset by PD-BPE from both heart rate and step count series. The results are based on 5-fold cross validation and hyper-parameter optimization is done using nested cross-validation. The same folds were used in all three models. The best performing model's results are highlighted in bold. Based on the results in Table 2, PD-BPE outperforms other methods in 12 out of 19 IGTB constructs.
In MGT constructs, multiple data points belong to the same participant. Here the same approach as [6] is used to control for subject-specific differences in behavior. For each participant, average of their representations across different days in computed, the centroid representation of that participant. Afterwards, representations learned for each day is combined (concatenated) with centroid representation of that individual . Table 3 shows the results for numerical MGT constructs. For all three methods, daily representations are concatenated with participants' centroid representation. Based on the results in Table 3 PD-BPE outperforms other methods in 15 out of 17 MGT constructs. Table 4 shows the results for categorical MGT constructs. The results are reported in accuracy, except for Atypical construct which is reported in AUC-ROC (Area Under the Receiver Operating Characteristic Curve) because of its imbalance. 91% of the datapoints in Atypical construct are 0 (typical). Based on the results in Table 4 PD-BPE outperforms other methods in 2 out of 5 MGT constructs.
Heart rate and step count time series can be considered together as a multivariate time series. With the extension described in Section 3.6, patterns are extracted in multivariate setting and results for a subset of MGT constructs are reported in Table 5. It is shown that PD-BPE outperforms competing methods in 5 out of 5 MGT constructs.
Based on the results reported in Tables 2, 3, PD-BPE outperforms both methods in regression problems. This improvement is kept intact when extending to multivariate time series (Table 5). However, in categorical constructs Rocket outperforms PD-BPE in 3 out of 5 constructs (Table 4).
, Vol. 1, No. 1, Article . Publication date: June 2021.

10 · Tavabi et al.

IGTB PD-BPE #Patterns TS-Embed Rocket

ITP

0.530 624

0.531 0.527

IRB

4.417 536

4.472 4.395

IOD-ID 4.986 623 IOD-OD 6.695 523

5.251 6.916

5.114 6.738

OCB

12.250 640

Ship-Abs 3.929 491

12.291 12.237 3.934 3.920

Ship-Voc 4.790 421

NEU

0.710 639

5.017 0.730

5.102 0.724

CON

0.603 623

0.629 0.622

EXT

0.648 511

0.643 0.642

AGR

0.480 628

0.485 0.485

OPE

0.569 637

Pos-Affect 6.628 735

0.575 6.670

0.584 6.671

Neg-Affect 5.187 486

STAI

8.813 662

5.437 8.912

5.281 8.802

AUDIT 2.278 529 Gats-Quant 3.977 490

2.301 4.040

2.309 4.247

IPAQ

17117 311

17133 16096

PSQI

2.359 730

2.374 2.384

Table 2. Results for numerical IGTB constructs, reported in RMSE

5.1 Computation Speed
Although it's worth noting that PD-BPE generates interpretable and far fewer features than Rocket. Number of PD-BPE features for MGT constructs are twice the #Patterns column, because of combining the participant representations with daily representations. Based on constructs of all three tables 2, 3 and 4, PD-BPE has an average of 737 features with standard deviation of 283. Whereas number of Rocket and TS-Embed features are 80000 and 5120 respectively. The proposed number of dimensions for Rocket and TS-Embed representations are 20000 and 1280 respectively, here because of combing representation of heart rate and step count along with daily and participant representations, these numbers are multiplied by 4.
The dimension of feature space also reflects in the speed of computations. On a cluster with Intel Xeon E5-2650 v4 CPUs; Rocket, known for its fast speed, takes 336 seconds to generate and apply kernels to the MGT dataset and 137 seconds on average to train linear classifiers (10 fold) on categorical constructs. On the same machine, PD-BPE takes 32 seconds and 145 seconds to extract patterns and fit non-linear classifiers respectively. TS-Embed trains the whole neural network and it's computation speed is not comparable with Rocket and PD-BPE.
5.2 interpretability
Since PD-BPE is interpretable, it can offer a better understanding of both the problem and the representations generated. As an example we look at the patterns identified for Atypical construct. Based on F-values from ANOVA test, the most important features for identifying atypical days, correspond to patterns that capture long inactivity intervals. For example one of the most important patterns is a 5 hour long pattern, extracted from the Autoregressive variation of step count modality, in which the step count remains almost constant. Further analysis shows that this pattern is usually observed during the night, which means it is probably capturing sleep
, Vol. 1, No. 1, Article . Publication date: June 2021.

Pattern Discovery in Time Series with Byte Pair Encoding · 11

MGT PD-BPE #Patterns TS-Embed Rocket

ITP

0.562 475

IRB

5.156 375

OCB

0.813 511

CWB

1.202 574

NEU

0.865 558

CON

0.689 374

EXT

0.790 550

AGR

0.737 484

OPE

0.732 409

Pos-Affect 3.466 599

Neg-Affect 2.133 378

Anxiety 0.687 408

Stress

0.830 296

Alcohol 1.200 259

Tobacco 0.564 689

Exercise 632.2 311

Sleep

1.750 236

0.654 5.998 0.875 1.388 1.022 0.780 0.929 0.877 0.858 4.322 2.370 0.735 0.895 1.233 0.880 659.8 1.789

0.606 5.665 0.847 1.298 0.988 0.765 0.893 0.807 0.828 3.555 2.167 0.691 0.835 1.219 0.605 497.2 1.737

Table 3. Results for numerical MGT constructs, reported in RMSE

time. The frequency of observing this pattern is much higher in typical vs atypical days, forming the hypothesis that participants experiencing atypical days, are most likely to lose sleep and capturing sleep time of participants can help identify atypical days. Figure 4 shows a sample of an atypical event. The most important patterns, in different modalities and variations, are highlighted in red.
6 CONCLUSION In this work, an interpretable and scalable method for learning representations from time series is proposed. This method extracts variable length patterns from data by discretizing the time series and using BPE compression technique. Using data collected from wearable sensors, it was shown that for regression tasks, the proposed approach beats state-of-the-art methods and for classification tasks, it gives comparable results.
Although this method was proposed for dealing with unclean and noisy datasets -such as data collected from wearable sensors- it could also be applied to any other time series dataset. One possible future work direction is to evaluate results of PD-BPE method on cleaner and more structured datasets. Also this method could be modified to perform better for classification problems for example by identifying patterns in a supervised manner. Another possible direction for improving the method further is to use Discrete Fourier Transform on windows instead of PAA, similar to BOSS method [27]. Using DFT will decrease the interpretability of the method to some degree but will most likely improve the performance, as it has been shown in [27].
7 ACKNOWLEDGEMENTS The research was supported by the Office of the Director of National Intelligence (ODNI), Intelligence Advanced Research Projects Activity (IARPA), via IARPA Contract No 2017-17042800005.
, Vol. 1, No. 1, Article . Publication date: June 2021.

12 · Tavabi et al.
, Vol. 1, No. 1, Article . Publication date: June 2021. Fig. 4. A sample datapoint for Atypical event construct. Top left plots show the original heart rate and step count. Top right plots show the PAA transformed data with window size  = 8. In middle left, the data is discretized into  = 10 bins. Middle right shows the RCS variation. Bottom left is the RCS Median variation. And finally bottom right is the autoregressive variation. 10 most important patterns for classifying Atypical events, based on F-values from ANOVA test, are highlighted in red.

Pattern Discovery in Time Series with Byte Pair Encoding · 13

MGT PD-BPE #Patterns TS-Embed Rocket

Atypical 0.774 460

Work

0.831 183

0.673 0.869

0.746 0.888

Location 0.611 305 Activity 0.401 399

0.610 0.385

0.621 0.403

Interaction 0.603 855

0.576 0.598

Table 4. Results for categorical MGT constructs, reported in accuracy except for Atypical construct, which is reported in AUC ROC

MGT PD-BPE #Patterns TS-Embed Rocket

ITP 0.567 365 IRB 5.220 375

0.649 5.908

0.592 5.543

OCB 0.796 289

0.881 0.835

CWB 1.204 360 NEU 0.861 314

1.389 1.021

1.280 0.909

Table 5. Results for a subset of numerical MGT constructs with multivariate data, reported in RMSE.

REFERENCES
[1] Anthony Bagnall, Jason Lines, Aaron Bostrom, James Large, and Eamonn Keogh. 2017. The great time series classification bake off: a review and experimental evaluation of recent algorithmic advances. Data Mining and Knowledge Discovery 31, 3 (2017), 606­660.
[2] Anthony Bagnall, Jason Lines, Jon Hills, and Aaron Bostrom. 2015. Time-series classification with COTE: the collective of transformationbased ensembles. IEEE Transactions on Knowledge and Data Engineering 27, 9 (2015), 2522­2535.
[3] Hadi Banaee, Mobyen Uddin Ahmed, and Amy Loutfi. 2013. Data mining for wearable sensors in health monitoring systems: a review of recent trends and challenges. Sensors 13, 12 (2013), 17472­17500.
[4] James Bergstra, Daniel Yamins, and David Cox. 2013. Making a science of model search: Hyperparameter optimization in hundreds of dimensions for vision architectures. In International conference on machine learning. PMLR, 115­123.
[5] Aaron Bostrom and Anthony Bagnall. 2015. Binary shapelet transform for multiclass time series classification. In International conference on big data analytics and knowledge discovery. Springer, 257­269.
[6] Keith Burghardt, Nazgol Tavabi, Emilio Ferrara, Shrikanth Narayanan, and Kristina Lerman. 2020. Having a Bad Day? Detecting the Impact of Atypical Life Events Using Wearable Sensors. arXiv preprint arXiv:2008.01723 (2020).
[7] Angus Dempster, François Petitjean, and Geoffrey I Webb. 2019. ROCKET: Exceptionally fast and accurate time series classification using random convolutional kernels. arXiv preprint arXiv:1910.13051 (2019).
[8] Hassan Ismail Fawaz, Germain Forestier, Jonathan Weber, Lhassane Idoumghar, and Pierre-Alain Muller. 2019. Deep learning for time series classification: a review. Data Mining and Knowledge Discovery 33, 4 (2019), 917­963.
[9] Elia Formisano, Federico De Martino, and Giancarlo Valente. 2008. Multivariate analysis of fMRI time series: classification and regression of brain responses using machine learning. Magnetic resonance imaging 26, 7 (2008), 921­934.
[10] Jean-Yves Franceschi, Aymeric Dieuleveut, and Martin Jaggi. 2019. Unsupervised scalable representation learning for multivariate time series. In Advances in Neural Information Processing Systems. 4650­4661.
[11] Philip Gage. 1994. A new algorithm for data compression. C Users Journal 12, 2 (1994), 23­38. [12] Lewis R Goldberg. 1992. The development of markers for the Big-Five factor structure. Psychological assessment 4, 1 (1992), 26. [13] Jon Hills, Jason Lines, Edgaras Baranauskas, James Mapp, and Anthony Bagnall. 2014. Classification of time series by shapelet
transformation. Data Mining and Knowledge Discovery 28, 4 (2014), 851­881. [14] Michael Hüsken and Peter Stagge. 2003. Recurrent neural networks for time series classification. Neurocomputing 50 (2003), 223­235. [15] Konstantinos Kalpakis, Dhiral Gada, and Vasundhara Puttagunta. 2001. Distance measures for effective clustering of ARIMA time-series.
In Proceedings 2001 IEEE international conference on data mining. IEEE, 273­280.
, Vol. 1, No. 1, Article . Publication date: June 2021.

14 · Tavabi et al.
[16] Eamonn Keogh, Kaushik Chakrabarti, Michael Pazzani, and Sharad Mehrotra. 2001. Dimensionality reduction for fast similarity search in large time series databases. Knowledge and information Systems 3, 3 (2001), 263­286.
[17] Eamonn Keogh and Shruti Kasetty. 2003. On the need for time series data mining benchmarks: a survey and empirical demonstration. Data Mining and knowledge discovery 7, 4 (2003), 349­371.
[18] Jessica Lin, Eamonn Keogh, Li Wei, and Stefano Lonardi. 2007. Experiencing SAX: a novel symbolic representation of time series. Data Mining and knowledge discovery 15, 2 (2007), 107­144.
[19] Jessica Lin, Rohan Khade, and Yuan Li. 2012. Rotation-invariant similarity in time series using bag-of-patterns representation. Journal of Intelligent Information Systems 39, 2 (2012), 287­315.
[20] Jason Lines, Sarah Taylor, and Anthony Bagnall. 2018. Time series classification with HIVE-COTE: The hierarchical vote collective of transformation-based ensembles. ACM Transactions on Knowledge Discovery from Data 12, 5 (2018).
[21] Pankaj Malhotra, Vishnu TV, Lovekesh Vig, Puneet Agarwal, and Gautam Shroff. 2017. TimeNet: Pre-trained deep recurrent neural network for time series classification. arXiv preprint arXiv:1706.08838 (2017).
[22] Yasser Mohammad and Toyoaki Nishida. 2014. Robust learning from demonstrations using multidimensional SAX. In 2014 14th International Conference on Control, Automation and Systems (ICCAS 2014). IEEE, 64­71.
[23] Meinard Müller. 2007. Dynamic time warping. Information retrieval for music and motion (2007), 69­84. [24] Karel Mundnich, Brandon M Booth, Michelle l'Hommedieu, Tiantian Feng, Benjamin Girault, Justin L'Hommedieu, Mackenzie Wildman,
Sophia Skaaden, Amrutha Nadarajan, Jennifer L Villatte, et al. 2020. TILES-2018: A longitudinal physiologic and behavioral data set of hospital workers. arXiv preprint arXiv:2003.08474 (2020). [25] Thanawin Rakthanmanon and Eamonn Keogh. 2013. Fast shapelets: A scalable algorithm for discovering time series shapelets. In proceedings of the 2013 SIAM International Conference on Data Mining. SIAM, 668­676. [26] Juan José Rodríguez and Carlos J Alonso. 2004. Support vector machines of interval-based features for time series classification. In International Conference on Innovative Techniques and Applications of Artificial Intelligence. Springer, 244­257. [27] Patrick Schäfer. 2015. The BOSS is concerned with time series classification in the presence of noise. Data Mining and Knowledge Discovery 29, 6 (2015), 1505­1530. [28] Pavel Senin and Sergey Malinchik. 2013. Sax-vsm: Interpretable time series classification using sax and vector space model. In 2013 IEEE 13th international conference on data mining. IEEE, 1175­1180. [29] Rico Sennrich, Barry Haddow, and Alexandra Birch. 2015. Neural machine translation of rare words with subword units. arXiv preprint arXiv:1508.07909 (2015). [30] Nazgol Tavabi, Nathan Bartley, Andrés Abeliuk, Sandeep Soni, Emilio Ferrara, and Kristina Lerman. 2019. Characterizing activity on the deep and dark web. In Companion Proceedings of The 2019 World Wide Web Conference. 206­213. [31] Nazgol Tavabi, Homa Hosseinmardi, Jennifer L Villatte, Andrés Abeliuk, Shrikanth Narayanan, Emilio Ferrara, and Kristina Lerman. 2020. Learning Behavioral Representations from Wearable Sensors. In International Conference on Social Computing, Behavioral-Cultural Modeling and Prediction and Behavior Representation in Modeling and Simulation. Springer, 245­254. [32] Sahar Torkamani and Volker Lohweg. 2017. Survey on time series motif discovery. Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 7, 2 (2017), e1199. [33] Steven Walfish. 2006. A review of statistical outlier methods. Pharmaceutical technology 30, 11 (2006), 82. [34] Shen Yan, Homa Hosseinmardi, Hsien-Te Kao, Shrikanth Narayanan, Kristina Lerman, and Emilio Ferrara. 2020. Affect Estimation with Wearable Sensors. Journal of Healthcare Informatics Research (2020), 1­34. [35] Lexiang Ye and Eamonn Keogh. 2011. Time series shapelets: a novel technique that allows accurate, interpretable and fast classification. Data mining and knowledge discovery 22, 1-2 (2011), 149­182. [36] Bendong Zhao, Huanzhang Lu, Shangfeng Chen, Junliang Liu, and Dongya Wu. 2017. Convolutional neural networks for time series classification. Journal of Systems Engineering and Electronics 28, 1 (2017), 162­169.
, Vol. 1, No. 1, Article . Publication date: June 2021.

