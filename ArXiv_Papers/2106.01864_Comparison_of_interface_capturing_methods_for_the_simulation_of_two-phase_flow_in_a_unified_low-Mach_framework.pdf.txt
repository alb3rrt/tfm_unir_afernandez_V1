arXiv:2106.01864v1 [physics.comp-ph] 31 May 2021

Comparison of interface capturing methods for the simulation of two-phase flow in a unified low-Mach
framework
Victor Bonioua,, Thomas Schmitta, Aymeric Vie´a,b
aLaboratoire EM2C UPR 288, CNRS, CentraleSupe´lec, Universite´ Paris-Saclay, 3, rue Joliot-Curie 91192 Gif-sur-Yvette cedex France
bFe´de´ration de Mathe´matiques de CentraleSupe´lec, CNRS, 3, rue Joliot-Curie 91192 Gif-sur-Yvette cedex France

Abstract
This paper proposes a comparison of four popular interface capturing methods : the volume of fluid (VOF), the standard level set (SLS), the accurate conservative level set (ACLS) and the coupled level set and volume of fluid (CLSVOF). All methods are embedded into a unified low-Mach framework based on a Cartesian-grid finite-volume discretization. This framework includes a sharp transport of the interface, a wellbalanced surface tension discretization and a consistent mass and momentum transport which allows capillary-driven simulations with high density ratio. The comparison relies on shared metrics for geometrical accuracy, mass and momentum conservation which exposes the weakness and strengths of each method. Finally, the versatility and capabilities of the proposed solver are demonstrated on the simulation of a 3D head-on collision of two water droplets. Overall, all methods manage to retrieve reasonable results for all test cases presented. VOF, CLSVOF and ACLS tend to artificially create little structures while SLS suffers from conservation issues in the mesh resolution limit. This study leads us to the conclusion that CLSVOF is the most promising method for two-phase flow simulations in our specific framework because of its inherent conservation properties and topology accuracy.
Keywords: Volume-of-fluid, Level-set, Conservative level-set, Coupled Level-Set Volume-of-Fluid, Incompressible flows, Cartesian grids

1. Introduction
The numerical description of the interface between two non-miscible fluids has been widely investigated in the last decades and several approaches were developed in order to capture it accurately. For the simulation of incompressible two-phase flows with a sharp interface representation, several techniques can be found in the literature:
Corresponding author Email address: victor.boniou@centralesupelec.fr (Victor Boniou )

Preprint submitted to Journal of Computational Physics

June 4, 2021

· Front tracking (FT) [1]: FT methods explicitly transport Lagrangian markers all belonging to the interface. This allows to be highly accurate in the interface topology description such as interface normal and curvature but it requires special treatments in cases of coalescence or atomization which are non-trivial [2][3].
· Volume-of-Fluid (VOF) [4]: VOF methods are based on the resolution of the volume fraction of one phase in each numerical cell. This method has the advantage of being intrinsically mass-conserving. However, the interface is not explicitly known and must be retrieved through a reconstruction strategy, such as the PLIC method [5]. Moreover, topology information requires a dedicated attention, as differentiating the sharp volume fraction field can lead to huge errors.
· Level set (LS) [6]: instead of solving for the volume fraction, such methods solve an implicit field that characterizes the distance to the interface. This field is chosen to be smoother than the volume fraction, thus being easier to solve numerically, and giving access to a better topology information. However, attention must be drawn on conservation properties.
FT methods will not be investigated in this work, as it is a totally different way of handling the interface transport both in the formulation and in the implementation. In addition to the interface capturing, two-phase flow simulations are also very challenging because of the interface discontinuities which have to be treated carefully. In the literature, a large variety of methods is available to deal with the associated numerical issues [7, 8, 9, 10, 11, 12, 13, 14]. However they are usually adapted to one particular interface capturing method and comparison to existing strategies are not systematically provided. Detailed comparisons have been performed in the last decades, but they are still limited to a particular interface capturing method [15, 16, 17] or to a specific test case such as spurious currents [18] or rising bubbles [19]. Moreover, as the field of interface capturing methods is highly active, updating comparisons studies is required to take advantage of the recent advances. Finally, conclusions are sometimes only provided to 2D simulations [20, 18, 19]. This is a serious limitation when dealing with geometrical properties as the extension to 3D is not always straightforward . Our work is thus motivated by this observation and aims to provide a complete study of up-todate methods in both 2D and 3D configurations. Here, attention is drawn to four popular Eulerian representations of the interface : VOF with a PLIC reconstruction [5], standard LS (SLS) [21], accurate conservative LS (ACLS) [22] and coupled LS-VOF (CLSVOF) [23]. The test cases are chosen to demonstrate interface transport and surface tension modelling accuracy along with mass and momentum conservation of these methods both in 2D and 3D. To avoid potential misleading conclusions due to solver differences, they are adapted to a same unified framework with the following specifications: a sharp transport of the interface, a well-balanced description of the surface tension and a consistent mass and momentum transport. The reader must keep in mind that the study is performed in a finite volume Cartesian-grid discretization and the underlying conclusions are limited to the present framework. For instance, the difficulties raised by the use of unstructured meshes
2

would possibly change our conclusions, especially because geometrical-splitted VOF would not be applicable. The paper is organized as follows: Section 2 gives an overview of the four interface capturing method considered in this work. Section 3 presents the general two-phase solver and a detailed discussion on curvature computation is presented in Section 4. Section 5 presents the results. First, a validation of the interface capturing methods on various test cases including interface transport on imposed velocity field. Then momentum conservation is investigated with high density ratio followed by test cases dedicated to the surface tension modelling. Finally solver performances are demonstrated on a 3D head-on droplet collision and a 2D shear liquid flow. The paper ends with conclusions and perspectives.

2. Interface capturing

In this section, a review of the interface capturing methods is presented followed by the description of the up-to-date versions implemented in our solver.
The Eulerian representation of the interface relies on an indicator function 

(x) =

0 if x  g 1 if x  l

(1)

where g is the gas domain, l is the liquid domain and x is the spatial coordinate. Its evolution is given by

D 

Dt = t + u ·  = 0

(2)

where u the interface velocity vector and t the time. To solve this last equation numerically,  needs a discrete representation. The VOF
method intends to solve Eq. (2) on the computational mesh by introducing the volume fraction of liquid f [24] which is the volume average of 

f = C (x)dx

(3)

VC

here C is a computational cell of volume VC. The function f is still very sharp and challenging to solve numerically as its gradi-
ent is only defined in a 3-cell region around the interface. As a circumvent, LS class methods solve a regular implicit function  instead of f . In the SLS method [21],  is the minimal signed distance to the interface

 - min |x - x| if x  g

 

x 

(x) = min |x - x| if x  l

(4)

 x

0

if x  

where x is the interface location.

3

Even if  provides the interface location with a smooth function, it cannot strictly ensure mass conservation. To improve mass conservation, the ACLS [22] method suggests to use a smoothed Heaviside  computed from 

1



 = 1 + tanh

2

2

(5)

with 2 the interface thickness. Regardless of the interface capturing method choice, they all end to a similar ad-
vection equation for the color function c = f,  or 

c

+ u · c = 0

(6)

t

In the context of a divergence-free flow without phase-change, interface velocity is

equivalent to the flow velocity. Eq. (6) can thus be rewritten as a conservation equation

of c

c

+  · (uc) = 0

(7)

t

Despite the fact that the different color functions follow a similar equation, they require specific numerical treatments. In the following, details are given about flux computation and eventual additional steps in the advection process.

2.1. VOF method
In this work, the VOF method is based on the geometric transport of f with a PLIC [25] representation of the interface. Note that VOF methods can also rely on algebraic fluxes [26] but they suffer from numerical diffusion or dispersion which are incompatible with a sharp representation of the interface. The interface is reconstructed as a plane in a mixed cell (0 < f < 1)

x·n=d

(8)

The interface normal n is evaluated using the ELVIRA procedure which allows to produce second order normal computation [25] while the plane parameter d is deduced from the normal and the volume fraction using the analytic relations of a chopped cube [27]. The fluxes are computed from the geometric reconstruction using the Weymouth and Yue dimensional-splitting (WY) scheme [28]. Our structured Cartesian mesh allows the use of a dimensional-splitting scheme, which simplifies the flux computation through geometric reconstruction. It results in solving successive 1D advection problems

f +  (usf ) = f us

(9)

t xs

xs

here is s the sweep direction.

·u

=

0 does not imply

us xs

=

0 for a given splitting

direction and has to appear explicitly in the RHS of Eq. (9). Hence, it is non trivial to

have an exactly conservative scheme solving those equations successively [29]. In the

4

WY

scheme,

f

us xs

is

replaced

by

fc

us xs

.

fc

is

built

to

avoid

any

cell

under

or

overfill

such that

fc = (xC) =

0 if f < 0.5 1 otherwise

(10)

After each sweep, a PLIC reconstruction is performed for flux computation of the next step. This gives the following algorithm for a timestep

1. Compute the compression/dilatation factor fc 2. Perform a PLIC reconstruction by computing n and d in all mixed cells
3. Solve (9) in a given direction using Euler Implicit scheme 4. Repeat 2 and 3 for all directions to obtain f n+1

This algorithm leads to exact mass conservation given a divergence-free velocity field u. WY is the only method able to keep exact mass conservation in a directionalsplitting fashion. Unsplit methods also achieve such conservation [30], but the geometrical flux construction is way more demanding in terms of implementation and computation effort. Furthermore, both approaches are still limited to second order accuracy because of the geometrical nature of the fluxes based on linear reconstruction.

2.2. SLS method
The standard LS advection method relies on the transport of . The discretization has a huge impact on the mass conservation as numerical diffusion leads to artificial mass loss. This subject has been widely explored, and it has been shown that LS performs well with high-order schemes. A complete comparison of ENO, WENO and HOUC schemes of different orders has been done in [16]. Here, a finite volume WENO5 scheme is used for solving Eq. (7). One important requirement of the SLS method is to keep the property || = 1. If this is no longer true, then the computation of topological properties from  (such as normal and curvature) would suffer from huge errors and spurious behaviour. The diffusion and dispersions of numerical schemes used to solve advection will lead to the loss of this property, hence an additional step is required called the redistanciation step. It can be written as an evolution equation of  in pseudo time  [21]



 + sign(0) (|| - 1) = 0

(11)

This results in solving a Hamilton-Jacobi equation with the corresponding Hamiltonian H (, ) = sign(0) (1 - ||) with sign(0) a smoothed signed function based on the initial distance just after advection step 0

sign(0) =

0 20 + x2

(12)

Eq. (11) can be again solved with high accuracy with a HJ-WENO5 scheme [31]. This leads to the following algorithm for a time step
1. Advance the interface by solving Eq. (6) to obtain  2. Compute the regularised distance sign sign(0) from Eq. (12)

5

3. Perform 2 iterations of Eq. (11) to obtain n+1 with the pseudo time step  = 0.5x
The overall method does not conserve mass as the reinitialization step is not conservative and conservation of  does not imply conservation of mass. However, the method can be very accurate if high order schemes are applied, the implementation is straightforward even in multidimensional cases and the computational cost is expected to be fairly low.

2.3. ACLS method
Accurate conservative LS method relies on a sharper function  which is a smooth version of the indicator function .  can be seen as a volume fraction with a controlled interface width 2 , usually chosen as = x/2. For the same reasons that  cannot maintain the property || = 1 during transport, there is no guarantee that the hyperbolic tangent profile  will remain unchanged. This takes the form of local modifications of the interface thickness which can lead to an inaccurate representation of the interface and topology computation. An additional equation has to be solved in pseudo time to overcome this problem [22]



+  · ((1 - )n - ()) = 0

(13)



The stable and accurate method considered here is the ACLS of [13] with the additional modification of [14] where the reinitialization is reformulated to





1

=·



4 cosh2

map 2

 (map · nF MM - nF MM · nF MM ) nF MM  (14)

with map =

log

 1-

.

In order to ensure  boundness, a BHOUC5 [32] discretization is used for Eq. (6)

which is a HOUC5 scheme with a switch to first order upwind when undershoots or

overshoots occur in the transport process. The terms in equation (14) are discretized

using second order finite differences while the normal nF MM is computed as

nF MM = F MM

(15)

with F MM a distance function computed from a Fast Marching Method (FMM) algorithm [33]. The construction of F MM is fundamental in the method as it removes all oscillatory behaviours of  in the computation of normals [34]. Note that in this formulation, normal are not normalized, which improves front merging behaviour [14]. This leads to the following algorithm for a time step
1. Advance the interface by solving equation (6) to obtain  2. Compute the signed distance F MM from the isocontour  = 0.5, map from
 and nF MM with Eq. (15) 3. Perform one iteration of Eq. (14) to obtain n+1 with  = 0.25x

6

The overall method leads to a better mass conservation than the SLS because both transport and reinitialization steps are conservative and the transported color function  represents the liquid volume in the limit x  0. Moreover, it allows to use high order schemes too. However, the FMM algorithm implies more implementation and computation effort. To improve efficiency, the FMM reconstruction and reinitialization are only performed in a narrow band of 10 cells near the interface.

2.4. CLSVOF method
Coupling LS and VOF makes use of both method advantages to provide a conservative and accurate representation of the interface. In a dimensional splitting fashion, f is advanced using WY scheme presented above,  is also advanced in time accordingly by the 1D advection equation

 +  (us) =  us

(16)

t xs

xs

Then, the coupling between VOF and LS is done through reconstruction and redistanciation. The PLIC reconstruction Eq. (8) is performed using normal from a plane fit using  values [23] instead of ELVIRA. The redistanciation step is modified as in [35] by shifting the value of  in mixed cells (0 < f < 1) to be exactly the normal distance to the PLIC reconstruction  = d and perform redistanciation of Eq. (11) only in full or empty cells to prevent any zero-isocontour displacement. Note that in the solver, no clipping is performed based on  as in the original works [23, 35] preventing any mass conservation issues.
This leads to the following algorithm for a time step

1. Compute the compression/dilatation factor fc 2. Perform a PLIC reconstruction by computing n and d in all mixed cells
3. Solve Eq. (9) in a given direction using Euler Implicit scheme and Eq. (16) using WENO5 fluxes.
4. Repeat 2 and 3 for all directions to obtain f n+1 and  5. Correct the values of  in mixed cells with the PLIC reconstruction and perform
2 iterations of Eq. (11) on the remaining cells to obtain n+1

With this method, the PLIC reconstruction is enhanced using accurate normal from  while the redistanciation correct the mass conservation by using PLIC conservation properties. Note that using  = d introduces a second order error, the CLSVOF distance function (called P LIC in the rest of the paper) is then expected to be less accurate than  obtained from the SLS method. In the current implementation, the relaxation proposed in [9] is used to reduce the error frequently introduced by the coupling between VOF and LS. This last point will be discussed further in Section 6.3.1.

3. Two-phase low Mach solver
All interface capturing methods presented above are then integrated in a unified framework described in the following section.

7

The general continuity equation can be written as



+  · (u) = 0

(17)

t

with  the fluid density and u the fluid velocity. In the incompressible form, the continuity Eq. (17) results in the divergence-free condition

·u=0

(18)

From the conservation of momentum, one can write:

u

t +  · (u  u) = -P +  · (µD) + Fv

(19)

with µ the dynamic viscosity, P the pressure, Fv the volume force and D the rate-of-

deformation tensor

D = u + u

(20)

In a sharp two-phase framework, the interface is considered to be thin and massless. The density and viscosity is then discontinuous between both phases

[] = l - g

(21)

[µ] = µl - µg

(22)

When no phase change occurs, the interface velocity is directly the flow velocity

and integration of Eq. (18) through the interface implies normal velocity continuity

between liquid and gas

[u · n] = 0

(23)

with n the normal pointing outside the interface (from the liquid to the gas phase). Integration of Eq. (19) leads to the following jump in pressure with a purely two-phase contribution related to surface tension forces acting at the interface and a contribution related to the viscosity jump

[P ] =  + [µ (D · n) · n]

(24)

with  the fluid surface tension and  is twice the interface mean curvature. The present two-phase low-Mach solver relies on the projection method [36] with
a one-fluid representation of the velocity. The one-fluid properties are defined as an average

 = g + H []

(25)

µ = µg + H [µ]

(26)

with H a regularized Heaviside of controlled width 2 = x. In a VOF and ACLS framework, the natural choice is the color function (f and  respectively) while in
a SLS framework, an Heaviside can be defined using a regularization of the distance
function such as Eq. (5).

8

3.1. Grid arrangement
A Marker-and-Cell grid arrangement [37] is used : the pressure is defined at the center of a cell while the velocity is located at the boundaries of the cell. In a twophase flow, one can consider that all scalars are collocated (located at the center of the cell) while the velocity is staggered (located at the boundaries of the cell) as shown in Fig.1 for a 2D control volume.

v

vi,

j+

1 2

ui-

1 2

,

j

i, j

u

ui+

1 2

,

j



vi,

j-

1 2

Figure 1: Mac grid arrangement on a 2D cartesian grid

This grid arrangement allows to define the following operators:

· A gradient operator f for collocated variables c, the x-component u is de-

fined as

u

c

|i-

1 2

,j

=

c,i,j

- c,i-1,j x

(27)

· A gradient operator c for staggered variable is also introduced with the xcomponent xc of a x-staggered variable defined as

xc f |i,j

=

f,i+

1 2

,j

-

f,i-

1 2

,j

x

(28)

with f a collocated scalar.

· A divergence operator c · (cu) applied on a control volume 

c

· (cu)|i,j

=

~ c,i+

1 2

,j

ui+

1 2

,j

-

~ c,i-

1 2

,j

ui-

1 2

,j

x

+

~ c,i,j

+

1 2

vi,j

+

1 2

-

~ c,i,j-

1 2

vi,j-

1 2

y

(29)

with ~ c an arbitrary interpolation of c to a face of the  control volume.

9

· A divergence operator f · (f u) on a staggered volume control (here for u)

f

·

(uu)|i-

1 2

,j

=

~ u,i,j u¯i,j

- ~ u,i-1,j u¯i-1,j x

+

~ u,i-

1 2

,j

+

1 2

v¯i-

1 2

,j

+

1 2

-

~ u,i-

1 2

,j-

1 2

v¯i-

1 2

,j-

1 2

y

(30)

with ~ u an arbitrary interpolation of u and u¯ a linear interpolation of velocity to a face of the u control volume.

Note that the divergence operators are built such that c · u = 0 and f · u = 0 discretely thanks to the Mac grid arrangement. In the following, general staggered operators and variables are mentioned with the subscript f while staggered variable referring to a specific control volume are referred to u, v or w.

3.2. Prediction step The prediction step is written as follows

u - un

t = Lconv + Lvisc + Lcap

(31)

with u the predicted velocity field which is not divergence-free and the 3 operators defined as

Lconv = -un · f un

(32)

1 Lvisc = nf +1 f ·

µn+1Dn

(33)

Lcap

=

1 nf +1

Fn+1

(34)

where nf +1, µn+1 and Fn+1 are computed using the advanced color function cn+1. Details on the operators discretization are given hereafter.

3.2.1. Convection term Lconv The prediction step given by Eq. (31) is in a velocity form, and the convection term
given by Eq. (32) does not ensure any conservation on momentum. In this work, this term is rewritten in order to ensure consistent transport of mass and momentum as in [38]. This method relies on additional continuity equations defined in the momentum control volumes u, v (and w in 3D) of Fig.1. For u component in u considering only the convective contribution, the scheme is written as

u - nu t

=

-f

· (nuun)

(35)

uu - nuun t

=

-f

· (nuunun)

(36)

10

note that u is only an intermediate evolution variable discarded just after prediction step. In the general case, u will differ from the reconstruction nu+1.
Rewriting Eq. (36) in a velocity form gives (here for u)

Lconv

=

1 u f

·

(nuunun) -

un t

u - nu u

(37)

the additional term in the RHS is as a correction of momentum due to the mass change in the cell during the prediction step. The fluxes (nuun) and (nuunun) have to be evaluated with the same interpolation for consistency. Moreover, the scheme have to
be bounded to avoid any overshoot or undershoot of density. In the present solver, a
WENO5 interpolation is performed, which switches to an upwind evaluation when the
stencil crosses the interface.

,i-1

,i

u,i-

1 2

a) Exact reconstruction

fi

fi-1

b) PLIC reconstruction

i-1

i-

1 2

x

i

c) GFM reconstruction

Figure 2:

Reconstruction

of

u,i-

1 2

on a 2D cartesian grid.

The grey area represent the area of

liquid

evaluated

in

the

control

volume

u,i-

1 2

.

In the VOF or CLSVOF framework, a second order accurate reconstruction of the

density nf is performed by using the PLIC reconstruction from f n [39] as in Fig. 2. For SLS and ACLS, [38] proposed to use the GFM expression of face interpolated density

[40]

nu,i-

1 2

=

g

+

i-

1 2

[]

(38)

with

i-

1 2

defined

from

n

as

0



i-

1 2

 =


1
max(0,ni-1)+max(0,ni )



|ni-1|+|ni |

if ni-1 < 0 and ni < 0 if ni-1 > 0 and ni > 0 otherwise

(39)

this leads to a first order reconstruction of the interface as illustrated in Fig. 2.
In this work, it was found that using the regularized Heaviside H as in [41] was a better choice for momentum conservation and solver robustness in the case of ACLS.
Indeed, Eq. (39) relies on geometric informations provided by a distance function.
Because of the errors in F MM , this expression can lead to huge errors in density. Hence, a more robust approximation of nu is performed by using the simple  average

nu,i-

1 2

= g

+

i-

1 2

[]

(40)

with

i-

1 2

=

1 2

(i-1 + i).

11

3.2.2. Capillary term Lcap

Historically, surface tension was either treated as a volumetric force F in the pre-

diction step of the projection method using the Continuum Surface Force (CSF) ap-

proach or as a pressure jump in the discretization of pressure gradients using the Ghost

Fluid Method (GFM). Popinet [42] showed that GFM can also be expressed as a vol-

umetric force in the prediction step leading to the same formalism as CSF. A general

expression of this force is

F = n

(41)

The Dirac function  is related to the Heaviside function H such that H = n. Numerically, it is not possible to represent the Heaviside function at the exact interface location, and a numerical approximation is required:

F = Hnum

(42)

with Hnum a discrete representation of the Heaviside. A CSF approach would use a smooth Heaviside such as the expressions given above

Hnum = H. The expression corresponding to GFM is the sharp Heaviside defined at the cell center Hnum = H0 = H(xC).
In [43], the authors noticed that discretizing H and P with the same opera-

tor provides a discrete balance between pressure gradient and capillary forces. This is

crucial to obtain a stable and robust surface tension modelling. With variable density,

it

is

also

important

to

have

the

same

expression

for

1 n+1

in

Eq.

(34)

to

keep

the

well-

balanced property [41]. In our solver, the face gradient f is used for both surface

tension force and the pressure gradient. The density is defined using the same formalism than in the correction step as nf +1 = nu+1 for the x-normal faces (nv +1 and nw+1 for y and z-normal faces).

The GFM discretization of Lcap used in our solver can be written (here for u) as

Lcap

=

1 nu+1

nu+1xf

H0,n+1

(43)

with nu+1 a curvature projected to the x-normal face. Sec. 4 is dedicated to the computation of the curvature  and its interpolation to the face f .

3.2.3. Viscous term Lvisc

Finally,

the

viscous

term

Lvisc

=

 1
n+1 f

·

µn+1Dn

is discretized as (here for u)

1 Lvisc = nu+1

2xf µn+1xc un + yc

µn+1yf un

+ yc µn+1xf vn

(44)

in this expression, some µn+1 values are needed at  corners, they are defined with simple average of the neighbour collocated values

µn+1

i-

1 2

,j-

1 2

=

1 4

µni,+j 1 + µni-+11,j + µni,+j-11 + µni-+11,j-1

(45)

Note that sharper choices of corner interpolation can be made based on a distance function [44] but no significant improvements have been observed in the test cases presented i this work.

12

3.3. Correction step The correction step is written as

un+1 - u t

=

-

1 nf +1

f

P

n+1

(46)

where the pressure P n+1 is obtained from the resolution of variable coefficient Poisson equation (here using the linear solver PETSc library [45] with the algebric multigrid preconditioner BoomerAMG and a krylov-based GMRES method)

c ·

1 nf +1

f

P

n+1

=

1 t c

· u

(47)

with nf +1 = nu+1 for the x-normal faces (nv +1 and nw+1 for y and z-normal faces).

4. Curvature computation
The most stringent aspect of a surface tension modelling is the computation of the curvature. This is done by using the interface information provided by the color function c. This section aims to give an overview of the literature works on the subject along with the choices made in our solver.

4.1. Curvature from implicit surfaces

A natural choice for curvature computation is the differentiation of the field c. In

the context of implicit surfaces, Goldman [46] provided an exhaustive list of formulas

for curvature computation. From c, the normal pointing outward the liquid phase can

be computed as

c

n

=

- |c|

(48)

The curvature is then deduced from one of the following expressions

 = - · c = tr (c) - n · c · n

(49)

|c|

|c|

As curvature depends on second order derivatives of the function c, one need to provide c at least at third order to retrieve a consistent curvature using standard finite difference operators. More generally, a curvature of order m is obtained using an implicit surface function of order m + 2 [47]. This limitation is important to keep in mind, as numerous strategies to reconstruct a distance function from an isocontour are of second order, which is not sufficient to ensure convergence of the curvature. This has been observed in a VOF context [48] with curvature computed from a second order reconstruced distance function (RDF). To deal with this issue, a least-square computation of operators has been presented in the context of curvature computation from an unstructured mesh [49] or from a FMM reconstruction of a signed distance [13]. The idea is to reduce the second order errors of the distance function by adding

13

more points in the stencil. Even if the method leads to second order convergence in a coarse regime, the convergence is not retrieved for high resolutions as demonstrated in Sec. 6.3.1.
Another requirement is the smoothness of c to avoid spurious higher order derivatives. With LS, this is not a problem, as  is already a smooth well-defined function in all the domain. However, for VOF, the volume fraction is too sharp to provide non-oscillating curvature computation. Using directly the volume fraction f leads to non-converging curvature. Various convolution methods were used to get a smoother version f (see [50]) but even with 8th order convolution Kernel, curvature cannot reach mesh convergence.
Considering the above discussion, differentiation seems to be a straightforward method for SLS, ACLS or CLSVOF. Simple second order finite differences are sufficient in the SLS case while a least-square approach is mandatory for ACLS and CLSVOF to have convergence. However, a more reliable method is needed for curvature from VOF, as f can not be reasonably differentiated twice.

4.2. Curvature from height function
As an alternative, curvature can be deduced from height functions [51]. If an interface is described by an height function such that y = (x) in 2D (or z = (x, y) in 3D), the curvature can be deduced from



=

xx

(1 +

2 x

)

3 2

=

xx +

yy + hxx

2 y

+

yy

2 x

-

2

xy

x

y

(1 +

2 x

+

2 y

)

3 2

in 2D

(50)

in 3D

(51)

In [52], an early method was proposed to compute height functions from f . In a cell C, the dominant direction is determined from n. Then, an exact average height function hi can be derived by simply summing all volume fraction of a column in this direction. For y-dominant direction, this is written as

j=+

hi =

fi,j

j=-

(52)

in this method  is obviously not possible and replaced by 3 [52, 7, 53]

The operators hx and hxx are then computed with second order accuracy using

standard finite differences

hx|i

=

hi+1 -hi-1 2x

and

hxx|i

=

. hi+1 -2hi +hi-1
x2

Finally,

the curvature is retrieved with second order accuracy using Eq. (51). This method

requires a 3 × 3 × 7 stencil. However, the fixed stencil will not work in every interface

configurations and lead to inconsistent curvature computations [48].

To address this issue, each height can be constructed independently with a variable

stencil which improves drastically the accuracy and robustness of the curvature com-

putation [7, 53]. Even with this improvement, height function fails to provide accurate

curvature computation for low resolution [7].

14

It is also possible to decouple height function from the mesh [54]. In [55], the authors generalized this idea by computing height functions in a coordinate system orthonormal to the interface normal with column of parametrized width and depth. For under-resolved configuration, this has proved to give more accurate curvature compared to a mesh-aligned version.
Finally, some attempts to apply height function in other context have been made in SLS [56] where the method leads to a less accurate curvature compared to height functions from VOF. A method has also been proposed for ACLS [57] however a stencil of 11 cells was required to achieve convergence. Thus, height function seems to be only interesting in the VOF framework.
In our solver, the use of standard height function with variable stencil is used instead of the mesh-decoupled method proposed in [55] to benefit from the Cartesian grid arrangement. With this choice, another computation method is required for underresolved configuration following the idea in [7] detailed in the next section.

4.3. Curvature from interface positions
A last type of methods, mainly used in Front capturing methods, relies on marker positions to reconstruct an interface surfaces using a least-square approach [58]. For the general case of an interface with normal n and a set of points describing the interface x,i, one can fit a parabola P by using a least-square regression.

P(x) = a0x2 + a1x + a2 P(x) = a0x2 + a1y2 + a2xy + a3x + a4y + a5

in 2D (53) in 3D (54)

First, the set of points x,i is redefined as x,i in a new coordinate system [n, t1, t2] from the Cartesian coordinate system [ex, ey, ez].
Then, the following least square minimization is performed

N

R2 =

Wi(x,i) z,i - P(x,i, y,i) 2

i=1

(55)

with Wi an optional weight to restrain the region of interest. This resulting linear system requires at least N = 3 (6 in 3D) to be well-conditioned. Even if this method seems expensive and complex to implement,this is a good alternative to the mesh-decoupled method of [55] for robust under-resolved computations. It has been used in a VOF context in [59] with positions from the PLIC reconstruction leading to strong improvement in under-resolved configurations compared to methods based on height function. In our solver, this parabola fit is coupled with height function to improve under-resolved robustness while keeping a second order convergence in high resolution as proposed in [7].

4.4. Curvature interpolation to the face
Depending on the method, the curvature is computed either on the interface or at the cell center. In a MAC grid arrangement, those curvature values need to be interpolated to the face as f . The way to do it depends on the location of the computed curvature.

15

,i, j

-1(0)

r i,j

-1(i,j)

Figure 3: Position of a curvature computed from  in a cell Ci,j with i,j the curvature defined at the cell center and ,i,j the curvature of the interface contained in the cell.

When curvature is defined at the cell center (i,j in Fig. 3) , the interpolation can be expressed as

u,i-

1 2

,j

=

i,j |i-1,j | + i-1,j |i,j | |i,j | + |i-1,j |

u,i-

1 2

,j

=

i,j i-1,j

|i,j | + |i-1,j | i,j |i,j | + i-1,j |i-1,j |

for linear interpolation (56) for harmonic interpolation (57)

The first one is the linear interpolation of the curvature while the second one is the linear interpolation of the radius. This type of interpolation can be seen as the interpolation of cell centered curvature to the interface position lying between those cells which can be different from the position of the face center.
For a curvature directly defined at the interface (,i,j in Fig. 3), one need to average the curvatures of two adjacent cells which are not necessarily containing a curvature value. The most simple way to do it is an average of values if they both contain an interface value and keep the single available value if one of the two adjacent cells does not contain the interface

u,i-

1 2

,j

=

,i-1,j + ,i,j 2

u,i-

1 2

,j

=

,i,j

for two adjacent interfacial cells

(58)

for one interfacial cell

(59)

in a more general way, one can define the curvature at a cell face by weight interpola-

tion [60]

u,i-

1 2

,j

=

Wi-1,j ,i-1,j + Wi,j ,i,j Wi-1,j + Wi,j

(60)

16

with Wi,j = H,i,j(1 - H,i,j). This gives importance to cell containing a large portion of interface (H close to 0.5) and cancel quasi empty or full cells (H close to 0 or 1) which are more prompt to curvature computation errors.
4.5. Curvature in the solver From the above discussion, the following choices has been made in our solver :
· For SLS, the curvature is retrieved by using second order finite differences (FD) on  while the Least-Square minimization (LSQUAD) of [13] is used on F MM and P LIC for ACLS and CLSVOF respectively. The curvature is then defined at the cell center and the harmonic interpolation Eq. (57) is used to get face curvatures. For robustness improvement, the interpolation switches to linear interpolation Eq. (56) when curvature changes sign as in [13].
· For VOF, the curvature is computed from the general height function (HF) method [7] and interpolated to the face using Eq. (60).

5. Summary of the two-phase solver procedure

A summary of the adaptations introduced to unify all Eulerian methods in the same low Mach solver is provided in Tab. 1 and the full algorithm for a time step is given. All the implementations are integrated into the TITAN solver developed at EM2C laboratory.
1. Compute nf from cn; 2. Advance interface following one of the algorithm of Sec. 2 to obtain cn+1; 3. Compute nf +1, H0,n+1, nf +1 from cn+1; 4. Advance f and u with the consistent mass and momentum scheme of Sec. 3.2; 5. Solve the Pressure from Eq. (47); 6. Correct the velocity to obtain un+1 with Eq. (46);

The time integration of steps 4 to 6 is performed using a RK2 SSP scheme. The

timestep has a stability constraint based on the CFL, the surface tension and the vis-

cosity :

x

t < min

,

2u

x3(l + g) (2)3

,

4

x2 max(l,

g )

(61)

in most of the application shown hereafter, the surface tension restriction is dominant.

method

f H f

VOF HF From Eq. (60) f From PLIC

SLS FD From Eq. (57) From Eq. (5) From Eq. (39)

ACLS LSQUAD From Eq. (57)
 From Eq. (40)

CLSVOF LSQUAD From Eq. (57)
f From PLIC

Table 1: Summary of computation choices for the four interface capturing method in the Solver

17

6. Results
The results presented in this section are organized as follows. First, the assessment of interface capturing methods is performed with imposed velocity field on 2D and 3D test cases with emphasis on mass conservation. Then, the unified solver is evaluated on momentum conservation and surface tension modelling using well-known test cases of the literature. Finally, a two applications are presented to demonstrate accuracy and robustness of the unified framework on representative two-phase flow configurations.

6.1. Interface capturing

6.1.1. Error metrics

The evaluation of the different methods is based on accuracy and mass conserva-

tion. To provide an equal base of comparison for accuracy, the shape error Eshape is

based on the regularized Heaviside function H(c). They all are smooth versions of 

with an interface thickness of 2

=

x

such

that

H(c)

-
x0

.

The

accuracy

error

is then defined as

NC

Eshape = |H (ci,T ) - H (ci,0)|Vi

(62)

i=1

with t = 0 the initial time of the simulation, t = T the final time, NC the number of cells in the computational domain and Vi the volume of the cell Ci. Regarding mass conservation, VOF and CLSVOF achieve it at machine precision and will not be displayed. The ACLS method conserves  up to machine precision, however it does not correspond exactly to the volume enclosed in the 0.5 isocontour. This is why a simplex decomposition is performed in each cell in order to find the intersections between the cell and the interface and compute the related volume. This method leads to a second order approximation of a volume enclosed in a given isocontour [61]. This same approach is performed for enclosed volume in the 0 isocontour of SLS. The mass error is then defined as

1T

Emass = V0T

|V |dt
0

(63)

with V = V (t+dt)-V (t) the variation of liquid volume computed from the simplex decomposition method evaluated at time t and t + dt. Compared to a more classical measure of mass loss based on the difference between initial and final volume V0 and VT , this metric gives a better overview of the mass variation of a method with respect to time.

6.1.2. Zalesak's disk rotation The Zalesak's disk [62] test case consists in a notched circle of radius 0.15 initially
centered at (0.5, 0.75) in a [1 × 1] domain. The notched width is 0.05 and notched length is 0.25. The velocity field is a solid rotation defined as

u=

2(0.5 - y) 2(x - 0.5)

(64)

18

The results are given for a full rotation of the disk corresponding to a simulation time T = 1 for a CFL number of 0.5.
Figure 4: Initial and final shape for the Zalesak's disk rotation The final shape is compared with the initial shape for all methods in Fig. 4. At the lowest resolution 322, VOF keeps the notch while SLS is shifted. ACLS and CLSVOF merge the two sides of the notch. This shows the difference of normal computation between VOF and CLSVOF : while ELVIRA is able to capture poorly-resolved structures, normals from  tend to merge fronts. From 642 resolution all methods maintain the notch during the whole computation.

(a) Eshape error

(b) Emass error

Figure 5: Mesh error convergence for the zalesak's disk rotation

In Fig. 5a, the error convergence is displayed for all methods. One can notice that VOF, ACLS and CLSVOF perform well even at very low resolution while SLS and ACLS perform better for high resolution with an asymptotic second order behaviour. Regarding mass conservation, ACLS is better than SLS for the low resolution meshes while they both have the same conservation properties for the highest resolution. As pictured in Fig. 5b.

6.1.3. Vortex in a box
Another classical test case is the vortex-in-a-box first used by Leveque to evaluate high order advection schemes in incompressibles flows [63]. A circle of radius 0.15 is initially centered at (0.5, 0.75) in a [1 × 1] domain. The velocity field is deduced

19

from

the

stream

function



=

1 

sin2(x) sin2(y) cos



t T

such that it is reversed at

t = T /2. The results are given for the final time T = 8 for an initial CFL number of

0.32 (t is kept constant for the whole simulation).

Figure 6: Vortex in a box shape at t = 4 and t = 8 with the temporal mass evolution
In Fig. 6, VOF, CLSVOF and ACLS tend to produce numerical atomization in the thinner structures of the serpentine while the SLS shows a more robust behaviour at the cost of mass conservation. This numerical atomization is less predominant with mesh refinement.
In Fig. 7a, shape and mass errors are displayed as a function of initial disk resolution. VOF and CLSVOF are performing better for all resolutions, this is expected as the Nd = 153.6 case still implies a thin tail which is not well resolved. It is interesting to notice that the CLSVOF does not improve significantly the accuracy of the method compared to VOF. Surprisingly, SLS is better at conserving mass than ACLS based on our total volume variation metric. However, the ACLS method is able to retrieve a final mass close to the initial one which is not the case for SLS.
6.1.4. Sphere deformation A 3D test case is the sphere deformation, also presented in [63]. A sphere of ra-
dius 0.15 is initially centered at (0.35, 0.35, 0.35) in a [1 × 1 × 1] domain. It is then
20

(a) Eshape error

(b) Emass error

Figure 7: Mesh error convergence for the vortex in a box

advected by a velocity field which induces a combination of stretching in the x-y plane and the x-z plane with an inversion at t = T /2. The results are given for the final time T = 3 for an initial CFL number of 0.32 (t is kept constant for the whole simulation).

The same conclusions as in for the vortex-in-a-box can be drawn from this 3D test case : VOF, CLSVOF and ACLS produce some numerical atomization when the interface is under-resolved as shown in Fig. 8 for t = 1.5 at a low mesh resolution of ND = 9.6. This numerical atomization disappears with mesh refinement. ACLS and SLS seems to lose a lot of mass for ND = 9.6 even if ACLS is able to earn back the mass it has lost during the reversed part of the simulation. All methods exhibit a thin tail on the sphere at t = T which represents less and less mass with mesh refinement even if it is still present for SLS and ACLS at ND = 38.4. CLSVOF seems to handle this behaviour in the best way for the smallest resolutions.
From Fig. 9a, VOF and CLSVOF are still the most accurate methods while ACLS and SLS show similar mass conservation in Fig. 9b. Apparently, the transition from 2D to 3D does not affect the overall behaviour of the methods. One slight improvement can be noticed by using CLSVOF for normal computation in 3D. This can be explained by the ELVIRA accuracy falling behind in 3D configuration if a compact stencil of 3 × 3 × 3 is used. It has been shown that second order accurate normal computation is only achieved with a stencil of 5 × 5 × 5 [64].

6.1.5. Computational time To complete the comparison, the computational cost is compared between the meth-
ods. In Fig. 10, the Reduced Computation Time (RCT) is given

RCT = WCT × NCP U

(65)

NC × Nite

withNC the number of cell, NCP U the number of cores, WCT the Wall Clock Time and Nite the number of iterations .
The 2D vortex in a box case was run on 16 cores while the 3D deformation case was run on 64 cores. Cores used in this work are Intel Xeon Gold 6230 20C 2.1GHz.

21

Figure 8: Shape at t = 1.5 and t = 3 for the sphere deformation

(a) Eshape error

(b) Emass error

Figure 9: Mesh error convergence for the sphere deformation

22

(a) Vortex in a box

(b) Sphere deformation

Figure 10: RCT for 2D and 3D cases

Here, the RCT decreases as the number of elements per cores increases. This is expected as for a very coarse mesh, a more important part of the simulation time is lost in communications. The cases with more elements show an asymptotic behaviour with a constant RCT. In 2D configurations, the VOF method is more efficient than CLSVOF, SLS and ACLS and seems to scale better with number of elements. This is because VOF method only requires to compute fluxes and reconstruction on the interface cells and their neighbours, hence the computational time does not scale in Nelem but in N. Also, 2D computation of geometric flux and PLIC reconstruction is really fast in a split fashion. As expected, SLS is more efficient than ACLS because of the reinitialization which is more demanding in the case of ACLS. The CLSVOF method costs approximately VOF and SLS combined. In 3D, geometry operations are more expensive, and VOF falls behind CLSVOF and SLS in efficiency. CLSVOF is more effective than VOF because of the normal computation which is far less expensive than ELVIRA in 3D.

6.2. Momentum conservation
Now that interface capturing methods have been compared on imposed velocity fields, the coupling with the two-phase solver is explored. To assess the momentum conservation of our solver, the classic density ball test case introduced in [65] is presented where a 2D droplet of radius 0.1 and density 106 is translating at a velocity u = 1 m/s in a unity density field at rest. The density is high enough to consider the transport as a pure solid translation. The error Eshape of Sec. 6.1.1 is used here to quantify the interface transport. A new error Etke is introduced to evaluate momentum conservation with the same formalism as Emass

1

T

Etke = K0T

|K |dt
0

(66)

23

with K = K(t + dt) - K(t) the variation of kinetic energy computed at time t and t + dt. With K computed as in [10]

K=

1 2

NC

i

ui

2Vi

(67)

i=1

with i = g + H,i [] and ui components defined as average of face velocities.

Figure 11: Initial and final shape for the density ball translation, the first image at the left shows a case without the consistent scheme while the other images are zoomed on the circle shape
Fig. 11 displays the shape for different meshes. A non-conservative form of the momentum transport has been added for completeness where the shape is not conserved at all. For all other simulations, using the momentum fix, the initial circular shape is well preserved by the VOF and CLSVOF approaches even for very low resolution. This can be explained by the density approximation based on PLIC which is more accurate and less diffusive than Eq. (40). However, the circle is less distorted than the one presented in [38] where Eq. (39) was used coupled with a ACLS approach.

(a) Eshape error

(b) Etke error

Figure 12: Mesh error convergence for the density ball translation

When looking at more quantitative metrics, all methods display a convergence rate between 1 and 2 for Eshape in Fig. 12a with a better accuracy for VOF and CLSVOF. This shape error is explained by the difference in momentum conservation. A huge difference of two order of magnitude is observed between VOF and SLS for Etke in Fig.12b. It is also interesting to notice that ACLS is more conservative than SLS for

24

momentum too. This illustrates how momentum conservation is impacted by the choice of nu computation and mass conservation.
6.3. Surface tension modelling
The other focus of the solver focuses on the surface tension modelling implying both curvature computation and surface tension force discretization. In a first test, the curvature computation accuracy is evaluated without taking into account the transport errors induced by the velocity field. When an interface capturing method is coupled with a two-phase solver, the curvature errors act as a vorticity source in the momentum equation scaling with  and produce well-known parasitic currents [18]. To enlighten this behaviour two additional cases are considered and illustrated in Fig.13: a static test case where only curvature error acts as a source of error and a dynamic case where the interface transport acts as a second source of error. Finally, the canonical damping wave test case is considered to assess the solver on capillary-diven flows.

6.3.1. Curvature computation
First, the accuracy of the curvature is demonstrated for the different representations of the interface. The choices of  computation summed up in Tab.1 are considered. Note that for ACLS, F MM is used while for CLSVOF P LIC is used instead of the exact distance function .
The relative curvature errors are defined as in [13] :

L2() =

1 N

N i=1

(exact

-

f,i)2

exact

max |exact - f,i|

L() = i

exact

(68) (69)

with exact the exact curvature and f an interpolated curvature to the faces where f H0 is non-zero. In practice, f are the only curvature values used for surface tension modelling regardless of the interface capturing method. For a range of ND = 3.2 to ND = 409.6, the errors are evaluated on 100 circles randomly located in the domain in order to meet as much configurations as possible. The final metric is L2() the mean of L2() and max (L()) the maximum of L() over all those configurations.
Fig. 15a and 15b show convergence in L2 and L for all methods but ACLS. The ACLS method shows a saturation of the error convergence for high resolutions because of the second order nature of the F MM distance function. Note that for completeness, Fig. 16a and 16b illustrate the difference between LSQUAD and FD approach applied on F MM . It can be seen that the FD method does not show any convergent behaviour while LSQUAD, the method used here for CLSVOF and ACLS, manages to decrease the error until ND = 51.2. This saturation is not observed for the CLSVOF approach because of the relaxation applied on the P LIC . This takes the form of P LIC = +(1-)d and  is a function of the difference between  and d. As observed in Fig. 16a and 16b, if no relaxation

25

symmetry

symmetry (a) Static test case

g

A0

3

U0

h0

l

D



L

(b) Dynamic test case

Figure 13: Test case set up for the spurious currents quantification

Figure 14: Planar damping wave simulation set up

is performed, the curvature computation does not converge at high resolution for the same reasons as for ACLS. If the relaxation is activated,  will tend to one for high resolution as the local curvature in a given cell is closer to a plane, so the discrepancy between  and d is lower. This allows CLSVOF curvature to show convergence even for high resolutions. Finally, HF method has a transient convergence regime in the lowest resolutions as already pointed out in [7].
6.3.2. Static test case An infinite cylinder of diameter D = 0.4 is centered in a [1 × 1] domain without
gravity force. Only a quarter of the domain is considered here where right and top boundary conditions are no-slip walls and bottom and left boundary conditions are symmetry. The cylinder is supposed to stay at rest as the pressure force is expected to balance exactly the capillary forces. The methods are not able to compute a constant
26

(a) Mean of L2()

(b) Maximum of L()

Figure 15: Mesh convergence of L2() and max (L()) for the 4 methods

(a) Mean of L2()

(b) Maximum of L()

Figure 16: Mesh convergence of L2() and L() error for other choices of  computation

 and spurious currents are present in the domain. This behaviour is quantified here

with

the maximum

Capillary

number Camax

=



. u max


The

time

scale

is

defined

as t =

D3 

and

the

Laplace

number

La

=

D µ2

.

The

fluid

properties

are

the

same

in both phases such that La = 12000.

In Fig. 17a is displayed the mesh convergence of the maximum Camax during a

static simulation. One can see that all methods but ACLS converge with mesh reso-

lution. This is because of the non-converging behaviour of  which has been demon-

strated from previous section and from the L() error at the end of the simulation
in Fig.17b. This has been previously observed in [13] in 3D where the Camax was closely the same for the 403 and 803 meshes.

The damping of the spurious currents in Fig. 18 can be explained by the numerical

curvature computation. The initial spurious currents are a direct consequence of the

initial error introduced by the curvature computation. VOF is able to reach an equi-

librium close to zero machine as shown in [7]. The other methods also reach a steady

Camax value which is not zero because of the reinitialization step introducing new

27

(a) Camax for a full run

(b) L() error at t/t = 20

Figure 17: Mesh convergence of Camax and L() error for the static case

(a) ND = 12.8

(b) ND = 51.2

Figure 18: Temporal evolution of Camax for the static case

errors at each iteration [18]. While this is very noticeable for ACLS, the magnitude decreases using SLS and decreases even more with CLSVOF.

6.3.3. Dynamic test case

In order to quantify the impact of the flow dynamic on the spurious currents, the

following test case is considered. An infinite cylinder of diameter D = 0.4 is centered

in a [1 × 1] domain with a uniform horizontal velocity U0 where boundary conditions are periodic in the velocity direction and free slip conditions are imposed on the top

and bottom boundaries.

From

the new velocity

scale U0,

a new time

scale can be defined

as tU

=

D U0

and

the

Weber number W e

=

U02 

D

.

The fluid properties are the same as in the static case

with W e = 0.4.

The mesh convergences of Camax and L() after one revolution are illustrated in Fig. 19a and 19b. As in [7] and [18], no convergence is observed for VOF because of

the second-order errors introduced by the transport step. This is also true for CLSVOF

and ACLS. However, SLS exhibits a huge reduction of spurious currents explained by

28

(a) Camax for a full run

(b) L() error at t/tU = 2.5

Figure 19: Mesh convergence of Camax and L() error for the dynamic case

the higher accuracy of curvature and transport.

(a) ND = 12.8

(b) ND = 51.2

Figure 20: Temporal evolution of Camax for the dynamic case

Compared to the static case, no damping of spurious currents is observed in Fig. 20. This is because of the permanent introduction of transport errors acting as an imbalance in the curvature computation. For a more complete visualization, the velocity field in the reference of the translating droplet is given for a medium resolution of ND = 12.8 in Fig. 21. CLSVOF is slightly improving VOF curvature computation but it is not as accurate as SLS because of the P LIC perturbations introduced by the LS-VOF coupling. ACLS performs better than VOF and CLSVOF in the medium resolution range while SLS maintains a fairly low amount of spurious currents. The spurious intensity u max represents about 1% of U0 for VOF, CLSVOF and ACLS against 0.001% for SLS.

6.3.4. Planar damping wave The planar damping wave is an interesting test case as an analytical solution is
available in the literature. The test case has been widely investigated as a solver validation [66, 2, 20, 67, 7, 12, 14]. Here, a planar wave is initialized with a small harmonic

29

0:02

0:02

0:02

(a) VOF

0:02

(b) CLSVOF

(c) SLS

(d) ACLS

Figure 21: Relative velocity field (U0 is subtracted for visualization) for the dynamic case at ND = 12.8

perturbation of amplitude A0 and both fluids are at rest with the same density and viscosity properties. The initial interface height can be described by

2x

y0 = h0 + A0 cos 

(70)

with  the wavelength of the perturbation and h0 = 3/2 the vertical interface position.

 is taken to unity and A0 = /100. In this problem, non dimensional time and

viscosity are defined as

 = t0,  = 2/0

(71)

with the perturbation frequency 0 = 3/(l + g).

30

The perturbation amplitude is then deduced from the analytical solution derived by Prosperetti et al. [68]

4(1 - 4)2 A( ) =A0 8(1 - 4)2 + 1 erfc 

+

4 i=1

A0

zi Zi

zi2

02 - 0

exp

zi2 - 0  0

erfc zi

 0

(72)

with  = lg/(l + g)2, Zi = (zj - zi) and zi the four complex roots of the
j=i
following quartic equation in z

z4 - 4 (0)1/2 z3 + 2(1 - 6)0z2 + 4(1 - 3) (0)3/2 z + (1 - 4) (0)2 + 02 = 0 (73)

In the special case of same density, momentum and viscosity jumps at the interface cancel and the numerical errors are only due to curvature computation and interface transport. The densities are l = g = 1 which leads to La = 3000,  = 0.0647 and  = 0.25. The solution holds for infinite domain in the y-direction while x is periodic. The box is taken as [ × 3] to limit boundary effects with wallslip imposed at the top and bottom as shown in Fig. 14.
The error is defined as the RMS of relative amplitude error over time

L2(A) =

1

T |(Aexact( ) - A( )| d

T 0 0

A0

(74)

with T 0 = 25 which corresponds to approximately 4 oscillations. The error L2(A) is displayed in Fig. 22d with a number of points in the wavelength
N from 8 to 128. All methods converge at second order with a better accuracy for VOF. A convergence saturation is observed for SLS which is due to parasitic perturbations appearing for the highest resolution. A temporal evolution of the amplitude for N = 32 is also presented in Fig. 22c, where VOF is already very accurate while SLS, CLSVOF and ACLS are a little bit shifted. Note that this test case is specifically well suited for VOF as the HF method is the most accurate in mesh-aligned configurations. This explains why it performs better than the other methods on the damping wave.

6.4. Applications

6.4.1. Droplet collision

A collision between two water droplets in quiescent air is presented. The solver

have to handle large density ratio and strong capillary effects accurately in order to

retrieve the correct collision regime. Indeed, a bad prediction of curvature or momen-

tum will lead to a modification of the Weber number W e =

number Oh

=

µ D

which drive the collision regime.

Here,

Du2 

and

the

Ohnesorge

the head-on collision of

two equal-sized droplet with W e = 40 and Oh = 0.0047 is considered. The expected

outcome is a reflexive collision with one satellite observed experimentally [69]. This

31

(a) N = 8

(b) N = 16

(c) N = 32

(d) L2(A) error

Figure 22: Temporal evolution of A/A0 for different mesh resolutions and mesh error convergence of L2(A)

regime includes coalescence and break up which are the most challenging behaviour to capture as they will always happen in the mesh resolution limit. Thus, this last test case is the most discriminating for interface capturing methods as they behave differently in this limit cases. Special attention is drawn to the topology transitions. The set up is the same as in [70] : the two droplets are located in the body diagonal of of [3D × 3D × 3D] cube with a distance of D/4 between each other as illustrated on Fig. 23a.
A resolution of ND = 40 is chosen and the boundary conditions are free-slip walls in all directions. This diagonal droplet trajectory have two main interests : it avoids any favourable alignments with the mesh and it allows to take a smaller domain to reduce computational time. In Fig. 24 are displayed the four topology changes :
· Coalescence of the droplets at t1 = 150 µs
· Film break up of the disk at t2 = 1250 µs
· Torus coalescence at t3 = 1850 µs
· Thin cylinder break up at t4 = 4700 µs
32

P2 D/4

ey
ex ez

ey

3D

ex

P1

ez

(a) Initial setup

(b) Plane definition

Figure 23: Numerical configuration for the head-on collision

Each topology change is characterized by a mass change for SLS and ACLS and a peak of u max for all methods (see Fig. 25). This is because of the bad curvature and normal computations when the mesh limit is reached, which is always the case in topology changes. The expected satellite is retrieved at the end of the simulation even if the size vary depending on the method used. The first coalescence at t1 introduces small bubbles at the stagnation point for VOF and CLSVOF because of the normal computation. As the mass is conserved with VOF and CLSVOF, those bubbles will be trapped in the liquid (see Fig. 26). It is also interesting to notice that ACLS also creates bubbles as previously observed in [14]. However, they represent less gas mass compared to VOF and CLSVOF. The presence of those bubbles can cause numerical problem in the simulation as it is not well-resolved by the mesh and produces very bad curvature evaluations. This effect can be related to the spurious
u max behaviour for VOF in Fig. 25b and the use of CLSVOF seems to reduce this phenomenon. In the case of SLS, those bubbles are rapidly turning to liquid as they go under mesh resolution, this corresponds to the first mass creation at t1 in Fig. 25a.
At t2, the film is so thin that it goes under mesh resolution which creates break up. This break up causes a loss of mass for ACLS while the SLS manage to maintain the film for a longer time by creating even more liquid mass. VOF, CLSVOF and ACLS create small under-resolved structures at the mesh limit when the film is too thin. This behaviour is inherent to the methods and is the same as for the sphere deformation case of Sec. 6.1.4.
The torus coalescence at t3 implies the highest peak in u max as a lot of small structures created during the film break up are merging and creating multiple source of momentum trough curvature contribution.
Finally all this event history of curvature computation failure and mass change has an impact on the final outcome observed at t4. The satellite is of different size and for VOF, not centred any more.

33

Figure 24: Shape for the four topology changes during the head on collision, t1 and t4 are represented on P1 while t2 and t3 are on P2 (see Fig. 23b for plane definition)

(a) V /V0

(b) u max

Figure 25: Temporal evolution of V /V0 and u max during the head on collision

34

(a) VOF

(b) CLSVOF

(c) SLS

(d) ACLS

Figure 26: Collision outcome at t = 2500 µs represented here with H on P1

(a) Ashgriz et al. (b) VOF (c) CLSVOF

(d) SLS

(e) ACLS

Figure 27: Satellite break up comparison with experiment [69]

In Fig.27 are compared the satellite break up obtained with the different methods and an experimental acquisition of [69]. The satellite mass is under-predicted while the two droplet mass is over-predicted as observed in [71] using SLS. This can be caused by capillary instabilities causing premature break-up compared to experiment. The SLS seems produces the biggest satellite but this is partly due to the mass gain of around 1.5 % observed in Fig.25a. The CLSVOF seems to provide a good trade off between conservation and accuracy.
6.4.2. Shear layer This last test case is a planar shear flow similar to [72] and reproduces critical
aspects of complex atomization configurations. Without regularizing effect such as viscosity or surface tension (W e =  and Oh = 0), the jet will break up in thin structures only impacted by convection. Small errors in the computation of f lead to

35

error in velocity which can cause severe stability issues. In [73], some of the methods could not reach a long physical time before the simulation breaks down. The set up is illustrated in Fig. 28 with the periodic box length L = 1 mm and the liquid shear layer thickness  = L/10. Here, the densities are chosen such that l/g = 1000 and the initial divergence-free velocity is defined as

L -4y u = U0 - 0.04 2 2 cos

2x L

exp

-2

y - h0 

2

m/s

(75)

v = 0.04 sin 2x exp -2 y - h0 2 m/s

(76)

L



with U0 is 2 m/s in the liquid and 30 m/s in the gas and h0 = L/5 the liquid shear center position.

g



l

g

L
Figure 28: Shear layer simulation set up
The simulation is performed until one of the methods fails. In our framework, all methods seemed to be robust but the ACLS which breaks down after t = 1.65 ms, while the others manage to reach the same physical time t = 2 ms as in [72]
In Fig. 29 are given isocontour of the four interface capturing methods at different times. While VOF and CLSVOF are behaving similarly at the beginning, the discrepancy is increasing with time. Moreover, SLS and ACLS are showing even more different behaviour compared to VOF-based methods. This shows how interface capturing methods impact the topology of a liquid jet under high convective effects when the structure are not properly captured anymore. In this test case it is difficult to conclude on what method is the best, even if the ACLS exhibits some stability problems. This issue arises when very thin structures are created and density is approximated poorly, leading to very high velocities without any diffusive process to damp them. It is also important to notice that SLS while robust has lost about 4% of mass during the whole simulation time while ACLS managed to maintain a mass error above 1%. This last
36

(a) t = 0.5 ms

(b) t = 1 ms

(c) t = 1.65 ms

(d) Temporal V /V0

Figure 29: Liquid layer isocontour for (a) t = 0.5 ms, (b) t = 1 ms, (c) t = 1.65 ms for VOF (red line), CLSVOF (orange line), SLS (blue line) and ACLS (green line) and (d) the temporal evolution of mass for the shear layer test case

test case enlightens that under-resolved structures behaviour which are present in atomization simulations will be highly impacted by the interface capturing choice. The outcome at a large physical time is thus completely different.
7. Conclusion
The comparison of four popular methods of the literature has been presented focusing on mass and momentum conservations, and geometrical accuracy. Overall, the interface capturing methods presented here are able to provide a good physical description of two-phase flows with high density ratio and capillarity effects, with specific strengths and weaknesses.

37

While VOF and CLSVOF are exactly mass conservative and show good momentum conservation, SLS provides a representation of the interface able to compute normal and curvature easily and with high accuracy even in dynamic cases. ACLS shows improvements in the mass and momentum conservation compared to SLS at the cost of a loss of geometrical accuracy which can be very severe at high resolution. For coarse to medium resolutions, ACLS accuracy is slightly better than VOF or CLSVOF for dynamic cases. The head-on collision has demonstrated the robustness of all methods, showing that they are all able to retrieve the satellite droplet. However, the atomization case has also shown that the mesh resolution has a great impact on the accuracy and the development of thin structures, all methods giving very different results for long times of simulation. This calls for further in-depth statistical analysis in such chaotic test cases. Overall, Coupling VOF with LS seems to be the most promising choice in a Cartesian finite volume framework as the conservation properties of VOF are preserved while curvature and normal are easier to compute and more accurate. The versatility of such strategy, taking advantage of the forces of each method, will be particularly of interest when additional physics is required, such as phase change. Our unified framework is in that sense the adequate vessel for such developments. It has to be reminded that our conclusions hold for this specific unified framework. Indeed, the under-resolved problems met in the head-on collision could be better handled by using local mesh refinement [7, 41, 14]. Moreover, our VOF and CLSVOF transport rely on dimensional splitting and the geometrical operations are straightforward on a Cartesian mesh. This is no longer true in unstructured meshes, and the ACLS method can be a good alternative to keep good accuracy and conservation.
As perspectives, some numerical aspects are still challenging and require further investigations. As an example, it could be interesting to explore the possibility of higher order computation of distance function in the ACLS method based on PDE [31], or a higher order reconstruction of the interface in the case of VOF and CLSVOF such as parabolas [60] and quadratic splines [74] in order to obtain a consistent curvature estimation in dynamic cases. Recent reinitialization modifications for SLS would also be useful, in order to enhance mass conservation [17].
8. Acknowledgements
The support of the ANR Project MIMETYC (ANR-17-CE22-0003) and SubSuperJet (ANR-14-CE22- 0014) is acknowledged. A part of this work was performed using HPC resources from the me´socentre computing center of Ecole CentraleSupe´lec and Ecole Normale Supe´rieure Paris- Saclay supported by CNRS and Re´gion Ile-deFrance. The authors would like to thank Romain Janodet, Vincent Moureau, Ghislain Lartigue and Robert Chiodi for fruitful discussions about Interface capturing methods and numerical implementation.
38

References
[1] S. O. Unverdi and G. Tryggvason. A front-tracking method for viscous, incompressible, multi-fluid flows. Journal of computational physics, 100(1):25­37, 1992.
[2] S. Popinet and S. Zaleski. A front-tracking algorithm for accurate representation of surface tension. International Journal for Numerical Methods in Fluids, 30(6):775­793, 1999.
[3] G. Tryggvason, B. Bunner, A. Esmaeeli, D. Juric, N. Al-Rawahi, W. Tauber, J. Han, S. Nas, and Y. J. Jan. A Front-Tracking Method for the Computations of Multiphase Flow. Journal of Computational Physics, 169(2):708­759, 2001.
[4] C. W. Hirt and B. D. Nichols. Volume of fluid (vof) method for the dynamics of free boundaries. Journal of computational physics, 39(1):201­225, 1981.
[5] W. J. Rider and D. B. Kothe. Reconstructing volume tracking. Technical Report 2, 1998.
[6] S. Osher and J. A. Sethian. Fronts propagating with curvature-dependent speed: Algorithms based on hamilton-jacobi formulations. Journal of computational physics, 79(1):12­49, 1988.
[7] S. Popinet. An accurate adaptive solver for surface-tension-driven interfacial flows. Journal of Computational Physics, 228(16):5838­5866, 2009.
[8] Mark Owkes and Olivier Desjardins. A mass and momentum conserving unsplit semi-lagrangian framework for simulating multiphase flows. Journal of Computational Physics, 332:21­46, 2017.
[9] V. Le Chenadec and H. Pitsch. A 3D unsplit Forward/Backward Volume-of-Fluid approach and coupling to the level set method. Journal of Computational Physics, 233(1):10­33, 2013.
[10] D. Zuzio, A. Orazzo, J. L. Estivale`zes, and I. Lagrange. A new efficient momentum preserving Level-Set/VOF method for high density and momentum ratio incompressible two-phase flows. Journal of Computational Physics, 410:109342, 2020.
[11] M. Raessi and H. Pitsch. Consistent mass and momentum transport for simulating incompressible interfacial flows with large density ratios using the level set method. Computers and Fluids, 63:70­81, 2012.
[12] S. Ghods and M. Herrmann. A consistent rescaled momentum transport method for simulating large density ratio incompressible multiphase flows using level set methods. Physica Scripta, 2013(T155):014050, 2013.
[13] R. Chiodi and O. Desjardins. A reformulation of the conservative level set reinitialization equation for accurate and robust simulation of complex multiphase flows. Journal of Computational Physics, 343:186­200, 2017.
39

[14] R. Janodet, G. Vaudor, Ghislain Lartigue, Pierre Be´nard, Vincent Moureau, Renaud Mercier, Safran Tech, and Jeunes Bois. An unstructured conservative levelset algorithm coupled with dynamic mesh adaptation for the computation of liquid-gas flows. preprint on HAL, 2019.
[15] D. Fuster, G. Agbaglah, C. Josserand, S. Popinet, and S. Zaleski. Numerical simulation of droplets, bubbles and waves: state of the art. Fluid dynamics research, 41(6):065001, 2009.
[16] R. R. Nourgaliev and T. G. Theofanous. High-fidelity interface tracking in compressible flows: Unlimited anchored adaptive level set. Journal of Computational Physics, 224(2):836­866, 2007.
[17] Z. Solomenko, P. D.M. Spelt, L. O´ Na´raigh, and P. Alix. Mass conservation and reduction of parasitic interfacial waves in level-set methods for the numerical simulation of two-phase flows: A comparative study. International Journal of Multiphase Flow, 95:235­256, 2017.
[18] T. Abadie, J. Aubin, and D. Legendre. On the combined effects of surface tension force calculation and interface advection on spurious currents within Volume of Fluid and Level Set frameworks. Journal of Computational Physics, 297:611­ 636, 2015.
[19] Y. Bazilevs, M. Hsu, J. Kiendl, R. Wu¨chner, and K. Bletzinger. 3D Simulation of Wind Turbine Rotors at Full Scale. Part II: Fluid ­ Structure Interaction Modeling with Composite Blades. International Journal for Numerical Methods in Fluids, 65(October 2010):236­253, 2011.
[20] D. Gerlach, G. Tomar, G. Biswas, and F. Durst. Comparison of volume-of-fluid methods for surface tension-dominant two-phase flows. International Journal of Heat and Mass Transfer, 49(3-4):740­754, 2006.
[21] M. Sussman, P. Smereka, and S. Osher. A level set approach for computing solutions to incompressible two-phase flow. Journal of Computational physics, 114(1):146­159, 1994.
[22] E. Olsson and G. Kreiss. A conservative level set method for two phase flow. Journal of computational physics, 210(1):225­246, 2005.
[23] M. Sussman and E. G. Puckett. A Coupled Level Set and Volume-of-Fluid Method for Computing 3D and Axisymmetric Incompressible Two-Phase Flows. Journal of Computational Physics, 162(2):301­337, 2000.
[24] G. Tryggvason, R. Scardovelli, and S. Zaleski. Direct numerical simulations of gas­liquid multiphase flows. Cambridge University Press, 2011.
[25] J. E. Pilliod Jr and E. G. Puckett. Second-order accurate volume-of-fluid algorithms for tracking material interfaces. Journal of Computational Physics, 199(2):465­502, 2004.
40

[26] F. Xiao, Y. Honma, and T. Kono. A simple algebraic interface capturing scheme using hyperbolic tangent function. International Journal for Numerical Methods in Fluids, 48(9):1023­1040, 2005.
[27] R. Scardovelli and S. Zaleski. Analytical relations connecting linear interfaces and volume fractions in rectangular grids. Journal of Computational Physics, 164(1):228­237, 2000.
[28] G. D. Weymouth and D. K.P. Yue. Conservative Volume-of-Fluid method for free-surface simulations on Cartesian-grids. Journal of Computational Physics, 229(8):2853­2865, 2010.
[29] R. Scardovelli and S. Zaleski. Interface reconstruction with least-square fit and split eulerian­lagrangian advection. International Journal for Numerical Methods in Fluids, 41(3):251­274, 2003.
[30] M. Owkes and O. Desjardins. A computational framework for conservative, threedimensional, unsplit, geometric transport with application to the volume-of-fluid (VOF) method. Journal of Computational Physics, 270:587­612, 2014.
[31] G. S. Jiang and D. Peng. Weighted ENO schemes for Hamilton-Jacobi equations. SIAM Journal on Scientific Computing, 21(6):2126­2143, 2000.
[32] M. Herrmann, G. Blanquart, and V. Raman. Flux corrected finite volume scheme for preserving scalar boundedness in reacting large-eddy simulations. AIAA journal, 44(12):2879­2886, 2006.
[33] J. O. McCaslin and O. Desjardins. A localized re-initialization equation for the conservative level set method. Journal of Computational Physics, 262:408­426, 2014.
[34] O. Desjardins, V. Moureau, and H. Pitsch. An accurate conservative level set/ghost fluid method for simulating turbulent atomization. Journal of Computational Physics, 227(18):8395­8416, 2008.
[35] T. Me´nard, S. Tanguy, and A. Berlemont. Coupling level set/vof/ghost fluid methods: Validation and application to 3d simulation of the primary break-up of a liquid jet. International Journal of Multiphase Flow, 33(5):510­524, 2007.
[36] A. J. Chorin. On the Convergence of Discrete Approximations to the NavierStokes Equations. Mathematics of Computation, 23(106):341, 1969.
[37] F. H. Harlow and J. E. Welch. Numerical calculation of time-dependent viscous incompressible flow of fluid with free surface. The physics of fluids, 8(12):2182­ 2189, 1965.
[38] O. Desjardins and V. Moureau. Methods for multiphase flows with high density ratio. Center for Turbulence Research Proceedings of the Summer Program, pages 313­322, 2010.
41

[39] J. Palmore and O. Desjardins. A volume of fluid framework for interface-resolved simulations of vaporizing liquid-gas flows. Journal of Computational Physics, 399:108954, 2019.
[40] X. D. Liu, R. P. Fedkiw, and M. Kang. A Boundary Condition Capturing Method for Poisson's Equation on Irregular Domains. Journal of Computational Physics, 160(1):151­178, 2000.
[41] M. Herrmann. A balanced force refined level set grid method for two-phase flows on unstructured flow solver grids. Journal of Computational Physics, 227(4):2674­2706, 2008.
[42] S. Popinet. Numerical models of surface tension. Annual Review of Fluid Mechanics, 50:49­75, 2018.
[43] M. M Francois, S. J. Cummins, E. D. Dendy, D. B. Kothe, J. M. Sicilian, and M. W. Williams. A balanced-force algorithm for continuous and sharp interfacial surface tension models within a volume tracking framework. Journal of Computational Physics, 213(1):141­173, 2006.
[44] M. Sussman and M. Ohta. A stable and efficient method for treating surface tension in incompressible two-phase flow. SIAM Journal on Scientific Computing, 31(4):2447­2471, 2009.
[45] S. Balay, W. D. Gropp, L. Curfman McInnes, and B. F. Smith. Efficient management of parallelism in object oriented numerical software libraries. In E. Arge, A. M. Bruaset, and H. P. Langtangen, editors, Modern Software Tools in Scientific Computing, pages 163­202. Birkha¨user Press, 1997.
[46] R. Goldman. Curvature formulas for implicit curves and surfaces. Computer Aided Geometric Design, 22(7 Spec. Iss.):632­658, 2005.
[47] M. Coquerelle and S. Glockner. A fourth-order accurate curvature computation in a level set framework for two-phase flows subjected to surface tension forces. Journal of Computational Physics, 305:838­876, 2016.
[48] S. J. Cummins, M. M. Francois, and D. B. Kothe. Estimating curvature from volume fractions. Computers & structures, 83(6-7):425­434, 2005.
[49] E. Marchandise, P. Geuzaine, N. Chevaugeon, and J. F. Remacle. A stabilized finite element method using a discontinuous level set approach for the computation of bubble dynamics. Journal of Computational Physics, 225(1):949­974, 2007.
[50] M. W. Williams. Numerical methods for tracking interfaces in surface tension in 3-D mold-filling processes. University of California, Davis, 2000.
[51] G. Bornia, A. Cervone, S. Manservisi, R. Scardovelli, and S. Zaleski. On the properties and limitations of the height function method in two-dimensional cartesian geometry. Journal of Computational Physics, 230(4):851­862, 2011.
42

[52] M. Sussman. A second order coupled level set and volume-of-fluid method for computing growth and collapse of vapor bubbles. Journal of Computational Physics, 187(1):110­136, 2003.
[53] J. Herna´ndez, J. Lo´pez, P. Go´mez, C. Zanzi, and F. Faura. A new volume of fluid method in three dimensions--part i: Multidimensional advection method with face-matched flux polyhedra. International Journal for Numerical Methods in Fluids, 58(8):897­921, 2008.
[54] P. Liovic, M. Francois, M. Rudman, and R. Manasseh. Efficient simulation of surface tension-dominated flows through enhanced interface geometry interrogation. Journal of Computational Physics, 229(19):7520­7544, 2010.
[55] M. Owkes and O. Desjardins. A mesh-decoupled height function method for computing interface curvature. Journal of Computational Physics, 281:285­300, 2015.
[56] J. Lo´pez and J. Herna´ndez. On reducing interface curvature computation errors in the height function technique. Journal of Computational Physics, 229(13):4855­ 4868, 2010.
[57] M. Owkes and O. Desjardins. A discontinuous galerkin conservative level set scheme for interface capturing in multiphase flows. Journal of Computational Physics, 249:275­302, 2013.
[58] J. P. Gois, A. Nakano, L. G. Nonato, and G. C. Buscaglia. Front tracking with moving-least-squares surfaces. Journal of Computational Physics, 227(22):9643­ 9669, 2008.
[59] M. Owkes, E. Cauble, J. Senecal, and R. A. Currie. Importance of curvature evaluation scale for predictive simulations of dynamic gas ­ liquid interfaces. Journal of Computational Physics, 365:37­55, 2018.
[60] Yuriko Renardy and Michael Renardy. Prost: a parabolic reconstruction of surface tension for the volume-of-fluid method. Journal of computational physics, 183(2):400­421, 2002.
[61] C. Min and F. Gibou. Robust second-order accurate discretizations of the multidimensional heaviside and dirac delta functions. Journal of Computational Physics, 227(22):9686­9695, 2008.
[62] S. T. Zalesak. Fully multidimensional flux-corrected transport algorithms for fluids. Journal of computational physics, 31(3):335­362, 1979.
[63] R. J. LeVeque. High-resolution conservative algorithms for advection in incompressible flow. SIAM Journal on Numerical Analysis, 33(2):627­665, 1996.
[64] G. H. Miller and P. Colella. A conservative three-dimensional Eulerian method for coupled solid-fluid shock capturing. Journal of Computational Physics, 183(1):26­82, 2002.
43

[65] M. Bussmann, D. B. Kothe, and J. M. Sicilian. Modeling high density ratio incompressible interfacial flows. In Fluids Engineering Division Summer Meeting, volume 36150, pages 707­713, 2002.
[66] D. Gueyffier, J. Li, A. Nadim, R. Scardovelli, and S. Zaleski. Volume-of-Fluid Interface Tracking with Smoothed Surface Stress Methods for Three-Dimensional Flows. Journal of Computational Physics, 152(2):423­456, 1999.
[67] O. Desjardins and H. Pitsch. A spectrally refined interface approach for simulating multiphase flows. Journal of Computational Physics, 228(5):1658­1677, 2009.
[68] A. Prosperetti. Motion of two superposed viscous fluids. The Physics of Fluids, 24(7):1217­1223, 1981.
[69] N. Ashgriz and J. Y. Poo. Coalescence and separation in binary collisions of liquid drops. Journal of Fluid Mechanics, 221:183­204, 1990.
[70] G. Finotello, J. T. Padding, N. G. Deen, A. Jongsma, F. Innings, and J. A.M. Kuipers. Effect of viscosity on droplet-droplet collisional interaction. Physics of Fluids, 29(6), 2017.
[71] S. Tanguy and A. Berlemont. Application of a level set method for simulation of droplet collisions. International Journal of Multiphase Flow, 31(9):1015­1035, 2005.
[72] A. Asuri Mukundan, T. Me´nard, J. Ce´sar Bra¨ndle de Motta, and A. Berlemont. A 3D Moment of Fluid method for simulating complex turbulent multiphase flows. Computers and Fluids, 198:104364, 2020.
[73] D. Fuster, T. Arrufat, M. Crialesi-Esposito, Y. Ling, L. Malan, S. Pal, R. Scardovelli, G. Tryggvason, and S. Zaleski. A momentum-conserving, consistent, Volume-of-Fluid method for incompressible flow on staggered grids. arXiv, 2018.
[74] S. V. Diwakar, S. K. Das, and T. Sundararajan. A Quadratic Spline based Interface (QUASI) reconstruction algorithm for accurate tracking of two-phase flows. Journal of Computational Physics, 228(24):9107­9130, 2009.
44

