arXiv:2106.01062v1 [cs.FL] 2 Jun 2021

Hilbert's spacefilling curve described by automatic, regular, and synchronized sequences
Jeffrey Shallit School of Computer Science
University of Waterloo Waterloo, ON N2L 3G1
Canada shallit@uwaterloo.ca
June 3, 2021
Abstract
We describe Hilbert's spacefilling curve in several different ways: as an automatic sequence of directions, as a regular and synchronized sequence of coordinates of lattice points encountered, and as an automatic bitmap image.
1 Introduction
In 1891 David Hilbert famously described the construction of a continuous curve that fills the unit square [13]. So many papers on this topic have been published since then (for example, see [9, 10, 16, 8]) that it seems difficult to say anything new about it. Nevertheless, we'll try. We will describe the curve in three different ways: as a 4-automatic sequence, as a 4-regular sequence, and as a (4, 2, 2)-synchronized sequence. An interesting feature of our approach is that in each case, we "guess" the correct representation, and then use the theorem-prover Walnut to prove our guess is correct [15].
Instead of filling the unit square, we will treat a version that visits every non-negative pair of integers, starting from the origin (0, 0). At each stage we take the figure constructed so far, make four copies, flip each copy appropriately (Figure 1), and join them together, as illustrated in Figure 2.
Let us agree to write U for up, D for down, R for right, and L for left. Thus An, the n'th generation of the curve, can be written as a string over the alphabet {U, D, R, L}, and it is easy to see that in fact |An| = 4n - 1. Note that the moves inserted to connect the pieces depend on the parity: to go from An to An+1 when n is odd, we successively insert RUL to connect the pieces, but when n is even, we successively insert URD.
1

The first four generations of the curve are encoded as follows:
A0 = A1 = URD A2 = URDRRULURULLDLU A3 = URDRRULURULLDLUURULUURDRURDDLDRRRULUURDRURDDLDRDDLULLDRDLDRRURD
Notice that An is a prefix of An+1 for all n  0. So we can let
HC = (hn)n0 = URDRRULURULLD · · ·
be the unique infinite string of which A1, A2, A3, . . . are all prefixes. Furthermore An is a path from (0, 0) to (2n - 1, 0) if n is odd, and a path from (0, 0) to
(0, 2n - 1) if n is even.

Figure 1: How one generation follows from the previous.

2 By recurrence

We now wish to write a recurrence for the An. We define the codings tD, tH as follows: tD is a flip about the main diagonal, and hence tD(UDRL) = RLUD, while tH is a 180 rotation, that is, tH(UDRL) = DULR.
This gives us a formula to compute An, namely

A0 =

A2n+1 = A2n U tD(A2n) R tD(A2n) D tH (A2n)

(1)

A2n+2 = A2n+1 R tD(A2n+1) U tD(A2n+1) L tH (A2n+1)

for n  0.

2

Figure 2: The first three generations of the Hilbert curve. 3

3 As image of fixed point of morphism or automatic sequence

We use the notation k = {0, 1, . . . , k - 1}, and (n)k denotes the canonical base-k representation of n, starting with the most significant digit.
Recall that a sequence (an)n0 is k-automatic if its k-kernel
{(aken+i)n0 : e  0, 0  i < ke}
is of finite cardinality [3, §6.6]. Alternatively, (an)n0 is k-automatic if there is a deterministic finite automaton with output (DFAO) that reads (n)k as input and reaches a state with output an.
The fact that the length of the i'th generation Ai is so close to 4i strongly suggests that H might be 4-automatic.
To try to determine the DFAO, we can use a "guessing procedure" based on the MyhillNerode theorem [17, §3.9] to find a good candidate, and then use a theorem-prover to prove that our guess is correct. We repeat this strategy throughout the paper.
We find an 8-state DFAO (Q, , , , q0,  ) as follows:
· Q = {0, 1, . . . , 7};
·  = 4;
·  = {U, R, D, L};
· q0 = 0;
· (q, i) and  are defined as in Table 1.

H H

i

q

H H H

0

1

2

3

 (q)

H

0

0123 U

1

1045 R

2

1046 D

3

7650 R

4

0127 L

5

6731 U

6

6732 L

7

7654 D

Table 1: DFAO for the sequence HC.
In Walnut this DFAO can be represented by the name HC. Because Walnut currently does not allow letters as output, we use the recoding of the output given by the correspondence U  0, R  1, D  2, L  3.
4

We can verify that this automaton is correct by using Walnut. From Eq. (1), it suffices to check that for all n  0 we have

HC[0] = U

(2)

HC[4n..2 · 4n - 1] = tD(HC[0..4n - 1])

(3)

HC[2 · 4n..3 · 4n - 2] = tD(HC[0..4n - 2])

(4)

HC[3 · 4n - 1] = L, if n odd;

(5)

D, if n even;

HC[3 · 4n..4n+1 - 2] = tH(HC[0..4n - 2])

(6)

HC[4n - 1] = R, if n odd;

(7)

U, if n even.

which we can do with Walnut as follows:

reg power4 msd_4 "0*10*": reg evenpower4 msd_4 "0*1(00)*": reg oddpower4 msd_4 "0*10(00)*": eval test2 "?msd_4 HC[0]=@0": eval test3 "?msd_4 Ax,t ($power4(x) & t<x) =>
((HC[t]=@0 <=> HC[x+t]=@1) & (HC[t]=@1 <=> HC[x+t]=@0) &(HC[t]=@2 <=> HC[x+t]=@3) & (HC[t]=@3 <=> HC[x+t]=@2))": eval test4 "?msd_4 Ax,t ($power4(x) & t+1<x) => ((HC[t]=@0 <=> HC[2*x+t]=@1) & (HC[t]=@1 <=> HC[2*x+t]=@0) &(HC[t]=@2 <=> HC[2*x+t]=@3) & (HC[t]=@3 <=> HC[2*x+t]=@2))": eval test5 "?msd_4 Ax ($oddpower4(x) => HC[3*x-1]=@3) & ($evenpower4(x) => HC[3*x-1]=@2)": eval test6 "?msd_4 Ax,t ($power4(x) & t+1<x) => ((HC[t]=@0 <=> HC[3*x+t]=@2) & (HC[t]=@1 <=> HC[3*x+t]=@3) &(HC[t]=@2 <=> HC[3*x+t]=@0) & (HC[t]=@3 <=> HC[3*x+t]=@1))": eval test7 "?msd_4 Ax ($oddpower4(x) => HC[x-1]=@1) & ($evenpower4(x) => HC[x-1]=@0)":
and everything returns true.

4 As system of coordinates and a 4-regular sequence
Recall that a k-regular sequence is a generalization of automatic sequence. Being k-regular means there is a finite subset S of the k-kernel such that each element of the k-kernel can be written as a linear combination of elements of S [1, 2].

5

Suppose we start at (x0, y0) := (0, 0) and perform unit steps according to the letters specified by HC. Thus we have

(1, 0),   (-1, 0), (xn+1, yn+1) = (xn, yn) + (0, 1),   (0, -1),

if HC[n] = R; if HC[n] = L; if HC[n] = U; if HC[n] = D;

This gives us a sequence of ordered pairs specifying the x-y coordinates of the n'th point along the curve. Table 2 gives the few values of ((xn, yn))n0. The sequence (xn)n0 is sequence A059252 and (yn)n0 is A059253 in [19].

n 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 xn 0 0 1 1 2 3 3 2 2 3 3 2 1 1 0 0 yn 0 1 1 0 0 0 1 1 2 2 3 3 3 2 2 3

Table 2: First few values of (xn, yn) for the Hilbert curve.

In this section we show that (xn, yn)n0, the sequence of coordinates traversed by the Hilbert curve, is 4-regular. Actually, this follows immediately from [1, Theorem 3.1], but applying this theorem is somewhat messy.
Recall that a linear representation for a k-regular sequence (an)n0 consists of a row vector v, a matrix-valued morphism , and a column vector w such that an = v((n)k)w for all n  0. The dimension of w is called the rank of the linear representation; see [6].
A "guessing procedure" for k-regular sequences suggests that the 4-kernel of (xn)n0 is contained in the linear span of the 5 subsequences

{(xn)n0, (x4n)n0, (x4n+1)n0, (x4n+2)n0, (x16n)n0},

and the same for (yn)n0. We can then "guess" a number of candidate relations for elements of the 4-kernel for both xn and yn. Assuming the guessed relations are correct, by standard techniques, we can deduce a rank-5 base-4 linear representation for ((xn, yn))n0, namely:
(xn, yn) = v((n)4)w,

where (n)4 is the base-4 representation of n and

 0 0 0 0 -4 

 0 0 0 0 -4 

v=

00010 00110

;

 1 0 -1 -1

(0)

=

 

0

0

1

0

 

0

0

0

1

4

0

 

;

0

 

 0 0 0 -1

(1)

=

 

1

-2

-3

-2

 

0

2

3

3

0

4

 

;

0

 

01 1 1 1

01 1 1 1

6

 0 0 0 0 -4 

 0 -2 -2 -3 0 

(2)

=

 

0

0

-1

0

0

 

;

 

1

2

3

3

4

 

01 1 1 1

 0 0 0 0 -4 

 1 -3 -2 -2 1 

(3)

=

 

-1

2

1

2

-4

 

;

 

1

1

1

0

7

 

01111

1

0

w

=

 

0

 

.

 

0

 

0

We now prove that this is indeed a linear representation for ((xn, yn))n0, in a somewhat roundabout way.
Recall that a finite-state transducer T maps input strings to output strings. The output associated with an input are the string or strings arising from the concatenation of the outputs of all transitions, provided processing the string ends in a final state of T . We allow a transducer to be nondeterministic. A transducer is functional if every input results in at most one output [17, §3.5]. We need a lemma.

Lemma 1. Let (f (n))n0 be a k-regular sequence, and let k = {0, 1, . . . , k - 1}. Let T = (Q, k, k, , q0, F, ) be a nondeterministic functional finite-state transducer with transitions on single letters only, but allowing arbitrary words as outputs on each transition. More precisely,

· Q = {q0, . . . , qr-1}; ·  : Q × k  Q is the transition function; and ·  : Q × k  k is the output function; · F is a set of final states.

Let the domain of  and  be extended to k in the obvious way. Define g(n) = f (T ((n)k))). Then (g(n))n0 is also a k-regular sequence.
Proof. Let (v, µ, w) be a rank-s linear representation for f . We create a linear representation (v , µ , w ) for g.
The idea is that µ (a), 0  a < k, is an n × n matrix, where n = rs. It is easiest to think of µ (a) as an r × r matrix, where each entry is itself an s × s matrix. In this interpretation, (µ (a))i,j = µ((qi, a)) if (qi, a) = qj.
An easy induction now shows that if (qi, x) = qj and (qi, x) = y, then (µ (x))i,j = µ(y). If we now let v be the vector [v 0 · · · 0] and w be the column vector with w's in the positions of the final states and 0's otherwise, then it follows that v µ (x)w = vµ(T (x))w. This gives a linear representation for (g(n))n0.
In particular, there is a simple finite-state transducer that, when applied to the base-k representation of n gives the representation of n + 1. For k = 4 this transducer is depicted in Figure 3 below:

7

0/0 1/1 2/2 3/3

1/1

0/0

2/2 3/3

q1
1/2

0/1

1/2 2/3

3/0

2/3

q0

3/10

q2

Figure 3: A transducer mapping (n)4 to (n + 1)4

So from the guessed linear representation for (xn)n0 we easily deduce a linear representation for (xn+1)n0. It is of rank 15.
Now from these two linear representations, we can use an obvious "tensor product"-style
construction to get the linear representation for the first difference sequence (xn+1 - xn)n0. This produces a linear representation of rank 20. We can do the same thing with (yn)n0.
Now we can use the Berstel-Reutenauer minimization algorithm [6, §3.3] for linear representations to get an equivalent minimized linear representation (v ,  , w ) for ((xn+1 - xn, yn+1 - yn))n0. Here is what it looks like:

v=

100 010

;

1 0 0  (0) =  0 1 0  ;
010

0 1 0  (1) =  1 0 0  ;
100

0 0 1

 -1 1 -1 

0

 (2) =  1 -1 1  ;  (3) =  0 0 -1  ; w =  1  .

1 -1 1

0 -1 0

0

Now we use the "semigroup trick" (see [12, pp. 951,954]) to find an automaton for the first difference sequence ((xn+1 - xn, yn+1 - yn))n0 and prove that the resulting automaton has only finitely many states. And no surprise--it is the same automaton we started with, the one in Section 3. This shows that our guessed linear representation for ((xn, yn))n0 was indeed correct.

8

The advantage to the representation as a 4-regular sequence is that we can compute (xn, yn) in time linear in the number of bits of n: we express n in base 4, and then multiply the appropriate vectors and O(log4 n) matrices.
5 As a synchronized function
Finally, perhaps the most interesting representation of the Hilbert curve is that n and (xn, yn) are synchronized, but only if we represent n, xn, and yn in the right way. The right way is to represent n in base 4, but represent xn and yn in base 2! In other words, the triple (n, xn, yn) is (4, 2, 2)-synchronized [11].
Here our guessing procedure guesses a 10-state automaton HS = (Q, , , q0, F ), given below. Here
· Q = {0, 1, . . . , 9};
·  = 4 × 2 × 2; · q0 = 0; · F = {0, 2, 3, 5, 6, 7};
and  is represented in Table 3. (All transitions not listed go to a dead state that is not accepting, which just loops to itself on each input.)
· verify that indeed HS represents a synchronized function:
­ for each n there is a pair (x, y) such that HS[n][x][y] is true ­ for each n there is only one pair (x, y) such that HS[n][x][y] is true
· verify that HS[0][0][0] = 0;
· verify that if HS[n][x][y] and HS[n + 1][x ][y ] both hold, then (x - x, y - x) corresponds to the appropriate move U, D, R, L computed by the automaton in Section 3.
eval fn1 "An Ex,y HS[?msd_4 n][x][y]=@1": # f(n) takes an ordered pair value for each n
eval fn2 "An,x,y,xp,yp (HS[?msd_4 n][x][y]=@1 & HS[?msd_4 n][xp][yp]=@1) => (x=xp & y=yp)": # f(n) takes only one value for each n
eval check_up "An (HC[?msd_4 n]=@0 <=> Ex,xp,y,yp HS[?msd_4 n][x][y]=@1 & HS[?msd_4 n+1][xp][yp]=@1 & xp=x & yp=y+1)":
eval check_right "An (HC[?msd_4 n]=@1 <=> Ex,xp,y,yp HS[?msd_4 n][x][y]=@1 & HS[?msd_4 n+1][xp][yp]=@1 & xp=x+1 & yp=y)":
eval check_down "An (HC[?msd_4 n]=@2 <=> Ex,xp,y,yp HS[?msd_4 n][x][y]=@1 &
9

HS[?msd_4 n+1][xp][yp]=@1 & xp=x & yp+1=y)":

eval check_left "An (HC[?msd_4 n]=@3 <=> Ex,xp,y,yp HS[?msd_4 n][x][y]=@1 & HS[?msd_4 n+1][xp][yp]=@1 & xp+1=x & yp=y)":

and Walnut returns true. Finally, we can use Walnut to verify that every pair of natural numbers (x, y) is hit by
one and exactly one n, so our curve is indeed space-filling:

eval allhit "Ax,y En HS[?msd_4 n][x][y]=@1": eval hitonce "An,np,x,y (HS[?msd_4 n][x][y]=@1 & HS[?msd_4 np][x][y]=@1)
=> (?msd_4 n=?msd_4 np)":
and Walnut returns true for both.

q t = [i, j, k] (q, t) q t = [i, j, k] (q, t)

0 [0, 0, 0]

0 5 [0, 0, 0]

5

0 [1, 0, 1]

3 5 [1, 0, 1]

9

0 [1, 1, 0]

1 5 [1, 1, 0]

6

0 [2, 1, 1]

5 5 [2, 1, 1]

0

0 [3, 0, 1]

4 5 [3, 0, 1]

7

0 [3, 1, 0]

2 5 [3, 1, 0]

8

1 [0, 0, 0]

3 6 [0, 0, 0]

9

1 [1, 1, 0]

6 6 [1, 1, 0]

1

1 [2, 1, 1]

6 6 [2, 1, 1]

1

1 [3, 0, 1]

7 6 [3, 0, 1]

4

2 [0, 1, 1]

4 7 [0, 1, 1]

8

2 [1, 0, 1]

8 7 [1, 1, 0]

4

2 [2, 0, 0]

8 7 [2, 0, 0]

4

2 [3, 1, 0]

9 7 [3, 0, 1]

1

3 [0, 0, 0]

1 8 [0, 1, 1]

7

3 [1, 0, 1]

9 8 [1, 0, 1]

2

3 [2, 1, 1]

9 8 [2, 0, 0]

2

3 [3, 1, 0]

8 8 [3, 1, 0]

3

4 [0, 1, 1]

2 9 [0, 0, 0]

6

4 [1, 1, 0]

7 9 [1, 0, 1]

3

4 [2, 0, 0]

7 9 [2, 1, 1]

3

4 [3, 0, 1]

6 9 [3, 1, 0]

2

Table 3: The synchronized automaton for coordinates of Hilbert's curve.
From the synchronized automaton, given (n)4 = a1a2 · · · at, the base-4 representation of n, we can easily determine (xn, yn), by intersecting the automaton with an automaton accepting those strings of the form [a1, , ][a2, , ] · · · [at, , ], where  denotes either 0 or
10

1. In the resulting automaton, only one path is accepting, and it can easily be found in O(t) time through breadth-first or depth-first search.
But the reverse is also true: given the base-2 representations of (x, y), we can easily determine the n for which (xn, yn) = (x, y), using the same idea.
6 As an automatic bitmap image
With the aid of the synchronized representation for HS, we can easily produce a bitmap image of each generation of the Hilbert curve, as previously done in [18, Fig. 6].
To do so, we "expand" the curve, inserting rows and column that are blank, except for when they connect two consecutive points of the curve. The following Walnut code produces a DFA $hp describing a bitmap image of the Hilbert curve. def even "Em n=2*m": def odd "Em n=2*m+1": def hp "($even(x) & $even(y)) | ($even(x) & $odd(y) & (En (HS[?msd_4 n][x/2][(y-1)/2]=@1 & HS[?msd_4 n+1][x/2][(y+1)/2]=@1) |(HS[?msd_4 n][x/2][(y+1)/2]=@1 & HS[?msd_4 n+1][x/2][(y-1)/2]=@1)) | ($odd(x) & $even(y) & (En (HS[?msd_4 n][(x-1)/2][y/2]=@1 & HS[?msd_4 n+1][(x+1)/2][y/2]=@1) |(HS[?msd_4 n][(x+1)/2][y/2]=@1 & HS[?msd_4 n+1][(x-1)/2][y/2]=@1))":
For example, for generation 7 we get the image in Figure 4.
Figure 4: Generation 7 of the Hilbert curve. 11

Acknowledgments
Three other descriptions of the Hilbert curve have some commonalities with the approach given here. Bially gave a state diagram similar to an automaton [7]. Gosper [5, Item 115, pp. 52­53] gave an iterative measure to determine (xn, yn) from the base-2 expansion of n. And Arndt [4, §1.31.1] also gave a description in terms of iterated morphisms, but not quite the same as given here.
I thank Jean-Paul Allouche for helpful discussions.
References
[1] J.-P. Allouche and J. O. Shallit. The ring of k-regular sequences. Theoret. Comput. Sci. 98 (1992), 163­197.
[2] J.-P. Allouche and J. O. Shallit. The ring of k-regular sequences, II. Theoret. Comput. Sci. 307 (2003), 3­29.
[3] J.-P. Allouche and J. Shallit. Automatic Sequences: Theory, Applications, Generalizations. Cambridge University Press, 2003.
[4] J. Arndt. Matters Computational--Ideas, Algorithms, Source Code. Springer, 2011.
[5] M. Beeler, R. W. Gosper, and R. Schroeppel. Hakmem. MIT Artificial Intelligence Laboratory, Report AIM 239, February 1972. Available at https://w3.pppl.gov/ ~hammett/work/2009/AIM-239-ocr.pdf.
[6] J. Berstel and C. Reutenauer. Noncommutative Rational Series with Applications, Vol. 137 of Encyclopedia of Mathematics and Its Applications. Cambridge University Press, 2010.
[7] T. Bially. Space-filling curves: their generation and their application to bandwidth reduction. IEEE Trans. Info. Theory IT-15 (1969), 658­664.
[8] G. Breinholt and C. Schierz. Algorithm 781: Generating Hilbert's space-filling curve by recursion. ACM Trans. Math. Software 24 (1998), 184­189.
[9] A. R. Butz. Convergence with Hilbert's space filling curve. J. Comput. System Sci. 3 (1969), 128­146.
[10] A. R. Butz. Alternative algorithm for Hilbert's space-filling curve. IEEE Trans. Comput. 20 (1971), 424­426.
[11] A. Carpi and C. Maggi. On synchronized sequences and their separators. RAIRO Inform. Th´eor. App. 35 (2001), 513­524.
12

[12] C. F. Du, H. Mousavi, L. Schaeffer, and J. Shallit. Decision algorithms for Fibonacciautomatic words III: enumeration and abelian properties. Int. J. Found. Comput. Sci. 27 (2016) 943­963.
[13] D. Hilbert. U¨ ber die stetige Abbildung einer Linie auf ein Fla¨chenstu¨ck. Math. Annalen 38 (1891), 459­460.
[14] H. V. Jagadish. Analysis of the Hilbert curve for representing two-dimensional space. Info. Process. Letters 62 (1997), 17­22.
[15] H. Mousavi. Automatic theorem proving in Walnut, 2016. Preprint available at http: //arxiv.org/abs/1603.06017.
[16] H. Sagan. Space-Filling Curves. Springer, 1994. [17] J. Shallit. A Second Course in Formal Languages and Automata Theory. Cambridge
University Press, 2009. [18] J. O. Shallit and J. Stolfi. Two methods for generating fractals. Computers & Graphics
13 (1989), 185­191. [19] N. J. A. Sloane et al. The On-Line Encyclopedia of Integer Sequences, 2021. Available
at https://oeis.org.
13

