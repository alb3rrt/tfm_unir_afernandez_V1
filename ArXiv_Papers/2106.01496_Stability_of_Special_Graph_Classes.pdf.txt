arXiv:2106.01496v1 [cs.CC] 2 Jun 2021

Stability of Special Graph Classes
Robin Weishaupt and J¨org Rothe
Institut fu¨r Informatik, Heinrich-Heine-Universit¨at Du¨sseldorf, Du¨sseldorf, Germany robin.weishaupt@hhu.de, rothe@hhu.de
Abstract. Frei et al. [6] showed that the problem to decide whether a graph is stable with respect to some graph parameter under adding or removing either edges or vertices is 2P-complete. They studied the common graph parameters  (independence number),  (vertex cover number),  (clique number), and  (chromatic number) for certain variants of the stability problem. We follow their approach and provide a large number of polynomial-time algorithms solving these problems for special graph classes, namely for graphs without edges, complete graphs, paths, trees, forests, bipartite graphs, and co-graphs.
Keywords: Computational Complexity · Graph Theory · Stability · Robustness · Colorability · Vertex Cover · Independent Set
1 Introduction
Frei et al. [6] comprehensively studied the problem of how stable certain central graph parameters are when a given graph is slightly modified, i.e., under operations such as adding or deleting either edges or vertices. Given a graph parameter  (like, e.g., the independence number or the chromatic number), they formally introduced the problems -Stability, -VertexStability, Unfrozenness, and -VertexUnfrozenness and showed that they are, typically, 2P-complete, that is, they are complete for the complexity class known as "parallel access to NP," which was introduced by Papadimitriou and Zachos [18] and intensely studied by, e.g., Wagner [21,22], Hemaspaandra et al. [8,10], and Rothe et al. [20]; see the survey by Hemaspaandra et al. [9].1
Furthermore, Frei et al. [6] proved that some more specific versions of these problems, namely k--Stability and k--VertexStability, are NP-complete for k = 3 and DP-complete for k  4, respectively, where DP was introduced by Papadimitriou and Yannakakis [17] as the class of problems that can be written as the difference of NP problems.
1 2P is contained in the second level of the polynomial hierarchy and contains the problems that can be solved in polynomial time by an algorithm that accesses its NP oracle in parallel (i.e., it first computes all its queries and then asks them all at once and accepts its input depending on the answer vector). Alternatively, 2P = PNP[O(log n)] can be viewed as the class of problems solvable in polynomial time via adaptively accessing its NP oracle (i.e., computing the next query depending on the answer to the previous query) logarithmically often (in the input size).

2

R. Weishaupt and J. Rothe

Table 1. Overview of P results established for seven special graph classes in this paper. E stands for the edge-related problem and V for the vertex-related problem.

I

K

P

T

F

B

C

Stability E Thm. 6 Prop. 2 Thm. 7 Cor. 6 Thm. 8 Cor. 7 Cor. 13



V Thm. 6 Cor. 4 Thm. 7 Cor. 6 Thm. 8 Cor. 7 Thm. 18

Unfrozenness Cor. 3 Cor. 5 Prop. 4 Cor. 10 Cor. 10 Cor. 9 Cor. 15

Stability E Thm. 6 Prop. 2 Thm. 7 Cor. 6 Thm. 8 Cor. 7 Cor. 14



V Thm. 6 Cor. 4 Thm. 7 Cor. 6 Thm. 8 Cor. 7 Cor. 11

Unfrozenness Cor. 3 Cor. 5 Prop. 4 Cor. 10 Cor. 10 Thm. 13 Cor. 15

Stability E Thm. 6 Prop. 2 Thm. 7 Cor. 6 Thm. 8 Cor. 7 Thm. 20



V Thm. 6 Cor. 4 Thm. 7 Cor. 6 Thm. 8 Cor. 7 Cor. 12

Unfrozenness Cor. 3 Cor. 5 Prop. 3 Prop. 5 Thm. 9 Cor. 8 Cor. 16

Stability E Thm. 6 Prop. 2 Thm. 7 Cor. 6 Thm. 8 Cor. 7 Thm. 19



V Thm. 6 Cor. 4 Thm. 7 Cor. 6 Thm. 8 Cor. 7 Thm. 17

Unfrozenness Prop. 1 Cor. 5 Prop. 3 Prop. 5 Thm. 9 Thm. 12 Thm. 21

Overall, the results of Frei et al. [6] indicate that these problems are rather intractable and there exist no efficient algorithms solving them exactly. Considering the vast number of real-world applications for these problems mentioned by Frei et al. [6]--e.g., the design of infrastructure, coloring algorithms for biological networks [15,13] or for complex information, social, and economic networks [12], etc.--these results are rather disappointing and unsatisfying.
This obstacle motivates us to study whether there are scenarios that allow for efficient solutions to these problems which in general are intractable. Our work is based on the assumption that most of the real-world applications of stability of graph parameters do not use arbitrarily complex graphs but may often be restricted to certain special graph classes. Consequently, our studies show that--despite the completeness results by Frei et al. [6]--there are tractable solutions to these problems when one limits the scope of the problem to a special graph class. We study seven different classes of special graphs: empty graphs consisting of only isolated vertices and no edges (I), complete graphs that have all possible edges (K), paths (P), trees (T ), forests (F ), bipartite graphs (B), and co-graphs (C). For each such class, we study twelve different problems:
­ stability, vertex-stability, and unfrozenness ­ for the four graph parameters , , , and .
In total, we thus obtain the 84 P membership results shown in Table 1, which gives the theorem, proposition, or corollary corresponding to each such P result. This can be useful for real-world applications when knowledge about the stability, vertex-stability, or unfrozenness of a graph with respect to a certain graph parameter is required and graphs with such a special structure may typically occur in this application.

2 Preliminaries

Stability of Special Graph Classes

3

We follow the notation of Frei et al. [6] and briefly collect the relevant notions here (referring to their paper [6] for further discussion). Let G be the set of all undirected, simple graphs without loops. For G  G, we denote by V (G) its vertex set and by E(G) its edge set; by G its complementary graph with V (G) = V (G) and E(G) = {{v, w}  V (G) × V (G) | v = w  {v, w} / E(G)}. For v  V (G), e  E(G), and e  E(G), let G-v, G-e, and G+e, respectively, denote the graphs that result from G by deleting v, deleting e, and adding e.
A graph parameter is a map  : G  N. We focus on the prominent graph parameters  (the size of a maximum independent set),  (the size of a minimum vertex cover),  (the chromatic number, i.e., the minimum number of colors needed to color the vertices of a graph so that no two adjacent vertices have the same color), and  (the size of a maximum clique).
For a graph parameter , an edge e  E(G) is said to be -stable if (G) = (G - e), i.e., (G) remains unchanged after e is deleted from G. Otherwise (i.e., if (G) is changed by deleting e), e is said to be -critical. Stability and criticality are defined analogously for a vertex v  V (G) instead of an edge e  E(G).
A graph is said to be -stable if all its edges are -stable. A graph whose vertices (instead of edges) are all -stable is said to be -vertex-stable, and criticality and -vertex-criticality are defined analogously. Obviously, each edge and each vertex is either stable or critical, yet a graph might be neither.
Traditionally, the analogous terms for stability or vertex-stability when an edge or a vertex is added rather than deleted are unfrozenness and vertexunfrozenness: They too indicate that a graph parameter does not change by this operation. And if, however, a graph parameter changes when an edge or vertex is added (not deleted), the notions analogous to criticality and vertexcriticality are simply termed frozenness and vertex-frozenness. Again, each edge and each vertex is either unfrozen or frozen, but a graph might be neither.
For a graph parameter , define -Stability to be the set of -stable graphs; and analogously so for the sets -VertexStability, -VertexCriticality, Unfrozenness, -Frozenness, and -VertexUnfrozenness. These are the decision problems studied by Frei et al. [6] for general graphs in terms of their computational complexity. We will study them restricted to the graph classes mentioned in the introduction, formally defined in the subsections of Section 4.
A graph class J  G is closed for (induced) subgraphs if for every G  J it holds that all (induced) subgraphs H of G satisfy H  J .
The notation of perfect graphs was originally introduced by Berge [2] in 1963: A graph G  G is called perfect if for all induced subgraphs H of G, we have (H) = (H). Note that G is also an induced subgraph of itself.
Let P be the class of problems solvable in (deterministic) polynomial time. For more background on computational complexity (e.g., regarding the complexity classes NP, DP, and 2P mentioned in the introduction; note that P  NP  DP  2P by definition), we refer to the textbooks by Papadimitriou [16] and Rothe [19].

4

R. Weishaupt and J. Rothe

3 General Stability and Unfrozenness Results

In this section, we provide general results that hold for specific graph classes satisfying special requirements. These results can be used to easily determine for a given graph class whether some stability or unfrozenness results are tractable.

Theorem 1. Let J  G be a graph class closed for induced subgraphs, and  a tractable graph parameter for J . Then -VertexStability  P for all G  J .

Proof. Let G  J and compute (G). For all v  V (G), we have G - v 

J , since J is closed for induced subgraphs. Hence, for all v  V (G), we can

compute (G - v) efficiently and compare it to (G). If there is no vertex such

that the values differ, G is -vertex-stable. This approach is computable in time

polynomial in |G|, so that -VertexStability  P for all G  J .



Since every graph class that is closed for subgraphs is also closed for induced subgraphs, Corollary 1 is a simple consequence of the previous theorem.
Corollary 1. Let J  G be a graph class closed under subgraphs and  a tractable graph parameter for J . Then -VertexStability  P for all G  J .
The first theorem made a statement related to vertex-stability about graph classes closed for induced subgraphs. Theorem 2 is related to edge-stability; its proof is deferred to the appendix, as is the case for most upcoming results.
Theorem 2. Let J  G be a graph class closed under subgraphs and  a tractable graph parameter for J . Then -Stability  P for all G  J .
Some of the special graph classes we study in the next section are perfect, which is why we now provide some results for perfect graph classes.
Theorem 3. Let G  G be a perfect graph. Then it holds that G is -vertexstable if and only if G is -vertex-stable.
Based on this result, the next corollary follows immediately.
Corollary 2. Let J  G be a class of perfect graphs. Then, for all graphs in J , we have -VertexStability = -VertexStability.
While the above results are related to the concepts of stability and vertexstability, the subsequent two results address the topic of unfrozenness.
Theorem 4. Let J  G be a graph class closed under complements and subgraphs. If  or  is tractable for J , then -Unfrozenness  P for all G  J .
Note that this theorem exploits a relation between - and -Stability and -Unfrozenness. The next theorem follows by a similar approach, but exploits a relation between -Stability and - and -Unfrozenness.
Theorem 5. Let J  G be a graph class closed under complements and subgraphs. If  is tractable for J , then - and -Unfrozenness  P for all G  J .

Stability of Special Graph Classes

5

4 Tractability Results for Special Graph Classes

Ahead of our results for the individual graph classes, we provide two observations (proven in the appendix) which we will use multiple times in upcoming proofs.2
Observation 1 -VertexStability  -Stability.
Observation 2 Let G  G be a graph. If an edge {u, v}  E(G) is -critical, then u and v are -critical, too.
With these two observations we can now inspect several graph classes. In the following subsections we study the problems -Stability, -VertexStability, and -Unfrozenness with   {, , , }, restricted to special graph classes. Frei et al. [6] showed that for   {, , } we have -VertexUnfrozenness =  as well as -VertexUnfrozenness = {(, )}, where (, ) is the null graph, i.e., the graph without vertices or edges.
This is why we do not study problems related to vertex-unfrozenness, as all related questions are already answered.

4.1 Empty Graphs
Let In = ({v1, . . . , vn}, ) denote the empty graph with n  N isolated vertices and I = {In | n  N} the set of all empty graphs.
Theorem 6. It holds that In  I is (1) -vertex-stable for n = 0 and n  2, (2) -vertex-stable for n = 0 and n  2, (3) -vertex-stable, (4) -vertex-stable only for n = 0, and (5) -stable for   {, , , }.
With the previous theorem we can efficiently decide for every empty graph whether it is -stable or -vertex-stable for   {, , , }.
Furthermore, Theorem 6 also provides results for the null graph (, ). Therefore, we exclude the null graph from all subsections hereafter in order to decrease redundancy.
Proposition 1. The only -unfrozen empty graphs are I0 and I1.
The next corollary, which follows from the results in the next subsection, shows that all remaining problems related to unfrozenness are in P, too.
Corollary 3. -, -, and -Unfrozenness belong to P for empty graphs.
2 Note that the second observation is in line with Observation 2 of Frei et al. [6].

6

R. Weishaupt and J. Rothe

4.2 Complete Graphs
Since we studied empty graphs, it was an immediate consequence that we also study complete graphs. A complete graph with n  N vertices is defined as Kn = ({v1, . . . , vn}, {{vi, vj} | 1  i < j  n}) and we denote the set of all complete graphs by K. We know that I  -VertexStability holds. Together with the first statement of Proposition 6 from [6] we obtain that K  VertexCriticality, so every complete graph is -vertex-critical. Furthermore, we know that I \{I1}  -VertexStability. Applying the second statement of Proposition 6 from [6], we obtain that K\{K1}  -VertexStability as well as K \ {K1}  -VertexCriticality. Consequently, every complete graph which does not possess exactly one vertex is -vertex-critical and -vertex-stable.
Observation 3 It holds that K  -VertexCriticality.
So far we know for all parameters   {, , , } whether complete graphs are vertex-stable or not, summarized in the subsequent corollary.
Corollary 4. For every   {, , , }, the problem -VertexStability belongs to P for complete graphs.
Next, let us take a look at the edge-related stability problems.
Observation 4 For Kn  K, we have (Kn) = n, (Kn) = 1, (Kn) = n - 1, and (Kn) = n.
Since K0 = I0 and K1 = I1, these cases were already covered in the previous subsection, so the next result is stated only for n  2.
Proposition 2. Let n  N with n  2. Then Kn is -critical for   {, , , }.
We call a complete graph complete because all possible edges (ignoring loops) are present in the graph. Hence, for every Kn  K, we have E(Kn) = , so the next corollary is immediately clear.3
Corollary 5. For all   {, , , }, every Kn  K is -unfrozen.

4.3 Paths

Denote by Pn = ({v1, . . . , vn}, {{vi, vi+1} | 1  i < n}) the path with n vertices and by P the set of all paths. Again, all proofs are deferred to the appendix.

Observation 5 For n  2, we have (P0) = 0, (P1) = 1, and (Pn) = 2

and (P0) = 0, (P1) = 1, and (Pn) = 2. Additionally, for n  0, we have

(Pn)

=



n 2



and

(Pn)

=



n 2

.

Having made this straightforward observation, we can formulate the following stability results for paths. Thereby, P0 = (, ) is ignored, as argued earlier.

3 This corollary is in line with [6, Proposition 5(2)], as I = {Kn | n  N}.

Stability of Special Graph Classes

7

Theorem 7. Let   {, , , }. P1 is -stable and -vertex-stable but not -vertex-stable for   {, , }. P2 is neither -stable nor -vertex-stable for   {, , }, but it is -vertex-stable. P3 is -stable but not -vertex-stable. For n  4, Pn is - and -stable as well as - and -vertex-stable; it is not -vertex-stable; and it is neither -stable nor -stable but -vertex-stable if n is even, and it is -stable and -stable but not -vertex-stable if n is odd.
This theorem yields for all paths P  G and   {, , , } that -Stability and -VertexStability are in P. We exclude P1 = I1 onwards.
Observation 6 For   {, , , }, P2 is -unfrozen and P3 is -frozen.
It remains to study the unfrozenness of paths with n  4 vertices.
Proposition 3. For n  4, Pn is neither -unfrozen nor -unfrozen.
Proposition 4. For n  4, Pn is neither - nor -unfrozen if n is odd, and Pn is - and -unfrozen if n is even.
Again, -Unfrozenness is in P for all paths P  G and   {, , , }.

4.4 Trees and Forests

We say G  G is a tree (i.e., G  T ) if G has no isolated vertices and no cycles

of length greater than or equal to 3. Furthermore, G is a forest (i.e., G  F ) if

there exist trees G1, . . . , Gn  T such that G = G1  · · ·  Gn. For every tree G  T , it holds that |E(G)| = |V (G)| - 1 (see, e.g., Bollob´as [3]). So, we have

(G) = (G) = 2 if |V (G)| > 1, and (G) = (G) = 1 if |V (G)| = 1.

Also, there exists a tractable algorithm to determine (G) for trees (for

example, as T  B, we can simply use the algorithm for bipartite graphs from

Observation 8). Thus we can compute  for trees using Gallai's theorem [7]

(stated as Theorem 22 in the appendix), and all four graph parameters , , ,

and  are tractable for trees.

Now, let G  F with G = G1  · · ·  Gn and Gi  T , 1  i  n, be a

forest. It is easy to check that (G) =

n i=1

(Gi),

(G)

=

n i=1

 (Gi ),

(G)

=

max1in (Gi), and (G) = max1in (Gi). Furthermore, it is known that

the class of forests F is closed under subgraphs and induced subgraphs. From

these observations we have the following results (with proofs in the appendix).

Theorem 8. Let   {, , , } be a graph parameter. Then the problems Stability and -VertexStability are in P for all forests.

With T  F the next corollary follows immediately.

Corollary 6. For all G  T and   {, , , }, the problems -Stability and -VertexStability belong to P.

We now focus on the unfrozenness problems. All trees and forests with fewer than three vertices (I1, I2, and P2) were already covered in previous sections. It remains to study trees and forests with at least three vertices.

8

R. Weishaupt and J. Rothe

Proposition 5. Every tree G  T with |V (G)|  3 is neither - nor -unfrozen.
Based on this result we can deduce whether forests are - or -unfrozen. As forests without edges are empty graphs, we study forests with at least one edge.
Theorem 9. If F  F contains P2 but no P3 as induced subgraphs, F is - and -unfrozen. If F contains P3 as an induced subgraph, F is not - nor -unfrozen.
- and -Unfrozenness are covered in Corollary 10 of the next subsection.

4.5 Bipartite Graphs
G = (V1  V2, E) is a bipartite graph if V1  V2 =  and E  V1 × V2. Denote the set of all bipartite graphs by B. We begin with two simple observations. Again, most proofs are deferred to the appendix.
Observation 7 Let G  B be a bipartite graph. Then (G) = (G) = 1 if E(G) = , and (G) = (G) = 2 if E(G) = .
Consequently, we can efficiently calculate  and  for all bipartite graphs. Next, we describe a tractable method to calculate  and  for bipartite graphs.
Observation 8 We can calculate (G) and (G) efficiently for G  B.
Hence, we can efficiently calculate (G) for every G  B and   {, , , }. Furthermore, as the class of bipartite graphs is closed under subgraphs and induced subgraphs, the following corollary follows from Theorem 1.
Corollary 7. For every   {, , , }, the problems -Stability and VertexStability are in P for all bipartite graphs.
Next, we discuss approaches for how to decide whether a bipartite graph is stable. If a bipartite graph G has no edges, we have G = I|V (G)|. For bipartite graphs with one edge, we have the following simple result.
Proposition 6. Let G be a bipartite graph with |E(G)| = 1. Then G is neither -stable nor -vertex-stable for   {, , , }.
Next, we provide results for bipartite graphs with more than one edge.
Lemma 1. Every bipartite graph G with |E(G)|  2 is -stable.
With Lemma 1 we can characterize -vertex-stability.
Theorem 10. Let G be a bipartite graph with |E(G)|  2. G is -vertex-stable if and only if for all v  V (G) it holds that deg(v) < |E(G)|.
The proof of the following lemma is similar to that of Lemma 1.
Lemma 2. Every bipartite graph G with |E(G)|  2 is -stable.

Stability of Special Graph Classes

9

With Lemma 2 we also can characterize -vertex-stability.

Theorem 11. Let G be a bipartite graph with |E(G)|  2. G is -vertex-stable if and only if for all v  V (G) it holds that deg(v) < |E(G)|.

Besides these (vertex-)stability characterizations for bipartite graphs, we now address unfrozenness for them.

Theorem 12. Let G be a bipartite graph. G is -unfrozen if and only if G possesses no P3 as an induced subgraph.

Proof. We prove both directions separately. First, assume G is -unfrozen but

contains P3 as an induced subgraph. Write V (P3) = {v1, v2, v3} and E(P3) = {{v1, v2}, {v2, v3}} for the corresponding vertices and edges. Then e = {v1, v3}  E(G). However, adding e to G we obtain (G) = 2 < 3 = (G+e), as P3+e forms a 3-clique in G, a contradiction to the assumption that G is -unfrozen. Next,

assume that G possesses no P3 as an induced subgraph but is not -unfrozen. Hence, there must exist e = {u, v}  E(G) such that (G + e) = 3 > 2 = (G).

Denote the two disjoint vertex sets of G by V1  V2 = V (G). Obviously, u  V1 and v  V2 cannot be true, since then (G + e) = 2 would hold. Therefore, without loss of generality, we assume u, v  V1. Adding e to G must create a cycle of odd length in G, as cycles of even length as well as paths can be colored

with two colors. Consequently, G + e possesses Cn with n = 2k + 1  3, k  N,

as a subgraph. This implies that G must possess P3 as an induced subgraph,

again a contradiction.



Slightly modifying (the direction from right to left in) the previous proof yields Corollary 8. This time, adding e to G must create a 3-clique in G.
Corollary 8. G  B is -unfrozen if and only if G possesses no P3 as an induced subgraph.
Both results show that - and -Unfrozenness belong to P for bipartite graphs. For the last results of this section we require the following lemma.
Lemma 3. Let G  B be a bipartite graph and u  V (G). If (G-u) = (G)-1, then there exists some vertex cover V   V (G) with u  V  and |V | = (G).
Theorem 13. For every G  B, the problem -Unfrozenness belongs to P.
The previous proof allows for every nonedge of a bipartite graph to decide if it is -unfrozen such that -Frozenness  P follows for G  B. Gallai's theorem [7] immediately yields -Unfrozenness  P for bipartite graphs.
Corollary 9. -Unfrozenness and -Frozenness  P for all G  B.
Since T  F  B, the next corollary follows as well.
Corollary 10. The problems - and -Unfrozenness as well as the problem -Frozenness belong to P for all trees and forests.

10

R. Weishaupt and J. Rothe

+





v1

v3

v2

v4

Fig. 1. Co-tree for C4.

4.6 Co-Graphs
First of all, we recursively define co-graphs, following a slightly adjusted definition by Corneil et al. [4].
Definition 1 (co-graph). The graph G = ({v}, ) is a co-graph. If G1 and G2 are co-graphs, then G1  G2 and G1 + G2 are co-graphs, too.
We denote the set of all co-graphs by C and use the operators  and + as is common (see, e.g., [6]). We will use the following result by Corneil et al. [4].
Theorem 14. Co-graphs are (i) closed under complements and (ii) closed under induced subgraphs, but (iii) not closed under subgraphs in general. Furthermore, G  G is a co-graph if and only if G possesses no P4 as an induced subgraph.
Property (iii) is not proven in their work [4]. However, C4  C is an easy example since C4 is a co-graph (see Example 1 below), and removing one edge yields P4. Since every co-graph can be constructed by  and +, we can identify a co-graph by its co-expression.
Example 1 (co-expression). The co-expression X = (v1 v3)+(v2 v4) describes the graph C4 = ({v1, v2, v3, v4}, {{v1, v2}, {v2, v3}, {v3, v4}, {v4, v1}}).
Obviously, we can build a binary tree for every co-graph via its co-expression. The tree's leaves correspond to the graph's vertices and the inner nodes of the tree correspond to the expression's operations. For example, the tree in Figure 1 corresponds to the co-expression from Example 1 and, thus, describes a C4. We call such a tree a co-tree. To formulate our results regarding stability and unfrozenness of co-graphs, we need the following result of Corneil et al. [5].
Theorem 15. For every graph G  G, we can decide in O(|V (G)| + |E(G)|) time whether G is a co-graph and, if so, provide a corresponding co-tree.
Combining the previous results with the next one by Corneil et al. [4], we can efficiently determine a co-graph's chromatic number.
Theorem 16. Let G  G be a co-graph and T the corresponding co-tree. For a node w from T , denote by G[w] the graph induced by the subtree of T with root w. To every leave v of T we add as a label (G[v]) = 1. For every inner node w of

Stability of Special Graph Classes

11

T we add, depending on the inner node's type, the following label: (1) If w is a -node with children v1 and v2, (G[w]) = max{(G[v1]), (G[v2])}, and (2) if w is a +-node with children v1 and v2, (G[w]) = (G[v1]) + (G[v2]). If r is the root node of T , then it holds that (G[r]) = (G).
A result similar to the previous one for  was given by Corneil et al. [4].
Remark 1. We label all leaves of T with (G[v]) = 1. Each inner node w of T with children v1 and v2 is labeled by (G[w]) = max{(G[v1]), (G[v2])} if w contains the +-operation, and by (G[w]) = (G[v1]) + (G[v2]) if w contains the -operation. For the root r of T , it then holds that (G[r]) = (G).
By the previous remark we can efficiently calculate  for co-graphs. Based on these results, we can state the following theorems whose proofs again are deferred to the appendix.
Theorem 17. For every G  C, the problem -VertexStability is in P.
With a similar proof as for the previous theorem, we obtain the next result.
Theorem 18. For every G  C, the problem -VertexStability is in P.
We can use the same proof as for Theorem 18 to obtain the next corollary. However, this time we additionally use Gallai's theorem [7] to calculate  out of  for G and all induced subgraphs with one vertex removed.
Corollary 11. For every co-graph, the problem -VertexStability is in P.
Although Frei et al. [6, Proposition 5(5)] have already shown that the problem -VertexStability is in P for co-graphs, the next corollary provides an alternative because -VertexStability = {G | G  -VertexStability} is true and co-graphs are closed under complements.
Corollary 12. For all G  C the problem -VertexStability is in P.
Next, let us study the edge-related stability problems for co-graphs. To obtain our results, we need the following two auxiliary propositions.
Proposition 7. Let G  C with |V (G)| > 1 and let u  V (G) be -critical for G. There exist two co-graphs G1, G2 such that G = G1  G2 or G = G1 + G2. Assuming, without loss of generality, that u  V (G1), u is -critical for G1.
Proposition 8. Let G  C and e = {u, v}  E(G). If u and v are -critical for G, then e is -critical for G as well.
Having these results, we are now able to provide our stability-related results.
Theorem 19. For all co-graphs, the problem -Stability is in P.
Next, we want to study the problem of -Stability for co-graphs. To do so, we need the following lemmas with their proofs deferred to the appendix.

12

R. Weishaupt and J. Rothe

Lemma 4. Let G  C be a co-graph. We can compute all cliques of size (G) for G in time polynomial in |G|.
Lemma 5. Let G  G be a graph and v  V (G) and e  E(G). Then it holds that (G - v) and (G - e) are in {(G) - 1, (G)}.
Having these results, we can show the next theorem.
Theorem 20. The problem -Stability is in P for co-graphs.
As we now know that we can efficiently determine whether a given co-graph G is -stable, we can exploit the fact that co-graphs are closed under complements to obtain the following corollary (whose proof is deferred to the appendix).
Corollary 13. The problem -Stability is in P for co-graphs.
The next result follows from Gallai's theorem [7] and [6, Proposition 5].
Corollary 14. The problem -Stability is in P for co-graphs.
At this point, we finish the study of stability problems for co-graphs, as all open questions are answered, and turn to the problems related to unfrozenness. The next two corollaries exploit the fact that co-graphs are closed under complements and follow a similar argumentation.
Corollary 15. The problems -Unfrozenness and -Unfrozenness are in P for co-graphs.
Corollary 16. The problem -Unfrozenness is in P for co-graphs.
Finally, we answer the last remaining open question related to unfrozenness and co-graphs.
Theorem 21. The problem -Unfrozenness is in P for co-graphs.

5 Conclusion
We have provided 84 tractability results regarding the stability, vertex-stability, and unfrozenness problems when restricted to special graph classes. In particular, we studied these three problems for seven important graph classes and four central graph parameters. Doing so, our work provides some baseline for further, more expanding work along this line of research. For future work, we propose to study further special graph classes that are not covered here. Besides the study of stability for other graph classes, one can also study the concept of cost of stability:4 Given a graph, the question is how costly it is to stabilize it. In other words, what is the smallest number of vertices or edges to be added to or removed from the graph such that the resulting graph is stable or unfrozen with respect to some graph parameter. Relatedly, it would make sense to combine these two approaches and study the cost of stability for special graph classes.
4 Bachrach et al. [1] study a related notion of "cost of stability" for cooperative games.

Stability of Special Graph Classes

13

Acknowledgments

This work was supported in part by Deutsche Forschungsgemeinschaft under grants RO 1202/14-2 and RO 1202/21-1.

References
1. Bachrach, Y., Elkind, E., Malizia, E., Meir, R., Pasechnik, D., Rosenschein, J., Rothe, J., Zuckerman, M.: Bounds on the cost of stabilizing a cooperative game. Journal of Artificial Intelligence Research 63, 987­1023 (2018)
2. Berge, C.: Perfect graphs. In: Six Papers on Graph Theory. pp. 1­21. Indian Statistical Institute (1963)
3. Bollob´as, B.: Modern Graph Theory. Springer-Verlag (1998) 4. Corneil, D., Lerchs, H., Burlingham, L.S.: Complement reducible graphs. Discret.
Appl. Math. 3(3), 163­174 (1981) 5. Corneil, D., Perl, Y., Stewart, L.: A linear recognition algorithm for cographs.
SIAM Journal on Computing 14(4), 926­934 (1985) 6. Frei, F., Hemaspaandra, E., Rothe, J.: Complexity of stability. In: Proceedings
of the 31st International Symposium on Algorithms and Computation. Leibniz International Proceedings in Informatics (LIPIcs), vol. 181, pp. 19:1­19:14. Schloss Dagstuhl ­ Leibniz-Zentrum fu¨r Informatik (Dec 2020) 7. Gallai, T.: U¨ ber extreme Punkt- und Kantenmengen. Ann. Univ. Sci. Budapest, Eotvos Sect. Math 2, 133­138 (1953) 8. Hemaspaandra, E., Hemaspaandra, L., Rothe, J.: Exact analysis of Dodgson elections: Lewis Carroll's 1876 voting system is complete for parallel access to NP. Journal of the ACM 44(6), 806­825 (1997) 9. Hemaspaandra, E., Hemaspaandra, L., Rothe, J.: Raising NP lower bounds to parallel NP lower bounds. SIGACT News 28(2), 2­13 (1997) 10. Hemaspaandra, E., Spakowski, H., Vogel, J.: The complexity of Kemeny elections. Theoretical Computer Science 349(3), 382­391 (2005) 11. Hopcroft, J., Karp, R.: An n5/2 algorithm for maximum matching in bipartite graphs. SIAM Journal on Computing 2, 225­231 (1973) 12. Jackson, M.: Social and Economic Networks. Princeton University Press (2008) 13. Khor, S.: Application of graph coloring to biological networks. IET Systems Biology 4(3), 185­192 (2010) 14. Konig, D.: Gr´afok ´es m´atrixok. Matematikai ´es Fizikai Lapok 38, 116­119 (1931) 15. Minor, E., Urban, D.: A graph-theory framework for evaluating landscape connectivity and conservation planning. Conservation biology 22(2), 297­307 (2008) 16. Papadimitriou, C.: Computational Complexity. Addison-Wesley, second edn. (1995) 17. Papadimitriou, C., Yannakakis, M.: The complexity of facets (and some facets of complexity). Journal of Computer and System Sciences 28(2), 244­259 (1984) 18. Papadimitriou, C., Zachos, S.: Two remarks on the power of counting. In: Proceedings of the 6th GI Conference on Theoretical Computer Science. pp. 269­276. Springer-Verlag Lecture Notes in Computer Science #145 (1983) 19. Rothe, J.: Complexity Theory and Cryptology. An Introduction to Cryptocomplexity. EATCS Texts in Theoretical Computer Science, Springer-Verlag (2005) 20. Rothe, J., Spakowski, H., Vogel, J.: Exact complexity of the winner problem for Young elections. Theory of Computing Systems 36(4), 375­386 (2003)

14

R. Weishaupt and J. Rothe

21. Wagner, K.: More complicated questions about maxima and minima, and some closures of NP. Theoretical Computer Science 51(1­2), 53­80 (1987)
22. Wagner, K.: Bounded query classes. SIAM Journal on Computing 19(5), 833­846 (1990)

A Deferred Proofs from Section 3: General Stability and Unfrozenness Results

Proof of Theorem 2. Let G  J be a graph and  a graph parameter that can be computed efficiently for graphs in J . Now, compute (G). Since J is closed under subgraphs, for every every edge e  E(G) it holds that G-e is in J . Hence, we can compute (G - e) efficiently. Simply check for every edge whether (G - e) = (G) holds. If no such edge exists, we know that G is -stable. Consequently, we can solve -Stability for all graphs in J in P.  Theorem 2

Proof of Theorem 3. Let G be a perfect graph. We have (G) = (G) as well as for every vertex v  V (G) it holds that (G - v) = (G - v) as G - v is an induced subgraph of G. Consequently, we have

G  -VertexStability  v  V (G) : (G - v) = (G)  v  V (G) : (G - v) = (G)  G  -VertexStability.

This completes the proof.

 Theorem 3

Proof of Theorem 4. Without loss of generality, assume that we can effi-

ciently compute (G) for all G  J . Since J is closed under subgraphs, applying

Theorem 2 yields that -Stability belongs to P for all graphs in J . Let G  J

be a graph. As J is closed under complements, G also belongs to J . Conse-

quently, we can efficiently compute (G). From Proposition 5 1. in [6] we know

that -Stability = {G | G  -Unfrozenness} holds. Hence, if G is -stable,

it immediately follows that G is -unfrozen. Therefore, for graphs in J we can

decide efficiently whether they are -unfrozen, such that -Unfrozenness be-

longs to P for all graphs in J .

 Theorem 4

Proof of Theorem 5. The argumentation is similar to the argumentation of Theorem 4. We know that J is closed under subgraphs and we can compute (G) for all G  J efficiently. Consequently, by Theorem 2 it follows that Stability belongs to P for all graphs in J . From Proposition 5 2. in [6] we know that

-Unfrozenness = -Unfrozenness = {G | G  -Stability}

holds. Consequently, let G  J be a graph. As J is closed under complements, G is in J , too. Now, efficiently decide whether G is -stable. If that is the

Stability of Special Graph Classes

15

case, it immediately follows that G is - and -unfrozen. Hence, - and -

Unfrozenness belong to P for all graphs in J .

 Theorem 5

Proof of Observation 1. Let G  -VertexStability be a graph. Con-

sequently, G is -vertex-stable, i.e., every v  V (G) is -stable. Together with

Observation 3 in [6] it follows immediately that every edge e  E(G) is -stable,

since all its incident vertices are -stable. If all edges of G are -stable, it follows

that G is -stable and thus G  -Stability holds.

 Observation 1

Proof of Observation 2. This is basically the same proof as for Observation 2

due to Frei et al. [6]. If e is -critical for G, we have (G- e) < (G). Since G- v

and G - u are induced subgraphs of G - e it follows that (G - v), (G - u) 

(G - e) < (G) holds. Thus u and v are -critical.

 Observation 2

B Deferred Proofs from Section 4.1: Empty Graphs

Proof of Theorem 6. We prove every item on its own.

1. We have (I0) = 0 and (In) = 1 for n  1. Furthermore, for v  V (In) it holds that In -v = In-1, such that (In -v) = (In-1) holds. Consequently, In for n = 0 or n  2 is -vertex-stable, but not for n = 1 since the only
vertex is -critical. 2. It holds that (I0) = 0 and (In) = 1 for n  1. Hence, I0 and In for n  2
are -vertex-stable but I1 isn't, since its only vertex is -critical. 3. We have (In) = 0. Therefore, for every v  V (In) we have (In) = (In -
v) = (In-1), so that all vertices are -stable and, thus, In is -vertex-stable. 4. It holds that (In) = n. Hence, for every v  V (In) we have (In - v) =
(In-1) = n - 1 < n = (In), so In is not -vertex-stable for n  1. 5. Since In for n  0 has no edges, all edges of In are -stable and, thus, In is
-stable.

This completes the proof.

 Theorem 6

Proof of Proposition 1. Since E(I0) = E(I1) = , it obviously follows that

both are -unfrozen. For all other In  I with n  2, we just add one arbitrary

nonedge e to In so that (In + e) = 2 > 1 = (In) holds. Consequently, these

graphs cannot be -unfrozen.

 Proposition 1

Proof of Corollary 3. It is trivial to see that In = Kn for all n  N.

Consequently, by Proposition 5 2. from [6] it follows that -Unfrozenness = -

Unfrozenness belong to P for empty graphs, since -Stability is in P for all

complete graphs, c.f. Proposition 2. With a similar argumentation it follows

from Proposition 5 1. that -Unfrozenness is in P for all empty graphs, since

-Stability is in P for all complete graphs.

 Corollary 3

16

R. Weishaupt and J. Rothe

C Deferred Proofs from Section 4.2: Complete Graphs

Proof of Observation 3. Let Kn  K be a complete graph. Obviously, for every vertex v  V (Kn) we have Kn - v = Kn-1 as well as (Kn) = n. Consequently, for every v  V (Kn) we have

(Kn - v) = (Kn-1) = n - 1 < n = (Kn),

such that Kn is -vertex-critical.

 Observation 3

Proof of Proposition 2. For every e  E(Kn) we have (Kn - e) = n - 1 <

n = (Kn), such that e is -critical. Furthermore, we have (Kn - e) = n - 1 < n = (Kn), (Kn -e) = 2 > 1 = (Kn) and (Kn -e) = n-2 < n-1 = (Kn),

so that e is -, - and -critical. The previous argumentation holds for all edges

in E(Kn), and therefore, Kn is -critical.

 Proposition 2

D Deferred Proofs from Section 4.3: Paths

Proof of Observation 5. Obviously, (P0) = 0 and (P1) = 1 are true.

Furthermore, for n  2 we simply color the vertices of Pn alternatingly in two

colors. Additionally, one can immediately see (P0) = 0, (P1) = 1 as well as

(Pn) = 2 for n  2. For the last statements, we argue as follows. The graph

Pn has n vertices and n - 1 edges. The first and the last vertex of the graph can

each cover at most one edge. All vertices in between can cover at most two edges.

Consequently, we Applying Gallai's

need (Pn) theorem [7]

=

n-1 2

=

n 2

yields (Pn) =

vertices for a



n 2



from

the

vertex cover of Pn. previous result, as

|V (Pn)| = (Pn) + (Pn) must hold.

 Observation 5

Proof of Theorem 7.
1. P1 has no edges, so P1 is -stable. Furthermore, since P1 - v1 = P0 and (P1) = (P0) = 0 holds, P1 is -vertex-stable, too. Obviously, P1 is not -vertex-stable, as 0 = (P0) = (P1 - v1) < (P1) = 1. The same argumentation holds with respect to  and .
2. We have (P2) = 2, (P2) = 1, (P2) = 1, (P2) = 2 as well as (P2 - {v1, v2}) = 1, (P2 - {v1, v2}) = 0, (P2 - {v1, v2}) = 2, (P2 - {v1, v2}) = 1, so P2 is not -stable. Furthermore, we have (P2 - v1) = 1, (P2 - v1) = 0 and (P2 - v1) = 1, so P2 is neither -vertex-stable. However, (P2 - v1) = (P2 - v2) = 1, so P2 is -vertex-stable.
3. We have (P3) = 2, (P3) = 1, (P3) = 2 and (P3) = 2. For all e  E(P3) we have (P3 - e) = 2, (P3 - e) = 1, (P3 - e) = 2 and (P3 - e) = 2, as E(P3 - e) = , i.e., P3 is -stable. Since we have (P3 - v2) = 1, (P3 - v2) = 0, (P3 -v1) = 1 and (P3 -v2) = 1, it follows that P3 is not -vertex-stable.

Stability of Special Graph Classes

17

4. Let n  4. For all v  V (Pn) we have (Pn - v) = (Pn - v) = 2, as E(Pn -

v) = . Consequently, Pn is - and -vertex-stable. The same argument

holds for all e  E(Pn), so Pn is - and -stable, too. From Observation 5

we

know

that

(Pn)

=



n 2



holds.

Consequently,

we

have

(Pn - vn-1) = (Pn-2  P1) = (Pn-2) =

n-2 2

<

n 2

= (Pn),

so Pn is not -vertex-stable. If n = 2k for a k  N, we have (Pn) = k as well as

(Pn - {vn, vn-1}) = (P2k-1  P1) = (P2k-1) = k - 1,

so Pn is not -stable. Furthermore, it holds that (Pn) = k and (Pn - {vn-1, vn}) = (Pn-1  P1) = k + 1,
so Pn is neither -stable. However, let v  V (Pn). Consequently, we have

(Pn - v) = (Pp  Pq)

with p + q = n - 1, assuming w.l.o.g. p = 2s + 1, q = 2t, s, t  N. Then it follows that

(Pp  Pq) = (Pp) + (Pq) = s + 1 + t = k,

so Pn is -vertex-stable. Next, assume n = 2k + 1. We have (Pn) = k and for every e  E(Pn) it holds that

(Pn - e) = (Pp  Pq)
for p, q  N with p + q = n. Without loss of generality we can assume that p = 2s and q = 2t + 1 for s, t  N. Then it holds that

(Pp  Pq) = (Pp) + (Pq) =

p 2

+

q 2

=

s+t

=

2(s + 2

t)

=

n

- 2

1

=

k.

Therefore, (Pn - e) = k = (Pn) and, thus, Pn is -stable. Additionally, it holds that (Pn) = k + 1 and for every e  E(Pn) we have

(Pn - e) = (Pp  Pq)

with p+q = n, assuming without loss of generality that p = 2s and q = 2t+1 for s, t,  N. Then it follows that

(Pp  Pq) = (Pp) + (Pq) = s + t + 1 = k + 1.

Therefore, Pn is -stable. Finally, it holds that

(Pn - vn) = (Pn-1) = k,

so Pn is not -vertex-stable.

 Theorem 7

18

R. Weishaupt and J. Rothe

Proof of Observation 6. The first observation related to P2 immediately

follows from the fact that E(P2) =  holds, because then every nonedge of P2 is

-unfrozen and hence P2 is -unfrozen, too. For the second observation one must

note that E(P3) = {{v1, v3}} holds, i.e., there is only one nonedge. When we

add this nonedge to P3 we obtain K3. As (P3) = 2 < 3 = (K3), (P3) = 2 >

1 = (K3), (P3) = 1 < 2 = (K3) and (P3) = 2 < 3 = (K3) hold, it follows

that {v1, v3} is -frozen, such that P3 is -frozen, too.

 Observation 6

Proof of Proposition 3. From Observation 5 we know (Pn) = (Pn) = 2. When we add the nonedge e = {v1, v3}  E(Pn) to Pn, we obtain (Pn + e) = 3 as well as (Pn + e) = 3, since v1, v2 and v3 then build a 3-clique. Thus e is and -frozen such that Pn can neither be - nor -unfrozen.  Proposition 3

Proof of Proposition 4. For this result we require two facts. For n  N

denote by Cn

(Cn)

=



n 2

.

 G a circle with n vertices. Then we have Furthermore, a path Pn with n = 2k  N

(Cn)

=



n 2



as

vertices has two

well as vertex

covers of size (Pn), namely B1 = {v2i | 1  i  k} and B2 = {v2i+1 | 0  i <

k}. We prove both statements separately. First, assume n = 2k + 1 for k  N.

In this case e = {v1, vn}  E(Pn) is a nonedge for Pn. Adding e to Pn results in Pn + e = Cn. With the previous remark we know that

(Pn) =

n 2

= k < k+1 =

n 2

= (Cn) = (Pn + e),

such that e is -frozen and, thus, Pn cannot be -unfrozen. A similar argument with respect to ,

(Pn + e) = (Cn) =

n 2

= k < k+1 =

n 2

= (Pn),

yields that e is -frozen and consequently, Pn cannot be -unfrozen.
Now, assume that n = 2k for k  N holds, i.e., n is even. Denote by e = {vi, vj }  E(Pn) a nonedge of Pn, i.e., j = i + 1 for 1  i < n. As previously mentioned, there are two optimal vertex covers for Pn, B1, containing all evenly numbered vertices, and B2, containing all oddly numbered vertices. Selecting Bj, j  {1, 2}, such that Bj  e =  holds, results in an optimal vertex cover for Pn + e, also covering the newly introduced edge e. Consequently, (Pn + e) = (Pn), such that e is -unfrozen. Since this argument holds for an arbitrary nonedge e, it follows that all nonedges are -unfrozen and therefore, Pn is unfrozen, too. If Pn is -unfrozen, for every nonedge e  E(Pn) we have

(Pn + e) = |V (Pn + e)| - (Pn + e) = |V (Pn)| - (Pn) = (Pn),

such that Pn is -unfrozen, too.

 Proposition 4

Stability of Special Graph Classes

19

E Deferred Proofs from Section 4.4: Trees and Forests

Proof of Theorem 8. Let   {, , , } and G  F be a forest. As

previously stated, we can efficiently calculate (G). Now, for every v  V (G)

and e  E(G) it holds that G - v, G - e  F , such that we can also efficiently

compute (G - v) and (G - e). Consequently, we can decide in time polynomial

in |G| whether G is -vertex-stable or -stable and therefore, both problems,

-Stability and -VertexStability belong to P.

 Theorem 8

Proof of Proposition 5. With |V (G)|  3 and |E(G)| = |V (G)|-1 it follows
that G must contain P3 as an induced subgraph. Denote the corresponding vertices by v1, v2, and v3. Then {v1, v2}, {v2, v3}  E(G) is true. Furthermore, as G does not contain any cycle, e = {v1, v3} must be a nonedge of G. Adding e to G creates the 3-clique v1, v2, v3 in G + e, such that we obtain

(G) = 2 < 3 = (G + e).

Hence, e is -frozen and thus G cannot be -unfrozen. A similar argument yields

that G cannot be -unfrozen.

 Proposition 5

Proof of Theorem 9. We prove both statements separately. If F contains P2 but no P3 as an induced subgraph, we have (F ) = (F ) = 2. Let e = {u, v}  E(F ) be a nonedge of F . Both vertices u, v satisfy one of two cases: Either the

vertex is isolated or part of some P2 in F . In both cases, adding e to F does not create a 3-clique, such that (F + e) = (F + e) = 2 still holds and e is - and

-unfrozen. Since that holds for all nonedges of F , it follows that F is - and

-unfrozen. Contrarily, if F contains P3 as an induced subgraph, we can follow the same arguments as in the proof of Proposition 5 to see that F is neither -

nor -unfrozen.

 Theorem 9

F Deferred Proofs from Section 4.5: Bipartite Graphs
Proof of Observation 7.
1. If E(G) = , it obviously holds that (G) = 1, as we can color all vertices with the same color, and the largest clique has size 1, such that (G) = 1 is true, too.
2. If E(G) = , denote V1  V2 = V (G). Consequently, we can color all vertices in V1 in one color and all vertices in V2 in a second color, since there are no edges among the vertices of V1 nor V2. Furthermore, there can not exist a clique of size three or larger in G, as bipartite graphs do not possess cycles of odd length as induced subgraphs, but every clique of size three or larger possesses a cycle of length three as an induced subgraph.  Observation 7

20

R. Weishaupt and J. Rothe

Proof of Observation 8. Using the Hopcroft-Karp algorithm [11] we can

efficiently compute a maximum matching M  E(G) for G. Applying K¨onig's

theorem [14], we know that |M | = (G) holds. Hence, (G) can be computed

efficiently for every G. With Gallai's theorem we obtain (G) from (G) and,

thus, can compute (G) efficiently for G, too.

 Observation 8

Proof of Proposition 6. Denote G's only edge by e = {u, v} for u, v  V (G).

Then G is neither -stable nor -vertex-stable, as (G) = |V (G)| - 1 as well

as (G - e) = |V (G)| and (G - w) = |V (G)| - 2 for w  V (G) \ {u, v} hold.

Consequently, G is neither -stable, following from [6, Proposition 5], nor -

vertex-stable because of (G) = 1 and (G - u) = 0. Furthermore, we have

(G) = 2 as well as (G - e) = (G - u) = 1, such that G is neither -stable

nor -vertex-stable. Lastly, (G) = 2 but (G - e) = (G - u) = 1, such that

G is not -stable nor -vertex-stable, too.

 Proposition 6

Proof of Lemma 1. Let e  E(G) be an arbitrary edge of G. Since E(G-e) = , it holds that (G - e) = 2 = (G) and, thus, G is -stable.  Lemma 1

Proof of Theorem 10. Assume G to be -vertex-stable. Furthermore, as

we assume that |E(G)|  2, it holds that (G) = 2. Then there cannot exist

a vertex v  V (G) with deg(v) = |E(G)|, as such a vertex would be -critical,

since (G - v) = 1 because of E(G - v) = . For the opposite direction, assume

that for all vertices v  V (G) we have deg(v) < |E(G)|. Hence, no matter what

vertex v  V (G) we remove from G, it always holds that E(G - v) = , so

(G - v) = 2 = (G) and, thus, G is -vertex-stable.

 Theorem 10

Proof of Lemma 2. For all e  E(G) we have (G - e) = 2 = (G) as

E(G - e) =  holds, such that G is -stable.

 Lemma 2

Proof of Theorem 11. Assume that G is -vertex-stable. Consequently, for

all v  V (G) it holds that (G - v) = 2 = (G). If there is one v  V (G) with

deg(v) = |E(G)|, we have (G-v) = 1 as E(G-v) = , a contradiction to G's -

vertex-stability. Contrarily, assume that for all v  V (G) it holds that deg(v) <

|E(G)|. Then, for all v  V (G), it follows that E(G - v) = . Consequently,

(G) = 2 = (G - v) and, hence, G is -vertex-stable.

 Theorem 11

Proof of Lemma 3. Denote by V   V (G - u) a minimum vertex cover with

|V | = (G - u) and write V  = V   {u}. Then |V | = (G - u) + 1 = (G)

and E(G - u)  {e  E(G) | e  {u} = } = E(G) holds. As V  is a minimum

vertex cover for G - u, all edges in E(G - u) are covered by V . All remaining

edges in {e  E(G) | e  {u} = } are covered by u, so that V  covers all edges

in E(G) and is a vertex cover of G.

 Lemma 3

Proof of Theorem 13. Let G  B be a bipartite graph with V (G) = V1  V2 and V1  V2 = . Then E(G)  V1 × V2 holds and, according to Observation 8, we can calculate (G) efficiently. For any nonedge e = {u, v}  E(G) either (1.)

Stability of Special Graph Classes

21

e  V1 × V2 or (2.) e  Vi × Vi, i  {1, 2}, must hold. We study both cases separately: (1) If e  V1 × V2, then G + e is a bipartite graph, such that we can

efficiently calculate (G + e) and compare it with (G) to determine whether e

is -unfrozen or -frozen. (2) Without loss of generality assume e  V1 × V1. Then two cases are possible: (a) G + e can be rearranged, such that it is bipartite.

This is possible if and only if (G + e) = 2, which can be checked efficiently.

In this case we can compute (G + e) efficiently to determine whether e is -

unfrozen or -frozen. (b) G+e is no bipartite graph since it contains a cycle of odd

length as subgraph. In this case we check with Lemma 3 for u, and afterwards

for v, whether there exists some minimum vertex cover V   V (G) for G with

u  V  or v  V  respectively. If one of these two checks is positive, we know

that (G + e) = (G) holds and hence, e is -unfrozen. Otherwise, (G + e) =

(G)+1 must hold, such that e is -frozen. Doing so, we can check every nonedge

e  E(G) efficiently for -unfrozenness, such that -Unfrozenness is in P for

all graphs in B.

 Theorem 13

G Deferred Proofs from Section 4.6: Co-Graphs

Proof of Theorem 18. Let G  C be a co-graph. According to Theorem 15

we can calculate the graph's co-tree T efficiently. Now, calculate (G) according

to Theorem 16. Since co-graphs are closed under induced subgraphs, for every

v  V (G) it holds that G - v is a co-graph, too. Thus we can calculate (G - v)

efficiently. If there is a vertex v  V (G) such that (G - v) < (G) holds, we

immediately know that G is not -vertex-stable. Otherwise, if for all v  V (G)

it holds that (G - v) = (G), it directly follows that G is -vertex-stable.

Consequently, we can decide for every co-graph whether it is -vertex-stable

or not in P and, therefore, it follows that -VertexStability is in P for co-

graphs.

 Theorem 18

Proof of Theorem 18. Let G  C be a co-graph. Calculate (G) according

to Remark 1. Now, for every v  V (G) we calculate (G - v) as previously

described. If there exists at least one vertex v  V (G) such that (G - v) =

(G), it follows immediately that G is not -vertex-stable. Otherwise, G is -

vertex-stable. Hence, this results in -VertexStability belonging to P for

co-graphs.

 Theorem 18

Proof of Corollary 12. Let G  C be a co-graph. Then its complement

G is a co-graph, too. Hence, we can exploit the fact that (G) = (G) holds

and reuse the same idea as in Theorem 18 to decide whether G is -vertex-

stable.

 Corollary 12

Proof of Proposition 7. We prove both cases separately.

1. If G = G1  G2, it holds that (G) = max{(G1), (G2)}. Furthermore, if u is -critical for G, then it holds that (G - u) = (G) - 1. As we assume

22

R. Weishaupt and J. Rothe

u  V (G1), the removal of u from G only affects G1, i.e., G-u = (G1-u)G2. Therefore, it follows that (G) = (G1) > (G2) must hold, as otherwise the removal of u would not affect (G). Consequently, (G1 -u) = (G1)-1 is true and u is -critical for G1. 2. If G = G1 + G2 holds, we have

(G - u) = (G) - 1

 ((G1 - u) + G2) = (G1) + (G2) - 1

 (G1 - u) + (G2) = (G1) + (G2) - 1



(G1 - u) = (G1) - 1,

such that u is -critical for G1.

 Proposition 7

Proof of Proposition 8. Let G  C be a co-graph and e = {u, v}  E(G) an edge with two -critical vertices u, v  V (G). First, we study the case that G = G1 + G2 as well as u  V (G1) and v  V (G2) holds. Afterwards, we explain how to generalize the proof.
From the previous Proposition 7 we know that u must be -critical for G1 and v -critical for G2. According to Observation 4 from [6] there exists an optimal coloring c1 : V (G1)  N for G1, such that for all u~  V (G1) \ {u} it holds that c1(u~) = c1(u). In other words, there is a coloring c1 for G1, such that u is the only vertex in G1 of its color. A similar, optimal coloring c2 must exist for G2 with respect to v. For the combined graph with e removed, i.e., G - e, according to Observation 1 from [6], it must hold that (G - e)  {(G) - 1, (G)}. Consequently, we can reuse c1 and c2 from G1 and G2, assuming distinct colors sets for c1 and c2, to obtain a legal coloring of G with (G) colors. However, we can color u in the same color c2(v), as v is colored, and thus obtain a legal coloring for G - e with (G) - 1 colors. This is possible because
1. u is the only vertex in G1 colored in c1(u) by definition of c1, 2. no vertex u~  V (G1)\{u} is colored with c2(v), as c1(V (G1))c2(V (G2)) = 
holds, and 3. v is the only vertex in G2 with this color, by definition of c2, and there is no
edge between u and v.
Consequently, after removing e from G, we can color G - e with one color less than before, such that (G - e) = (G) - 1 holds and e is -critical.
Initially, we assumed that G = G1 + G2 with u  V (G1) and v  V (G2) holds. If G = G1  G2, there cannot exist any edge between vertices from G1 and G2. Hence, the only cases left are G = G1 + G2 or G = G1  G2 with both vertices in G1 or G2. Without loss of generality, let us assume that both vertices are in G1. Following Proposition 7, we know that both vertices are -critical for G1, as they are -critical for G. When we can show that e is -critical for G1, it immediately follows that e is also -critical for G. That is because if G = G1 +G2 and e is -critical for G1, we have (G1 - e) = (G1) - 1, such that
(G - e) = (G1 - e) + (G2) = (G1) - 1 + (G2) = (G) - 1

Stability of Special Graph Classes

23

holds. If G = G1  G2, there is one more argument to add. We know that u and v are -critical for G and G1. Consequently, (G1) > (G2) must hold, as otherwise, u or v cannot be -critical for G, since (G) = max{(G1), (G2)} is true. But then, it is enough to show that e is -critical for G1, since reducing (G1) by one via removing e also causes a reduction of (G) by one and hence, e is -critical for G, too.

At some point, we must arrive in the case that one vertex is in G1 and the

other vertex is in G2 and G = G1 + G2 holds, since the +-operation is the only

possibility to add edges between vertices in co-graphs.

 Proposition 8

Proof of Theorem 19. Let G  C be a co-graph. We can compute (G) efficiently and, according to Observation 1 in [6], for every edge e  E(G) and every vertex v  V (G) it holds that (G - e), (G - v)  {(G) - 1, (G)}. Thus, for every edge e  E(G), we proceed as follows to efficiently determine whether e is -critical or -stable for G: Denote e = {u, v} for u, v  V (G). Then it follows that G - u and G - v are induced subgraphs of G - e and G - e is a subgraph of G. According to the earlier referenced Observation 1, it must hold that

(G - v), (G - u)  (G - e)  (G).
{(G)-1,(G)}

Hence, if (G-v) = (G) or (G-u) = (G), which we can compute efficiently,

it immediately follows that (G - e) = (G). In other words, if u or v is -

stable, we know that e must be -stable, too.5 If u and v are -critical, it

follows by Proposition 8 that e is -critical. Since we can determine for every

node in V (G) efficiently, whether it is -stable, we can also efficiently determine

for every edge in E(G) whether it is -stable. Consequently, we can decide in

polynomial time whether G is -stable. Thus -Stability  P for co-graphs

follows.

 Theorem 19

Proof of Lemma 4. For a co-graph G  C, let us denote by W (G) the set of all cliques of G of size (G). Then the result easily follows by the recursive nature of co-graphs. To begin, if G = ({v}, ), obviously it holds that W (G) = {{v}}. If G = G1  G2, we have

 W (G1), W (G) = W (G2), W (G1)  W (G2),

(G1) > (G2), (G2) > (G1), else.

If G = G1 + G2, we have

W (G) = {w1  w2 | w1  W (G1), w2  W (G2)}.

5 This is in line with Observation 3 from [6].

24

R. Weishaupt and J. Rothe

Since we can compute a co-graph's co-tree as well as the size of its biggest

clique(s) efficiently, it follows that the previously described algorithm to compute

W (G) can be executed in polynomial time, too.

 Lemma 4

Proof of Lemma 5. First of all, it is obvious that by removing a vertex or

an edge from G we cannot increase (G). Hence, (G - v), (G - e)  (G)

holds. Furthermore, when we remove v from G, either v is part of all cliques in

G of size (G), so that (G - v) = (G) - 1 holds or v is not part of all of

them, so that (G - v) = (G) holds. Generally speaking, by removing a vertex

from G, we can either reduce a clique's size by one or leave it as it is. Now, let

e = {u, v}  E(G) be an edge of G. Either e is between two vertices of a clique

in G of size (G) or not. If that is the case, we reduce the clique's seize by one

or leave it unchanged. Hence, by removing an edge from G, we either reduce

(G) by one or do not alter it at all. Therefore, for all v  V (G) and e  E(G)

it holds that (G - v), (G - e)  {(G) - 1, (G)}.

 Lemma 5

Proof of Theorem 20. Let G  C be a co-graph. By Theorem 16 we can
compute  efficiently for G and all induced subgraphs. In order to decide whether G is -stable, we proceed as follows for every edge e = {u, v}  E(G):
Case 1: G = G1  G2 for two co-graphs G1, G2, and either u, v  V (G1) or u, v  V (G2) holds, since there are no edges between G1 and G2. Assume without loss of generality that u, v  V (G1). As (G) = max{(G1), (G2)}, we efficiently check whether (G2)  (G1) holds. In this case, we know that e cannot be critical to G, because even if e would be -critical to G1, using Lemma 5, we still have (G - e) = max{(G1 - e), (G2)} = max{(G1) - 1, (G2)} = (G2). Otherwise, if (G1) > (G2) holds, we study whether e is -critical for G1 by recursively selecting the appropriate case, this time with G1 as G. This is sufficient because if e is -critical for G1, it is also -critical for G.
Case 2: G = G1 + G2 and u, v  V (G1) or u, v  V (G2). In this case, it is sufficient to check whether e is -critical for the partial graph, i.e., G1 or G2, containing u and v. That is because (G) = (G1) + (G2) holds and so, if e is -critical for one of the two partial graphs, e is also critical for G. Once again,
we check this by recursively applying the appropriate case for the corresponding
partial graph.
Case 3: G = G1 + G2 and u, v are in different partial graphs. Assume that u  V (G1) and v  V (G2) holds. Now, in order for e to be -critical, there must exist only one clique V   V (G1) with (G1) = |V | as well as u  V  and only one clique V   V (G2) with (G2) = |V | and v  V . We can check both conditions efficiently using Lemma 4. If this is the case, then all other cliques in G1 are strictly smaller than V  and all other cliques in G2 are strictly smaller than V . Hence, the only clique of size (G) in G is V   V , containing u and v. Removing e = {u, v} from G causes (G) to be reduced by one since there
is only one clique of size (G) in G, and afterwards, it is missing the edge e in G - e. Therefore, only in this case e is -critical.
The number of recursive calls is limited by log(|V (G)|), since every in-
ner node of G's co-expression combines at least two nodes. Every case can be

Stability of Special Graph Classes

25

computed efficiently, such that we can determine for a co-graph G in time in

O(|E(G)| · log(|V (G)|) · |V (G)|c) for some c  N whether G is -stable. Conse-

quently, -Stability is in P for all co-graphs.

 Theorem 20

Proof of Corollary 13. Let G  C be a co-graph. Then G is a co-graph, such

that (G) = (G) holds. If G is -stable, which we can determine efficiently by

Theorem 20, it follows immediately that G is -stable. Hence, we can efficiently

determine whether a co-graph G is -stable, such that -Stability is in P for

co-graphs.

 Corollary 13

Proof of Corollary 15. Let G  C be a co-graph. Co-graphs are closed under

complements, so G is a co-graph as well and we can compute G from G efficiently.

According to Theorem 20, we can check in time polynomial in |G| whether G is

-stable. Using Proposition 5 2. from [6], we immediately know that G is - and

-unfrozen if G is -stable. Hence, both problems, - and -Unfrozenness are

in P for all co-graphs.

 Corollary 15

Proof of Corollary 16. From Corollary 13 we know that we can efficiently

decide for a co-graph whether it is -stable. Hence, let G  G be a co-graph.

Consequently, G is a co-graph, too, and we can calculate for G in time polynomial

in |G| whether it is -stable. Applying Proposition 5 1. from [6], we know that

if G is -stable, it follows that G is -unfrozen. Therefore, we can efficiently

calculate whether G is -unfrozen.

 Corollary 16

Proof of Theorem 21. Let G  G be a co-graph and e = {u, v}  E(G) a nonedge of G. Since G has at least two vertices, u and v, either G = G1 + G2 or G = G1  G2 for two co-graphs G1, G2 holds. We handle both cases separately:
1. If G = G1 + G2 is true, then e must belong either to E(G1) or to E(G2), since V (G1) × V (G2)  E(G), such that E(G) = E(G1)  E(G2). Without loss of generality assume that e  E(G1) holds. If e is -unfrozen for G1, i.e., (G1 + e) = (G1), then e is -unfrozen for G, since (G + e) = (G1 + e) + (G2) = (G1) + (G2) = (G) follows. Contrarily, if e is frozen for G1, i.e., (G1 + e) = (G1) + 1, then e is -frozen for G as well, as (G + e) = (G1 + e) + (G2) = (G1) + 1 + (G2) = (G) + 1 holds. Hence, it is enough to determine whether e is -unfrozen or -frozen for G1 and we can follow the argumentation of this proof recursively for G1.
2. If G = G1  G2 is true, e can belong to E(G1), E(G2) or E(G). We split this into two sub-cases: (a) If e  E(G1) or e  E(G2), we proceed as follows. Without loss of generality assume e  E(G1). Since (G) = max{(G1), (G2)} holds, an increase of (G1) affects (G) only if (G1)  (G2). Otherwise, e is -unfrozen for G (but not necessarily for G1). If (G1)  (G2), then it holds that if e is -unfrozen for G1, it follows that e is -unfrozen for G, since (G + e) = max{(G1 + e), (G2)} = (G1 + e) = (G1) = (G) is true. Similarly, if e is -frozen for G1, it follows that e is -frozen for

26

R. Weishaupt and J. Rothe

G, since (G + e) = max{(G1 + e), (G2)} = (G1 + e) = (G1) + 1 = (G)+1. Consequently, it is enough to determine whether e is -unfrozen
or -frozen for G1 and we can follow the argumentation of this proof recursively for G1. (b) If e  E(G) \ (E(G1)  E(G2)), then u  V (G1) and v  V (G2) follows. Now, if (G1) = (G2) = 1 is true, it follows that e is -frozen for G, since (G+e) = 1+1 = 2 > 1 = max{(G1), (G2)} = (G). Contrarily, if (G1) > 1 or (G2) > 1, it follows that e is -unfrozen for G since G1 and G2 share no edge but e. Because of that we can arrange the colors for V (G1) and V (G2) in such a way that both vertices incident to e have different colors, resulting in (G + e) = (G).

Following these cases, we can efficiently determine for every nonedge e  E(G)

whether it is -frozen or -unfrozen for G, resulting in -Unfrozenness  P for

all co-graphs.

 Theorem 21

H Gallai's Theorem

For the sake of self-containment, we here state Gallai's theorem [7], which is used to obtain several of our results, and we also provide its proof.

Theorem 22 (Gallai's theorem). For every graph G  G, it holds that

|V (G)| = (G) + (G).

Proof. Let V   V (G) be a vertex cover for G of size (G) and assume that there are two vertices u, v  V \ V  which are adjacent, i.e., {u, v}  E(G). This contradicts the fact that V  is a vertex cover for G, as {u, v} would not be covered by V . Consequently, V \ V  must be an independent set for G and we
obtain

(G)  |V (G)| - (G).

(1)

Let V   V (G) be an independent set for G of size (G). For every edge {u, v}  E it must hold that either u or v is not in V , as this would contradict the fact that V  is an independent set. Hence, V \ V  must be a vertex cover
for G and we obtain

(G)  |V (G)| - (G).

(2)

Equation (1) yields (G)+(G)  |V (G) and Equation (2) yields (G)+(G)  |V (G), such that we obtain

|V (G)| = (G) + (G).

This completes the proof.



