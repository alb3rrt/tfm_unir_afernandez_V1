Automating Speedrun Routing: Overview and Vision

Matthias Groﬂ TH Ko®ln Germany
0000-0003-2711-6938

Dietlind Zu®hlke TH Ko®ln Germany
0000-0003-3751-5887

Boris Naujoks TH Ko®ln Germany
0000-0002-8969-4795

arXiv:2106.01182v1 [cs.NE] 2 Jun 2021

Abstract--Speedrunning in general means to play a video game fast, i.e. using all means at one's disposal to achieve a given goal in the least amount of time possible. To do so, a speedrun must be planned in advance, or routed, as it is referred to by the community. This paper focuses on discovering challenges and defining models needed when trying to approach the problem of routing algorithmically. It provides an overview of relevant speedrunning literature, extracting vital information and formulating criticism. Important categorizations are pointed out and a nomenclature is build to support professional discussion. Different concepts of graph representations are presented and their potential is discussed with regard to solving the speedrun routing optimization problem. Visions both for problem modeling as well as solving are presented and assessed regarding suitability and expected challenges. This results in a vision of potential solutions and what will be addressed in the future.
Index Terms--speedrun, routing, graph models, optimization
I. INTRODUCTION
What remains after you first time finished your favorite game? There are different options like changing to another game, play it once again in a different way or getting deeper into the game and try to solve it faster. And then once again, even faster. This approach ultimately leads to speedrunning, i.e. trying to solve the game as fast as possible. That has become a rapidly growing sub-community surrounding video games. One might consider special techniques, later referred to as glitches, to speed up the run or strictly object to these. Either way, for a lot of players, speedrunning presents the ultimate challenge.
The charity driven speedrunning live event Awesome Games Done Quick 2020 has attracted a maximum of 237,523 concurrent viewers [1] and from 2011 to 2020 the event's donation total has been raised from 52,519.83 to 3,164,002.06 USD [2]. Despite its popularity, scientific research on this specific field of esports is still only found sporadically. In one of the first works that formally covered speedrunning, Newman describes it as "[...] concerned with completing videogames in as speedy a time as possible" [3].
To do so, speedrunners traverse the progression mechanics of a given game as quickly as possible. This can mean very different things depending on the game, from going around a racing track optimally to solving puzzles in the most efficient order.
Being a discipline building heavily on optimization, it's only natural that speedrunning has become subject of various

approaches to enhance this optimization algorithmically. As diverse as the game mechanics are, so are the means by which they have been tried to be supported.
During the course of this work, Nintendo's famous ActionAdventure title The Legend of Zelda: Ocarina of Time (OoT) will be used as a working example.
In Speedruns and Categories (II), this work elaborates on the general description of speedrunning as well as the terminology as used in the community. The Related Work section (III) focuses on existing scholarly works regarding speedrunning, including nomenclature to support professional discussions. Connections are made and criticism is formulated at the end of the section. Equipped with this knowledge, the Envisioned Models and Challenges (IV) section presents approaches and ideas to formalize the problem of routing, the main focus of this paper. Different models are envisioned and emerging challenges are critically discussed. After these approaches to define the underlying problem, the Prospective Solutions (V) section elaborates on possible approaches to design algorithms to address this problem. Finally, the paper closes with Conclusions and Outlook (VI). All game titles used as reference are listed in the Ludography at the end of this paper.
II. SPEEDRUNS AND CATEGORIES
Speedrunning in general means to play a game fast, i.e. using all means at one's disposal to achieve a given goal in the least amount of time possible. However, what is at one's disposal and what constitutes the given goal can vary widely. To be comparable to each other and to give consistency for the runners, there are rules imposed on speedruns. These rules are decided upon by the game's community, often by means of polls. For a run to be listed on its leaderboard, it must comply to these rules, proven by uploaded footage of the corresponding runs. As the largest accumulation of speedrun footage and leaderboards, the website speedrun.com will be used as point of reference here [4]. Some of the rules concern the form of proof each runner must submit with a claimed completion time, but this paper will only take the rules imposed on actual gameplay into account. There are some site-wide rules that apply to all runs on speedrun.com, e.g. the ban of any hardware manipulation. There can also be game-wide rules all runs of this particular game must

comply to. Most of the site's leaderboards additionally list multiple categories for the same game. These categories are defined by different rulesets for a game's speedruns, each with their own leaderboard. Although multiple games might share similar categories, this does not necessarily mean any similarity beyond the names. The underlying rulesets can differ largely from game to game. Popular categories for many games are any%, 100% and Glitchless.
any% Runs under the category any% usually don't have any additional rules imposed on them, other than getting from a defined starting state to a defined ending state by any means possible, while respecting community-wide rules. The name is derived from the fact, that any percentage of the game might be completed before ending the run. This also usually means that these speedruns involve a lot of unconventional gameplay using programming mistakes and inconsistencies in the game to lower the completion time as much as possible. This unrestricted use of such glitches and exploits ≠ both of which will be discussed in more detail later on in Related Work (III) ≠ often change the gameplay to a degree that makes the run look very different from a regular playthrough of the game.
100% runs need to accomplish every objective in the game before completing it. The definition of "every objective in the game" has to be agreed upon by the community and defined in the category's ruleset. If the game provides a completion percentage display, e.g. in a saving, loading or status menu, it is used as the authoritative reference most of the time. The nature of these runs vary heavily depending on the game being run. As there often are a lot of objectives to achieve, the usage of glitches is prevalent.
Glitchless Sometimes, newfound glitches completely trivialize a game's speedrun or parts of it. Other times, the game's community finds a speedrun without glitches more appealing to do or watch [5]. In such cases, the glitches in question can be banned in the categories' rulesets, or Glitchless leaderboards can be created. As the name suggests, Glitchless categories prohibit the use of glitches, leading to runs more similar to casual playthroughs. Again, what constitutes a glitch is agreed upon by the community, as it is not a simple distinction [6]. Alternatively, the ruleset can list all allowed techniques, all banned techniques, or both.
Categories can be combined as applicable, e.g. OoT has, among others, an any%, a 100%, a Glitchless any% and a Glitchless 100% leaderboard on speedrun.com. The resulting difference in permitted techniques and completion requirements have a heavy impact on the run.
Another important categorization of speedruns is the differentiation between a Tool Assisted Speedrun (TAS) and a Real-Time Attack (RTA) run. RTA runs are performed by a human in real-time. Although the term "speedruning" can be seen as more of an umbrella term, RTA runs are the most prevalent form of speedrunning and are generally tied to the term unless specified. A TAS, in contrast, is prerecorded and

assisted by tools, such as being able to create exact game state save points at arbitrary times. Every input for every frame or simulation step in the game is handcrafted and scripted beforehand and then played back to create a perfectly optimized speedrun. TASs are often created to demonstrate what could be theoretically achieved in a perfect run, or just for entertainment. A variation of TASs are Low Optimization Tool Assisted Demonstrations (LOTADs as referred to in the speedrunning community), which usually demonstrate more exotic ways of playing a game or are used as reference for other runs.
One challenge that every speedrun, regardless of category, has to accommodate is routing. With regard to speedrunning, routing is the act of planning out a playthrough of a game in a fashion that needs the least amount of time possible. Often, the game is broken down to individual events, depending on the game (locations or characters to visit, items to collect, checkpoints to drive by etc.). Then, a route trough the game world has to be constructed, that covers all events needed for game completion. In many cases, specific vital events have preconditions in form of other events, that have to be incorporated into the route. A good route is crucial for optimizing any given speedrun. That said, this statement of course holds only true as long as the player has any choice on the ordering of the events. Perfectly linear games may not have a strong focus on routing, if any at all.
III. RELATED WORK
Aside from the categories and nomenclature presented earlier, there are also some scholarly works that categorize different aspects of speedrunning. Besides the gain in public interest in speedrunning, only a small amount of such works on this field has emerged approximately in the last decade. While a lot of these works focus on the interesting narrative and sociological consequences of the emergence of speedrunning as a mode of play [3], [5]≠[12], this body also includes terminology and covers practical problems of speedrunning.
Newman and Scully-Blaker both introduce nomenclature regarding the nature of speedruns and the involved activities employed by speedrunners.
A. Newman's Activity Categories
In a recent work, Newman [10] presents a thorough insight into the narrative consequences of speedrunning on the example of OoT. They also introduce categories of speedrunning activity: hidden affordances, exploiting inconsistencies and manipulation and reconstruction.
hidden affordances In Newman's definition hidden affordances can be broken down to optimally utilizing the designerly intended game mechanics. For example in OoT going backwards is faster than going forwards, so speedruns almost always consist of Link (the protagonist of most of the games from the Legend of Zelda franchise) walking backwards a lot of the time, which is

referred to as backwalking1. While Newman also states that "`designerly intent' is, obviously, difficult to assert", they use as much official documentation about the game as possible to do so. exploiting inconsistencies is the most expressive designation. Newman details it as "exploit[ing] programming bugs and systemic errors in the code's design and execution" [10]. An example of this would be clipping, a technique used in speedruns of many games. Clipping refers to the penetration of walls or other geometry in the game world the player is not supposed to go through. manipulation and reconstruction The third category of activity is denoted manipulation and reconstruction. Newman describes it as follows:
"The outcome of the technique is the creation of a connection in code that is subsequently rendered in polygonal space between regions in the game's spatial and narrative architecture that are as palpably unintended by OoT 's developers as they are disruptive and apparently injurious to the integrity of the game's myth." [10]
Activities of this category include techniques that consciously makes use of the game's inner mechanics a player would normally be unaware of. Creating techniques like these in many cases requires extensive knowledge about the game's logic and / or code. The Reverse Bottle Adventure (RBA) technique for example makes use of knowledge about the IDs that each item in the game internally is identified by. With this, executing very specific actions in the game can add or remove specific items from the player's inventory, based on the ID or amount of other items already in the player's inventory [13].
These categories can help to define the earlier introduced term glitch. Although there is no universal consensus in the community, activities that fall into Newman's categories of exploiting inconsistencies and manipulation and reconstruction are often referred to as glitches. This work will follow this specification.
B. Scully-Blaker's Speedrun Categories
In Scully-Blaker's work [7], differentiations are made between finesse runs and deconstructive runs, regarding the degree of glitch exploitation and sequence breaking.
finesse runs are detailed as "runs in which the player interacts with the game as an extreme extension of what a game designer may consider an `ideal' player [...] largely respecting the game's `narrative boundaries' while navigating them with an extreme level of efficiency" [7]. Put differently, one could say a finesse run consists of playing a game as intended ≠ as far as ascertainable ≠ but very fast.
deconstructive runs on the other hand do not maintain any boundaries. These runs are "runs in which the player
1To put it in Newman's words: "That which is in front of Link is space already consumed." [10]

exploits glitches within the game to break scripted sequences" [7], skipping and reordering game content at will, as long as it serves the primary directive: speed.
Scully-Blaker also introduces the concepts of explicit rules and implicit rules, implicit rules being the rules that a player is supposed to follow and be restricted by, opposed to explicit rules that the game's code actually imposes (e.g. the implicit rule "The avatar cannot go through solid walls" opposed to the explicit rule "The avatar cannot go through solid walls, except with a speed greater than 10 units per second and an approaching angle greater than 85∞").
C. Routing
As outlined at the end of the Introduction (I), speedruns have to be planned in advance, a procedure referred to as routing. Newman [3] writes:
"FPSs [First-Person-Shooters] are favoured because of their apparent non-linearity and the scope they seem to afford gamers to invent and create their own routes and develop their own styles that move them through the gameworld."
Newman goes on to also include Role-Playing-Games (RPGs) into these thoughts.
Speedrun routes consist of a number of events, connected by dependencies, starting with the defined opening event and ending with one or multiple possible ending events. The problem of finding the ordering that takes the least amount of time possible is combinatorial in nature. Some approaches to formalize and algorithmically address the problem of speedrun routing have been documented [14]≠[16] but it is still underrepresented in research. In these approaches, routing is usually defined as a graph shortest path problem.
Lafond [14] takes the action-platform title Mega Man as well as its successors Mega Man 2 and Mega Man 3 as examples. One key feature of these 2D Jump'n'Run variants is the aquisition of a new power after clearing each stage of the game. These powers can be used to speed up subsequent stages. All stages have to be cleared, while the order in which the stages are cleared is mostly left to the player. Lafond defines sets of stages S = {S1, ..., Sn}, with each stage Si = {s1, ..., sk} being a set of events on which time can be saved during a run2. This time save depends on previously completed stages, giving sj : S  N as a function mapping each previously completed stage to a specific time save for each event2. They continue to form a dependency graph for a given game to be optimized, providing a route with maximum time save through the game. Even under favorable assumptions, Lafond [14] proves this problem to be W[2]-hard [17].
A more informal approach has been used by Iskovs [15] with the working example of the popular game The Elder Scrolls III: Morrowind As a typical open-world RPG title, there is a lot of traveling, character skill development and NonPlayer-Character (NPC) relationships involved in the game
2Symbols altered from original to prevent ambiguities

mechanics. The category Iskovs takes on is all factions, consisting of becoming the leader of all possible factions of NPCs in the game. Taking into account the mentioned aspects among others, they formed an extensive quest dependency graph. Iskovs then continues to use an evolutionary algorithm to generate and improve on possible routes through the game progression. A lot of handcrafted customizations are then applied to minimize the run's time even further. This yields a very specific routing tool for a single game. At the time of writing, there is only one entry in the corresponding leaderboard on speedrun.com, the creator of which learned the route from Iskovs' efforts [18].
Another informal example of algorithmic routing has been conducted by speedrunner JaV [16], who breaks down a track in the car racing game TrackMania Nations Forever to a variation of the travelling salesperson problem. Track completion in this game is done by passing a number of checkpoints. In JaV's approach, these checkpoints are represented as a complete weighted digraph. They then manually remove specific implausible edges from the graph and use a genetic algorithm [19] to generate near-optimal solutions. The used algorithm had to be adapted to avoid certain implausible combinations and the solutions had to be curated, i.e. manually test-driven in the game to check for plausibility. Though this adaptions resulted in a specialized tool, it is one of the rare examples that led to an improvement on the leaderboard times of a game.
Taking it to the extreme, the process of routing can further be broken down to single simulation steps of a game's engine. In 2009, a competition has been conducted with "The focus [...] on developing controllers that could play a version of Super Mario Bros as well as possible" [20]. The competition brought forth a number of submitted tools and algorithms to automate playing a variant of the popular game Super Mario World. The winner of the competition modeled the game state of each simulation step as a node of a graph, and each possible next state (depending on different inputs) as adjacent nodes. Then, the shortest path to the goal ≠ or, as an approximation within available knowledge, to the right screen edge ≠ was determined through a variation of the A* algorithm [21]. The second and third best contributors of the competition used similar approaches.
D. Criticism
Glitches are often what differentiates Scully-Blaker's categories of runs from each other. Scully-Blaker's definitions of run categories can be supported by Newmans terminology of activities. While finesse runs drive hidden affordances to the extreme but leave the scripted game sequence and narrative structures mostly intact, deconstructive runs employ glitches and make heavy use of them, often times distorting and/or completely reassembling the event sequence. However, these two categories are not to be seen as distinct. The given descriptions are more likely the two extremes of the space in which speedruns and their categories range.

Given this relation between Newman's and Scully-Blaker's terminology, connections to the leaderboard categories can be drawn as well. As any% speedruns often seek to use whatever means possible to get to the defined end state, usage of glitches is prevalent. More so, the used glitches can often be classified as Newman's exploiting inconsistencies or manipulation and reconstruction activities, therefore these runs often range more in the realm of deconstructive runs. On the other side of the spectrum there are the Glitchless leaderboard categories, which are governed by strict rules, mostly oriented on narratively and designerly intentions. As such, these runs can be categorized more in the realm of finesse runs.
In a recent work, Ricksand [6] expresses disagreement with Scully-Blaker's categorizations, listing lack of a definition of the term glitch, lack of definition of completion requirements and inconsistencies in definition of an ideal player as reasons. However, considering distinctions already made in this paper, Scully-Blakers categories are considered suitable here. As a slight addition, Scully-Blaker's definition of an "ideal player" can be extended by means of Newman's hidden affordances, which then would include more techniques challenged by Ricksand like backwalking.
Ricksand also questions the current procedure of rule acquisition in the speedrunning community. In their work, they suggest that the current process of voting on rulesets is flawed because it results in rules being arbitrary. However, the argument can be made that speedrunning in its very essence is arbitrary. Ultimately, Ricksand proposes the following model:
"Mechanic m in game g is allowed in a glitchless speedrun if and only if use of m does not contradict the fictional truth regarding the world in which the story of g takes place." [6]
Not only does this not account for any technical glitch that doesn't get reflected by anything in the game world, it also introduces the concept of fictional truth in order to legitimize glitchless rulesets. Fictional truth however is partly up to the audience of a narrative [22], rendering it arbitrary.
If nothing else, this disagreement shows the difficulty in deciding what should be categorized as a glitch, in scholarly work as well as in the speedrunning community.
The 2009 Mario AI Competition [20] did yield a number of good performing agents. This competition can be seen as a TAS creation competition: Although there were no input prerecordings and the competition scoring incentivised total progression amount rather than speed, the submitted agents often played the game extremely fast. Those efforts resemble TASs rather than RTA runs and have mostly been focusing on what will be called operational level routing or operational routing in this paper, i.e. optimally planning or deciding on specific inputs at specific frames or simulation steps to reach a given short term goal or state. This focus and the success of the developed tools is partly due to a property of the 2Dplatformer nature of the Super Mario titles ≠ going right on the screen is almost always a save indication of progress. In fact, this metric has been used by the 2009 competition's winner as an heuristic for the A* algorithm [20]. Optimizing

the traversal of the game's progression mechanic meant going right as quickly as possible. However, this holds true only for the specific variation of the Super Mario title used (consisting only of horizontally oriented levels, progressing to the right) and only if isolated levels are taken into account. In contrast, to minimize the total time of an entire game's completion as the previously presented works did, strategic level routing or strategic routing is employed. As a result, speedruns of games which rely heavily on strategic routing could not yet benefit from these advances. The strategic layer of planning the traversal between levels ≠ or, more generally speaking, between different events, from a speedrun's opening event to an ending event ≠ is generally what is referred to as routing in the speedrunning community as it is in this work.
In many cases, routing is not a one-time process. Especially with deconstructive runs [7] with a high amount of inconsistency exploiting and manipulation and reconstruction activities, routes are significantly reworked with new glitches and exploits being found, due to their often disruptive nature regarding the game's intended event sequence. This act of altering the game's intended order of progression by means of glitches is referred to as sequence breaking in the speedrunning community. This leads to a challenge when defining the underlying routing problem, as these often unpredictable changes in routing possibilities have to be accounted for. Glitchless speedruns can mostly be characterized as finesse runs [7], as the use of glitches is prohibited in these rulesets. Therefore, the routing underlies more consistent structures and can easier be defined formally.
Some challenging aspects of speedrunning have been engaged by the presented works, others are yet left unaccounted for.

IV. ENVISIONED MODELS AND CHALLENGES
With the knowledge compiled to this point, models can be defined. Given the outlined nature of the routing problem, graph representations will be favored. The presented models are considered visions that can be elaborated and improved on rather than final solutions. Again, OoT will be used as the working example and results may be less applicable to other games or genres.

A. Weighted Game Event Digraph As a first approach, a weighted game digraph is assumed

G = (V, E, w) ,

(1)

with nodes V = {v1, ..., vn} as the set of all events relevant to the game's progression. Each possible traversal between these events make up the set of directed edges E = {e1, ..., em} between the nodes representing the given events. Edges are weighted with a function w : E  R, assigning each edge the time it takes to traverse between the in-game events in the given direction. Edge directions are considered as this traversal time can differ by direction. Note that the term traversal is used as opposed to travel, as node traversal does not necessarily involve in-game movement. The routing process would then

mean to find the shortest path between node v resembling the starting event and v representing the ending event ≠ or a set V of ending events ≠, traversing all events Vr  V deemed required by the category's ruleset.
This rudimentary model already introduces several challenges:
1) Defining the Nodes: "Events relevant to the game's progression" is not defined and it is nontrivial to do so.
2) Defining the Edges: The extend of "each possible traversal between events" has underlying restrictions that have to be defined as well.
3) Dynamic Weights: Edge weights are not consistent but rather change with graph traversal.
4) Repeatable Events: A subset of the events can be repeated once triggered, while others can not, further increasing the complexity.
5) Multiobjective Optimization: The model does not account for any dimension other than time in a possible route.
These challenges will be elaborated on in succession, followed by possible ways to accommodate them within the problem model.
1) Defining the Nodes: As for the definition of "events relevant to the game's progression", in the spirit of optimization it could be argued that only the items needed to qualify for the category should be involved, i.e. reducing (1) to

Gr = (Vr, Er, wr) ,

(2)

with Er  E being the reduced set of edges remaining between Vr ≠ weighted by time of traversal wr ≠ , as everything else would constitute a detour and thus cost additional overall time. Routing could be accomplished by finding the shortest topological ordering of Gr. However, an optimization frequently employed by speedrunners renders this reduction unsuitable.
OoT speedruns make heavy use of the resources at the player's disposal, including but not limited to Link's health, explosives (bombs and bombchus) and (in-game) time of day. A detour early on in a route to get more explosives can significantly speed up the rest of the route, as many travelling times can be drastically reduced due to glitches using bombs as a key component. For example, the bombchu item ≠ a moving, explosive device ≠ is not required by many OoT categories, yet many speedruns start out their route by collecting the nearest supply of bombchus in order to speed up the rest of the route enough to make it worthwhile. Thus, in fact, the opposite argument could be made: Expanding the set of events by all possible item pickups and refill locations as well as taking resource management into account can minimize the time even further. This obviously would increase the problem's complexity.
2) Defining the Edges: The definition of "each possible traversal between events" depends on the focus of the route. Considering only RTA viable routes this can be put as "humanly doable and complying to the category's ruleset".

Finding all possible edges and assigning weights to them would require manually checking for category viability and timing the traversal between any two events in the game in both directions, which would be very time consuming and error prone. To counteract this complexity increase, nodes can be clustered by spatial proximity. Events and items that are very close to each other and / or obtainable by similar means can be clustered to single nodes. Another measure can be to approximate traversal times or using duration categories as integer numbers instead of actual timings, trading reduced complexity for uncertainties.
3) Dynamic Weights: As suggested above, edge weights are not static, but can and frequently do change with the already traversed nodes and in some cases (e.g. when in-game time of day is involved) with time. Even when considering only required events Vr, the items collected can also enhance the player's ability to traverse the game world in a speedy fashion in different ways they may or may not be intended for. This effectively changes the edge weights w while traversing the game graph. This hidden gain can lead to faster overall routes by taking detours early on that may have been undiscovered when only taking the starting weights into account.
Lafond [14] partly accommodated this by weighting the graph edges differently. For weighting an edge from stage Si to Sj they use the time saved in Sj as the result of doing Si beforehand, rather than the time needed to traverse between the stages. Considering multiple previously cleared stages and thus possibly multiple ways of clearing a stage, it is assumed that for every event the immediate best alternative is used.
The OoT equivalent for this would be to weight an edge from event vi to vj by the time saved by traversing vi before vj. This could constitute a way to significantly simplify the game graph, as many items and events do not provide any time save and thus have no impact on traversal speed.
Another way to handle dynamic edge weights would be to model game states rather than events as the graph's nodes. Depending on the information considered for defining the states, this can lead to a very large amount of nodes. This is elaborated on in section Weighted Game State Graph (IV-B).
4) Repeatable Events: Some of the events mentioned above are repeatable, especially when considering item pickups and refills. For example, grass patches in OoT can drop bomb pickups when destroyed, and the patch regrows every time the location is reloaded. Thus, to repeat and benefit from a desired event, it might be required to traverse to another node and back to the desired event's node. Other events are one-time only. This holds true for all pickups and items from chests as well as for most story progression events. These events' nodes can be removed from consideration once traversed. Section Weighted Game State Graph (IV-B) discusses the possible implications of this on a graph representation.
5) Multiobjective Optimization: The objective of speedrunning this far has only been considered a one-dimensional problem, solely dictated by time. While speed is in fact the primary directive of speedrunning, there is another dimension that can be taken into account: difficulty. Many speedrunning

techniques require very precise inputs, sometimes precise to the frame. Some techniques aren't even possible to be performed by humans but are exclusive to TASs. Similarly, other aspects can be taken into consideration when constructing a route, like the aforementioned hidden gain or resource management. A consideration of possible changes to a graph model is given in section Vector Valued Game Graph (IV-C).

B. Weighted Game State Graph
One way to engage the challenge of Dynamic Weights (IV-A3) is to consider the nodes Vs of a state graph Gs, reflecting game states, rather than events:

Gs = (Vs, Es, ws)

(3)

Similar to a Weighted Game Event Digraph (IV-A) from (1), the edges Es represent traversals between different states of the game, weighted by the time taken to do so ws. If these states account for all necessary elements described above (location, items, item counts, time of day, etc.) this would eliminate edge weight dynamics. However, this would lead to an immense increase of nodes and edges. In fact, the presence of repeatable events would likely render this graph infinite.

C. Vector Valued Game Graph
The challenge of Multiobjective Optimization (IV-A5) can be taken into account by a graph

Gm = (V, E, wm) ,

(4)

with a number n of weighting dimensions, which would yield vector valued edge weights and thus a vector valued weighting function wm : Em  Rn. For example, a second vector element can be used to assign difficulty ratings to graph traversals. This can be used to parameterize possible routing algorithms by the runner's skill level. When including TASs, very high difficulty ratings can be assigned to TAS-only traversals.
Another possible application for vector valued edge weights is to represent the hidden gain introduced in Dynamic Weights (IV-A3) as a vector element. This would constitute an approximation, but could be a useful reduction of complexity. Weight dynamics could be replaced by this. In case of repeatable events, this hidden gain value might decrease when the according node or edge is traversed, to prevent indefinite looping. Also, difficulty and hidden gain ratings can be combined to yield three-dimensional vectors.
Vector valued edge weights open up the problem to multiobjective optimization [23], [24] and pathfinding algorithms [25], [26], resulting in non-dominated sets of possible routes, possibly further increasing creativity and idea sparking in speedrun routing.
The events V and their traversals E can also be replaced by states Vs and their respective traversals Es from (3), resulting in a combination with a Weighted Game State Graph (IV-B), introducing all advantages and disadvantages pointed out there.

V. PROSPECTIVE SOLUTIONS
After a model has been chosen to represent the routing problem, an optimization method has to be found. All concepts outlined are again specific to OoT, applicability to other games and genres has to be assessed. Good solutions should consider the challenges identified in Envisioned Models and Challenges (IV) and look out for new, unidentified challenges. Of course, solutions should also respect the complexity of a given run. For example, a glitchless route for a mostly linear game with finesse run characteristics resembles different challenges than an any% route for a highly non-linear game.
When modeling an Event Graph with traversal times as edge weights, conventional pathfinding algorithms like Dijkstra's [27] or A* [21] are unsuitable given the edge dynamics. Same applies to algorithms like Multiobjective A* [25] in the case of vector valued edge weights. For edge weights to become static, a State Graph with extensively detailed states is needed, vastly increasing the amount of nodes.
Considering time save as edge weight similar to Lafond's approach [14] can simplify the graph. However, some edge dynamics will still prevail, as some techniques need multiple items to be collected or events to be triggered beforehand.
Two of the presented works on speedrun routing [15], [16] employed evolutionary algorithms (EAs) [28]≠[30] to handle the complexity involved. An approach using EAs for (multiobjective) optimization [31], [32] seems promising, including assertions to exclude implausible combinations. Next to the implementation of different EA approaches, also the use of other metaheuristics is envisioned [33], [34]. For example, ant colony optimization algorithms [35] have already proved their suitability to solve pathfinding problems [36], [37].
Another possible approach is to conduct the traversal by an agent, deciding further progression after every edge traversal. Decision making can be conducted by above mentioned approaches, combinations of them, or by other means, such as a neuronal network taking information about the graph and previous traversal as input. Applications of machine learning for decision making in game agents ≠ especially in form of deep reinforcement learning ≠ suggest potential in this approach [38]≠[40]. With regard to edge dynamics, an agent must take Link's inventory, the previously traversed nodes and edges as well as other relevant information into account to maintain the Markov property.
VI. CONCLUSIONS AND OUTLOOK
Routing is an integral part of most speedrun categories of most games. As such, having tools at disposal to automate this process can greatly help speedrunners and open up complex games and genres to less experienced players. However, speedrun routing is hard, whether done manually or algorithmically.
Given the complexity of OoT's routing situation and the fact that despite its age new, heavily exploitable glitches and techniques are being found to this day, it is unreasonable to assume that a globally optimal route will be found that can not

be improved on. In this case, routing algorithms can be seen as a tool for speedrunners to support their routing efforts by new influences. Moreover, there are speedrunners who enjoy manual routing as an important part of speedrunning. Solving this problem computationally would, if possible at all, render this process obsolete.
This work provides a first overview of works important for the field of speedrunning. These are critically discussed and relevant terminology is pointed out to support professional discussion. Moreover, different approaches are presented to model the identified speedrunning routing optimization problem and corresponding challenges are depicted. Finally, prospective solutions for the challenges are outlined.
Future works can discuss further on one or more of the outlined approaches for modeling and solving the problem of speedrun routing. Applying the findings to other games and genres can uncover further possibilities not apparent when only focusing on a single game.
As a final note, the topic suggests itself for competitions. Participants can compete in different ways, such as finding the most accurate route representation model, solving given representations, or of course creating a full route through a given game. In the latter case, support of actual speedrunners would be needed to assess plausibility.
LUDOGRAPHY
The Legend of Zelda: Ocarina of Time (OoT) Developed by: Nintendo (1998) Published by: Nintendo, Japan Platforms: Nintendo 64
Super Mario World Developed by: Nintendo (1990) Published by: Nintendo, Japan Platforms: SNES
Mega Man / 2 / 3 Developed by: Capcom (1987 / 1988 / 1990 resp.) Published by: Capcom, Japan Platforms: NES
The Elder Scrolls III: Morrowind Developed by: Bethesda Softworks (2002) Published by: Ubisoft, France Platforms: PC (Windows), Xbox
TrackMania Nations Forever Developed by: Nadeo (2008) Published by: Focus, France; Enlight, USA; Deep Silver, Germany; Digital Jesters, UK Platforms: PC (Windows)
REFERENCES
[1] "GDQStat.us," [accessed 13. May 2021]. [Online]. Available: https://gdqstat.us/previous-events/agdq-2020/?series=0
[2] "GDQ Tracker - Event List," [accessed 14. May 2021]. [Online]. Available: https://gamesdonequick.com/tracker/events/
[3] J. Newman, Playing with Videogames. London: Routledge, Jun. 2008. [4] "speedrun.com," [accessed 17. May 2021]. [Online]. Available:
https://www.speedrun.com/oot [5] R. Scully-Blaker, "Re-curating the Accident: Speedrunning as Commu-
nity and Practice," Masters, Concordia University, Sep. 2016. [6] M. Ricksand, ""Twere Well It Were Done Quickly": What
Belongs in a Glitchless Speedrun?" Game Studies, vol. 21, no. 1, Apr. 2021, [accessed 26. May 2021]. [Online]. Available: http://gamestudies.org/2101/articles/ricksand [7] R. Scully-Blaker, "A Practiced Practice: Speedrunning Through Space With de Certeau and Virilio," Game Studies, vol. 14, no. 1, Aug. 2014, [accessed 26. May 2021]. [Online]. Available: http://gamestudies.org/1401/articles/scullyblaker

[8] D. Ford, "Speedrunning: Transgressive play in digital space," in Pro- [34] K. So®rensen, "Metaheuristics--the metaphor exposed," Inter-

ceedings of Nordic DiGRA 2018, Bergen, Norway, Nov. 2018.

national Transactions in Operational Research, vol. 22,

[9] R. Scully-Blaker, "The Speedrunning museum of accidents,"

no. 1, pp. 3≠18, 2015. [Online]. Available:

Kinephanos, no. Preserving Play, Special Issue, pp. 71≠

https://onlinelibrary.wiley.com/doi/abs/10.1111/itor.12001

88, Aug. 2018, [accessed 26. May 2021]. [Online]. Available: [35] M. Dorigo and G. Di Caro, "Ant colony optimization: A new meta-

https://www.kinephanos.ca/2018/the-speedrunning-museum-of-accidents/

heuristic," in Proceedings of the 1999 Congress on Evolutionary

[10] J. Newman, "Wrong Warping, Sequence Breaking, and Running through Code," Journal of the Japanese Association for Digital Humanities,

Computation-CEC99 (Cat. No. 99TH8406), vol. 2, Jul. 1999, pp. 1470≠ 1477 Vol. 2.

vol. 4, no. 1, pp. 7≠36, 2019.

[36] V. Rishiwal, M. Yadav, and K. V. Arya, "Finding Optimal Paths on

[11] J. Hay, "Fully Optimized: The (Post)human Art of Speedrunning,"

Terrain Maps using Ant Colony Algorithm," International Journal of

Journal of Posthuman Studies, vol. 4, no. 1, pp. 5≠24, 2020.

Computer Theory and Engineering, vol. 2, no. 3, pp. 416≠419, Jan.

[12] M. Hemmingsen, "Code is Law: Subversion and Collective Knowledge

2010.

in the Ethos of Video Game Speedrunning," Sport, Ethics and Philoso- [37] J. A. Mocholi, J. Jaen, A. Catala, and E. Navarro, "An emotionally

phy, pp. 1≠26, Jul. 2020.

biased ant colony algorithm for pathfinding in games," Expert Systems

[13] "Reverse Bottle Adventure - ZeldaSpeedRuns," [ac-

with Applications, vol. 37, no. 7, pp. 4921≠4927, Jul. 2010.

cessed

14.

May

2021].

[Online].

Available: [38] G. Lample and D. S. Chaplot, "Playing FPS games with deep

https://www.zeldaspeedruns.com/oot/ba/reverse- bottle- adventure

reinforcement learning," CoRR, vol. abs/1609.05521, 2016. [Online].

[14] M. Lafond, "The complexity of speedrunning video games," in 9th Inter-

Available: http://arxiv.org/abs/1609.05521

national Conference on Fun with Algorithms (FUN 2018), ser. Leibniz International Proceedings in Informatics (LIPIcs), H. Ito, S. Leonardi, L. Pagli, and G. Prencipe, Eds., vol. 100. Dagstuhl, Germany: Schloss

[39] D. Ye, Z. Liu, M. Sun, B. Shi, P. Zhao, H. Wu, H. Yu, S. Yang, X. Wu, Q. Guo, Q. Chen, Y. Yin, H. Zhang, T. Shi, L. Wang, Q. Fu, W. Yang, and L. Huang, "Mastering

Dagstuhl≠Leibniz-Zentrum fuer Informatik, 2018, pp. 27:1≠27:19.

complex control in moba games with deep reinforcement learning,"

[15] A. Iskovs, "Travelling murderer problem: Planning a

Proceedings of the AAAI Conference on Artificial Intelligence,

Morrowind all-faction speedrun with simulated annealing,"

vol. 34, no. 04, pp. 6672≠6679, Apr. 2020. [Online]. Available:

Apr. 2018, [accessed 13. May 2021]. [Online]. Available:

https://ojs.aaai.org/index.php/AAAI/article/view/6144

https://www.kimonote.com/@mildbyte/travelling-murderer-problem-plannin[g4-0a]-mSo.rrHouwainngd,-aCl.l-Bfaacmtifoonr-ds,pSee. dOrunnta-nwointh, -asnimd uLl.atGedre-laan,n"eGalyimng--µpRaTrtS-1: -T4o1w0a7r9d/

[16] JstAnothrVirtuoso, "Finding the Optimum Nadeo Cut... With Science!!" May 2019, [accessed 13. May 2021]. [Online]. Available:

Affordable Full Game Real-time Strategy Games Research with Deep Reinforcement Learning," 05 2021.

https://www.youtube.com/watch?v=1ZsAjvO9E1g

[17] R. G. Downey and M. R. Fellows, Parameterized complexity. Springer

Science & Business Media, New York, 1999.

[18] Volvy, "Reddit post about the Morrowind all factions speedrun

route," Nov. 2018, [accessed 31. May 2021]. [Online]. Available:

www.reddit.com/r/speedrun/comments/9u1r9o/using ai to grind out routes/e91dg6w/

[19] J. Kirk, "Fixed Endpoints Open Traveling Salesman Problem - Genetic

Algorithm," May 2014, [accessed 14. May 2021]. [Online]. Available:

https://www.mathworks.com/matlabcentral/fileexchange/21197-fixed-endpoints-open-traveling-salesman-problem-genetic-algorithm

[20] J. Togelius, S. Karakovskiy, and R. Baumgarten, "The 2009 Mario AI

Competition," in IEEE Congress on Evolutionary Computation, Jul.

2010, pp. 1≠8.

[21] P. E. Hart, N. J. Nilsson, and B. Raphael, "A Formal Basis for the

Heuristic Determination of Minimum Cost Paths," IEEE Transactions

on Systems Science and Cybernetics, vol. 4, no. 2, pp. 100≠107, Jul.

1968.

[22] G. Currie, "Fictional Truth," Philosophical Studies: An International

Journal for Philosophy in the Analytic Tradition, vol. 50, no. 2, pp.

195≠212, Sep. 1986.

[23] K. Miettinen, Nonlinear Multiobjective Optimization. Kluwer, Boston,

MA, 1999.

[24] M. Ehrgott, Multicriteria Optimization, 2nd ed. Springer, Berlin, 2005.

[25] B. S. Stewart and C. C. White, "Multiobjective A*," Journal of the

ACM, vol. 38, no. 4, pp. 775≠814, Oct. 1991.

[26] M. Rajabi-Bahaabadi, A. Shariat-Mohaymany, M. Babaei, and C. W.

Ahn, "Multi-objective path finding in stochastic time-dependent road

networks using non-dominated sorting genetic algorithm," Expert Sys-

tems with Applications, vol. 42, no. 12, pp. 5056≠5064, Jul. 2015.

[27] E. W. Dijkstra, "A Note on Two Problems in Connexion with Graphs."

Numerische Mathematik, vol. 1, pp. 269≠271, 1959.

[28] T. Back, U. Hammel, and H.-P. Schwefel, "Evolutionary computation:

comments on the history and current state," IEEE Transactions on

Evolutionary Computation, vol. 1, no. 1, pp. 3≠17, 1997. [Online].

Available: https://ieeexplore.ieee.org/document/585888

[29] A. E. Eiben and J. E. Smith, Introduction to Evolutionary Computing,

2nd ed., ser. Natural Computing Series. Springer, Berlin, 2015.

[30] K. A. De Jong, Evolutionary Computation: A Unified Approach. MIT

Press, Cambridge, MA, 2016.

[31] K. Deb, Multi-Objective Optimization Using Evolutionary Algorithms.

Wiley, Chichester, UK, 2001.

[32] C. A. Coello Coello, G. B. Lamont, and D. A. van Veldhuizen, Appli-

cations Of Multi-Objective Evolutionary Algorithms , 2nd ed. World

Scientific, New Jersey, 2007.

[33] M. Gendreau, J.-Y. Potvin et al., Handbook of metaheuristics. Springer,

Cham, Switzerland, 2019, vol. 3.

