JOURNAL, VOL. XX, NO. XX, XXXX 2021

1

Comprehensive Energy Footprint Benchmarking Algorithm for Electrified Powertrains
Hamza Anwar , Aashrith Vishwanath, Apurva Chunodkar, and Qadeer Ahmed

arXiv:2106.01459v1 [eess.SY] 2 Jun 2021

Abstract-- Autonomy and electrification in automotive control systems have made modern-day powertrains one of the most complex cyber-physical systems. This paper presents a benchmark algorithm to quantify the performance of complex automotive systems exhibiting mechanical, electrical, and thermal interactions at various timescales. Traditionally Dynamic Programming has been used for benchmarking the performance, however, it fails to deliver results for system with higher number of states and control lever due to curse of dimensionality. We propose "PS3", a three-step algorithm for mixed-integer nonlinear optimal control problems with application to powertrain energy management. PS3 uses pseudo-spectral collocation theory for highly accurate modeling of dynamics. Based on the validated powertrain component models, we have addressed simultaneous optimization of electrical (SOC), vehicular (eco-driving) and thermal (after-treatment and battery temperatures) dynamics along with an integer (gear and engine on/off) control and its corresponding (dwelltime) constraints. PS3 is used to solve such large-scale powertrain problems having fast and slow dynamic states, discontinuous behaviors, non-differentiable and linearly interpolated 1-D and 2-D maps, as well as combinatorial constraints. Five case study powertrain control problems are given to benchmark the accuracy and computational effort against Dynamic Programming. Our analysis shows that this algorithm does not scale computational burden as Dynamic Programming does, and can handle highly complex interactions that occur in modern-day powertrains, without compromising nonlinear and complex plant modeling.
Index Terms-- Optimal powertrain control, Pseudo spectral collocation, Mixed-integer nonlinear programming,
I. INTRODUCTION
I N modern times hybrid electric vehicles (HEVs) have increasingly become complex systems. Optimal energy
management strategies (EMSs) consider the various subsys-
tems of a powertrain, as well as their interactions to achieve
targets of fuel economy along with emissions of air pollutants
and greenhouse gases. Many a times, the objectives in an EMS
H. Anwar is a PhD student at the Center for Automotive Research, Ohio State University, Columbus, OH 43212 (e-mail: anwar.24@osu.edu).
A. Vishwanath is a MS student at the Center for Automotive Research, Ohio State University, Columbus, OH 43212 (e-mail: vishwanath.16@osu.edu).
A. Chunodkar is a Senior Technical Specialist - Controls & Diagnostics Research at Cummins Inc., Columbus, IN 47201 (e-mail: apurva.chunodkar@cummins.com).
Q. Ahmed is a Research Associate Professor at the Department of Mechanical & Aerospace Engineering, Ohio State University, Columbus, OH 43212 (e-mail: ahmed.358@osu.edu).

will conflict with each other, such as minimizing the fuel and improving driveability performance. On the other hand, the subsystems of a powertrain may exhibit very different behaviors in their time-dynamics and control. For example, an electric battery may have rapid charging and discharging while on the other hand, an after-treatment catalyst may have slow increase in its temperature. Likewise, the transmission and clutch subsystems will have discontinuous shifts and switches, while the ratio of power-split between internal combustion engine and electric machine, could be any real-number within its bounds. Complicating it further, can be a scenario when in the same energy management problem eco-driving is allowed where one is not restricted to operate on a given drive cycle but is allowed to modulate the speed profile around a target profile.
For the energy management, these dynamic and discontinuous interactions restrict engineers to only model incomplete and approximated relationships or to model the state and control variables in disjoint sub-problems. And so traditional control strategies focus on individual sub-component optimality instead of a joint holistic system-level optimization. For example, the engine may be programmed to solely operate at its optimal operating line and the after treatment system independently tuned to maintain certain temperatures of its catalysts. But, whether or not all these systems will jointly meet the overall objectives of the powertrain operation remains a question. If supervisory controller is involved, then all system state variables and control levers may not be modeled and solved jointly with supervisory controller to completely capture such interactions. Hence, there is a great need to develop energy management approaches that can handle high degree of complex system-level interactions, tackle stiffness caused by fast and slow dynamics, and exhibit discontinuous and combinatorial interactions on the optimal control problem, while meeting the conflicting objectives of hybrid electric powertrains. An example of a powertrain with various subsystems, states and controls that are usually considered across powertrain control literature is shown in Fig. 1.
A. Related Work
Research on energy management strategies for hybrid electric vehicles has a history of more than twenty years. The field has evolved and prospered to a great extent because of the ever-increasing applications of electric powertrains in the world [1]. Various methods have been used to address powertrain control problems which can be broadly classified into

2

JOURNAL, VOL. XX, NO. XX, XXXX 2021

Fig. 1. An example hybrid electrified powertrain with parallel architecture showing various subsystems with frequently used control and state variables for energy management.
rule-based and optimization-based approaches. Optimizationbased approaches either tend to be focused on short-horizon and real-time capability, such as the ones using modelpredictive-control (MPC) framework [2], [3] or ECMS [4], [5], or on full-horizon offline study. Any given optimization approach can further either be direct (first-discretize-thenoptimize) or be indirect (first-optimize-then-discretize) in its methodology.
Among the most widely used offline EMSs is discrete Dynamic Programming (DP) which is a direct approach. Due to its popularity guaranteeing globally optimal solutions, its variants [6]­[8] have found space in online EMSs as well. But, among the most common problems associated with it are the requirement of apriori route information and its inherent curse of dimensionality which restricts it being scaled up to work for problems involving two or more continuous state variables. As for DP's variants, the critical step is to approximate the cost-to-go but such approximations are usually datadriven and specific to given drive cycles [9]­[11]. If integervalued variables (also called discrete variables) are optimized using DP, such as gear choices and engine on/off switch, it outperforms many of its competitor methods. Nonetheless, DP is considered a benchmark in literature especially for offline validation of new methods.
Other important works have involved indirect optimization methods such as Pontryagin's Minimum Principle [12]. In particular, researchers have used PMP for eco-driving problems as well, wherein the power demand from the vehicle level is made flexible and is jointly optimized with the powertrain management controls like powersplit [13]. However, indirect approaches, like PMP, have a drawback of requiring highly accurate Jacobian and Hessian forms of the variables involved. Another drawback is that they have difficulty in incorporating path constraints into the control problem, making them mathematical formulations intractable or impractical.
Another classification of optimization based approaches is usually done into gradient-based optimization, like Newton's method and gradient-descent, versus derivative-free optimization. In HEV EMS, derivative-free optimization is not very-

well developed, more so because of its independence from the physics of the problems, such as particle swarm optimization [14]. On the other hand, gradient-based optimization methods have long been used for energy management of HEVs in numerous ways.
Gradient-based Optimization for Energy Management in HEVs: In simple words, gradient-based approaches rely on finding minima of an objective function by determining the solution to its gradient subject to certain dynamic and algebraic constraints. Earliest of works that used gradient-based optimization for HEV energy management used linear programming [15]. Even recent works involve linear programming such as fast iterative-LP [16] which used one real-valued state variable. The main consideration for LP based problems is to simplify and approximate the model into a linear form, such as the Willan's line approximation for the internal combustion engine.
Moving on, gradient-based EMSs using convex analysis have also been a hot research topic [17]. These approaches rely on having convex models for the various subsystems and quadratic programming (QP) or semi-definite programming (SDP) concepts [18], [19] are further used to obtain solutions using off-the-shelf solvers [20]. More recently, the trend has shifted towards fast sequential-QP, and SDP-based integer convex minimization [21]­[23]. The limitations of convexitybased optimization is the difficulty to specify the highly nonlinear powertrain models as convex models. Secondly, discontinuities introduced by discrete variables or look-up tables in the model are difficult to handle if the framework restricts the form of the model to be convex.
The approaches that make use of nonlinear programming (NLP) tools and solvers are not very old for HEV EMS. NLPs are difficult to solve as they do not assume convex or linear forms of the models, and instead they deal with system non-linearities as they are. To formulate the NLPs, there has been a trend in EMS context to utilize the theory of pseudospectral collocation (PSC) lately. PSC allows for highly accurate modeling of state dynamics, at the expense of NLP size. But with increasingly powerful computational resources nowadays, handling hundreds of differential equations accurately is possible through combining state-of-art NLP solvers, such as IPOPT [24], WORHP [25], etc. PSC scheme has been employed frequently for various optimization problems in chemical industrial processes and aerospace research, but its adoption for automotive research sector is quite recent. Some works that have used PSC for formulating of NLPs and solved an HEV energy management control problem include [26]­ [28].
NLP-based optimization approaches can handle complex optimal powertrain control problems, but cannot easily handle discontinuities. In the context of HEVs, there are very few works that involve mixed-integer nonlinear programming (MINLP), such as [29], which combines integer optimization employing combinatorial integral approximation (CIA) theory along with PSC. Being able to solve for continuous and discrete variables simultaneously by solving an MINLP is quite challenging. There are open-source [30] and commercial [31] MINLP solvers available as well in the market, but, the experts

H. ANWAR et al.: COMPREHENSIVE ENERGY FOOTPRINT BENCHMARKING ALGORITHM FOR ELECTRIFIED POWERTRAINS (JUNE 2021)

3

of MINLP field suggest that a homegrown solver specific to the problem being addressed is more useful and much faster compared to an off-the-shelf solver. An introductory tutorial to numerical optimization and mixed-integer programming can be found in the lecture notes [32] and the book [33]. Concepts about nonlinear programming, its sparse solvers, its relationship with optimal control problems and similar important background can be found in [34].
For the purpose of this paper, we focus on developing and validating an HEV energy management algorithm involving large-scale optimization having high number of state and control variables. Our algorithm is based on MINLP employing PSC for transcription of the original mixed-integer optimal control problem into the MINLP. It has a three-step approach wherein we solve a relaxed version of the large MINLP in first step, solve for the integer-variables using mixed-integer quadratic programming (MIQP) in the second step, and after fixing integer variables we re-optimize the real-valued NLP variables in the third step. We show results on five casestudy fuel-minimization problems with varying problem size and complexity to benchmark the computational-effort and optimality with Dynamic Programming solutions. In the sequel paper [35], we demonstrate and present detailed analysis of results for a thirteen-state and four-control variable problem where the objective function has conflicting terms of fuel and NOx emission given different relative weightings.
Paper structure: Section II describes the general formulation of powertrain control problems that we aim to solve. Section III is about the proposed algorithm for solving any given powertrain control problem, while Section IV shows numerical results on five case-study problems along with comparison to DP, and lastly conclusions are summarized in the Conclusion section.
II. PROBLEM DESCRIPTION
As described earlier, we aim to solve such optimal powertrain control problems which exhibit large number of dynamical states, combination of real and integer-valued controls, and constraints from various interacting powertrain components through complex relationships. This section gives details about the problem formulation structure that we consider for powertrain energy management problems we aim to solve. Through this section, we also explain the difficulties associated in modern-day HEV energy management problems when considering large-scale joint optimization.
A. Dynamic States and Controls
The generic optimal control problem can have continuous (real-valued) or discrete (integer-valued) state variables, denoted as x(t)  X  R|X | and xd(t)  Xd  Z|Xd| respectively, at time t. Likewise, there can be continuous control variables, u(t)  U  R|U| and discrete control variables ud(t)  Ud  Z|Ud|. The sets X , U , Xd, and Ud are simply specified by constant lower and upper bounds on each of its variables, and are handled by box constraints. The dynamics for the continuous state variables are specified by ordinary differential equations (ODE), whose right hand sides

are nonlinear (and possibly discontinuous) functions of the state and control variables, as well as other dependent signals. As an example, we consider fuel consumption to be a state variable in our experiments which is given by linear interpolation of 2-D engine map, and hence has a discontinuous RHS. Dynamics of discrete state variables, on the other hand, are specified by their discrete-time dynamic equations. Examples of these are gear shifting and engine on/off switching. The reader is referred to the sequel [35] where discrete dynamics are exclusively described and detailed.
When properly initialized, discrete state variables are a consequence of discrete controls having dynamics dependent only on their respective discrete controls. For example, engine on/off switch is a discrete control taking values 0 (no change), 1 (turn on) and -1 (turn off). The engine status is a state variable with dynamics dependent only on engine on/off switch. Thus, its differential equation can be written as linear combination of shifted and scaled Dirac Delta functions, having impulses at engine on/off switch events. Consequently, the engine status variable will only take discrete values.
The continuous state or control variables are classified into consistent state or control variables, (xcon(t), ucon(t)), and inconsistent state or control variables, (xinc(t), uinc(t)). Consistent variables are those which can be defined in a way that their dynamics depend neither on inconsistent nor discrete state or control variables. On the other hand, the inconsistent variables can have dependence on any state or control variable. Thus, we have the three types of state ODEs:

x con(t)  fcon(xcon(t), ucon(t), t) 

x inc(t) = finc(x(t), u(t), xd(t), ud(t), t) , (1)

x d(t)

fd(xd(t), ud(t), t)

where, x(t) =

xcon(t) xinc(t) , u(t) =

ucon(t) uinc(t) , and the vector-valued functions f(·) are general form expressions of the RHSs of respective ODEs which solely depend on the way system dynamics

are modeled. Distinction of continuous state variables

into consistent and inconsistent naturally arises due to the

separation caused with discrete variables, xd(t) and ud(t). For example, in a backward powertrain model when gear

status is considered to be a discrete state and the vehicle

speed as a continuous state, then the vehicle speed, distance

and acceleration are all consistent variables since system

causality dictates that these vehicle-level variables come

from a known drive cycle, and gear selection depends on

those but it will not be the other way around. In that case,

all powertrain variables after transmission will be classified

as inconsistent variables because they all have dependence

on gear selection. In general, wherever there is a discrete

variable, we try to split the overall system there into the two

continuous variable types. In our case studies, this classifies

vehicle-level variables (speed, distance and acceleration) as

consistent and powertrain-level variables (SOC, torque split,

after-treatment temperatures, etc.) as inconsistent. However,

note that if such separation of (1) is not possible for some

problem, then all continuous variables will be considered as

inconsistent variables.

4

JOURNAL, VOL. XX, NO. XX, XXXX 2021

B. Boundary Constraints

All state variables require initial conditions to be defined. These are known constants defining values of every state variable at the initial time. Along with initial conditions for the states, some state variables also have constraint on the final-value they take. For the problems presented in the results section, we impose charge-sustaining constraint on battery's state of charge. For problems considering eco-driving, the total distance covered by the eco-driving vehicle at speed v(t) must be the same as the total distance covered by the reference speed profile vorg(t).

x(t) xd(t)

t=0

=

x0 xd,0

,

x(t) xd(t)

t=T

=

xT xd,T

.

(2)

C. Algebraic Relationships
In order to characterize the plant behavior completely, we define another set of variables which are functions of each other as well as of the states and controls. These are coupled in the optimal control problem through algebraic relationships. We term them signals. For example, during traction phase in parallel HEV, the electric machine torque, m and total demand torque after transmission, total are related to torque split, µ through: m = µtotal. The total demand torque is, likewise, algebraically related to the vehicle speed v and acceleration a through transmission efficiency, gear number g, and various road load signals. Another example is of the fuel consumption engine-out NOx emissions which are based on 2-D look-up tables of engine shaft speed  and engine torque e. If any of these signals is constrained, then that is effectively a type of path constraint on states or controls. These relationships are numerous ranging from kinematic equations at vehicle and driveline level, to energy conservation and efficiency losses in between propulsion (engine and traction motor), after-treatment and driveline blocks, as well as thermal heat transfer and electric current dynamics. For our case study problems, these relationships and dependent variables are listed in relevant modeling sections of sequel [35].

Vmargin = 5 km/h above and below the reference speed profile, vorg(t) and should stop when there is a stop in the reference:

|vorg(t) - v(t)| 

Vmargin 0

if vorg(t) = 0 if vorg(t) = 0

Likewise, example of implicit path constraints can be the timevarying min/max limits on signals such as engine or motor torques.

e,min(t)  e(t)  e,max(t) m,min(t)  m(t)  m,max(t)

One important path constraint is the dwell-time constraint on a discrete variable. For example, if the controller optimizes gear profile to minimize fuel consumption, we will observe gear chattering phenomenon. But it is undesirable for gears to rapidly switch here and there as that causes immense drivability discomfort. Hence an explicit path constraint is needed on gear switching that limits number of gear shifts for a certain dwell-time period tdwell. This is a combinatorial constraint on a discrete state variable and we give details about how we handle this in case-study problem of the sequel paper [35]. Path constraints can be grouped as:

h (x(t), u(t), xd(t), ud(t), t)  0

(4)

E. The Optimal Control Problem
Finally, using (1)(2)(3)(4) we arrive at the complete mixedinteger optimal control problem, Prob. 1, where, x(t) = xcon(t) xinc(t) , and u(t) = ucon(t) uinc(t) . The cost function comprises of a running cost L and a terminal cost . For numerical results in this paper we have considered total fuel consumption over the whole cycle as the cost function. Note that, in the following definition, we have particularly identified the vectors in boldface, time-varying signals with "(t)" and constants without "(t)".
Problem 1 (OCP1: Optimal Powertrain Control Problem):

D. Path and Box Constraints

Each of the state and control variables is bounded below and above by known constants, called box constraints. All box constraints are specified as vectors by subscripts (·)lb and (·)ub for lower and upper bounds, respectively:

ulb  u(t)  uub

xlb  x(t)  xub

(3)

ud,lb  ud(t)  ud,ub

xd,lb  xd(t)  xd,ub

Along with box constraints, the state and control variables can have explicit or implicit constraints that are time-varying. These are jointly termed as path constraints. Examples of explicit path constraints on a state variable are the ecodriving speed constraint and stop-at-stop constraint -- vehicle speed v(t) is constrained to be within a constant envelope of

min
u(t),ud (t)
s.t.

T
(x(T ), xd(T ),T )+ L(x(t), u(t), xd(t), ud(t),t)dt
0
 x con(t) = fcon(xcon(t), ucon(t), t) 
ODEs: x inc(t) = finc(x(t), u(t), xd(t), ud(t), t)
x d(t) = fd(xd(t), ud(t), t)
ulb  u(t)  uub  Box Constr.: xlb  x(t)  xub ud,lb  ud(t)  ud,ub   xd,lb  xd(t)  xd,ub

Path Constr.: h (x(t), u(t), xd(t), ud(t), t)  0

x(0) 

=

x0



Boundary Constr.: xd(0) = xd,0

x(T ) = xT





xd(T ) = xd,T

H. ANWAR et al.: COMPREHENSIVE ENERGY FOOTPRINT BENCHMARKING ALGORITHM FOR ELECTRIFIED POWERTRAINS (JUNE 2021)

5

III. PS3: A THREE-STEP ALGORITHM FOR HEV EMS
A direct method of numerical optimization is used to solve the optimal control problem. Direct methods rely on a firstdiscretize-then-optimize approach. All numerical optimization methods at some point rely on an iterative approach towards finding solutions. Insofar, the underlying principle approach is to iteratively progress in the gradient direction such that a minima is found within specified tolerance levels. As described earlier, we make use of a customized MINLP solution approach, which is done in three steps, solving NLP1, MIQP2 and NLP3 in each step respectively, depicted in Fig. 2. In the following, we will explain the three steps in detail.
A. Discretization using Pseudo-Spectral Collocation
Discretization of the optimal control problem is the first crucial step in solving it using a numerical optimization technique. Furthermore, some of the constraints in our problem definition, that are related to gear dwell-time, can be better described only after an equivalent discrete-time problem is defined. Hence, before we attempt to solve the optimal control problem to determine a solution, we discretize it in time. Once an equivalent discrete-time optimization problem is defined, we can then move on to formulating our three-step approach to solve the resultant mixed-integer nonlinear program (MINLP). For this discretization of the continuous-time optimal control problem into a discrete-time numerical optimization problem we make use of the pseudo-spectral collocation theory.
The pseudo-spectral method is essentially a high-order implicit Runge-Kutta (IRK) based collocation scheme in which the time-axis is discretized at non-uniform locations which are determined based on roots of a certain family of orthogonal polynomials. These polynomials are employed to accurately approximate the state trajectories originating from the differential equations that govern the plant dynamics in optimal control problems. Due to high accuracy of derivatives and integrals that comes via such an approximation, pseudospectral collocation has gained a lot of popularity.
We use a discretization step size of, t := tk = 1 second k  {1, · · · , N } for the k-th time interval indicated by the time t  [tk-1, tk), and having a total of N such intervals, called `control intervals', spanning the complete time horizon [0, T ]. For notational convenience, when dealing with discretetime signals we use k in parentheses instead of t. The control signals are assumed to be piece-wise constant within each of the N intervals. On the other hand, the state trajectories smoothly vary due to high-order implicit Runge-Kutta (IRK) discretization at collocation points. For highly accurate state dynamics modeling we use five LGR (Legendre-Gauss-Radau) collocation points within each control interval -- see Fig. 3. But, practically, for some of our experiments when accuracy is not expected to be compromised or when a benchmark needs to be compared, we use one collocation point per interval. One specialty of LGR collocation scheme, unlike other choices of LGL (Legendre-Gauss-Lobotto) or LG (Legendre-Gauss) schemes, is that it includes the interval's end point as a collocation point. Thus, LGR collocation points have stiff decay property that can well handle stiffness associated with

the corresponding ODEs. We omit details of how the pseudospectral collocation scheme operates to achieve discretization at non-uniform points inside a control interval, and refer the reader to exclusive works on the subject by [36] and [37].

B. Constructing the relaxed-Nonlinear Program
Since the original optimal control problem (Prob. 1) involves discrete state and control variables, discretization of the same using pseudo-spectral collocation into N control intervals, as mentioned above, will transcribe it into a mixedinteger nonlinear program. Instead of numerically solving the MINLP directly, we first apply relaxation to its discrete variables that allows the solver to assume continuous values for the otherwise discrete-valued variables, (xd(k), ud(k)) k  {1, · · · , N }. Thus, if we only have one discrete state, the gear number, g(t), then the relaxed gear number state, g~(t) discretized into N intervals, g~(k) k  {1, · · · , N } can be any real number within 1 =: glb  g~(k)  gub := nb, where nb is the total number of gear choices here. For a six-speed transmission, nb = 6. When g~(k) takes whole number values, the gear ratios correspond to them, however, for fractional gear numbers, the gear ratios are linearly interpolated. For any other discrete state or control variable, an analogous relaxation will be applied to convert the MINLP into an NLP. Furthermore, since imposing combinatorial constraints (like minimum dwell-time) on discrete variables will not make sense for relaxed variables, so we do not impose those in the first step of our three-step algorithm, and take care of it in the second step. Finally, we arrive at the relaxed-NLP (Prob. 2) which is solved in step-1 of proposed algorithm by an off-theshelf gradient-based sparse NLP solver, IPOPT [24].
Problem 2 (NLP1): It is defined as the discretized equivalent of Prob. 1 with a total of N control intervals of step-size t = 1 s each, using pseudo-spectral collocation scheme at Legendre-Gauss-Radau points for the state trajectories, where:
· a subset of the path constraints h (x(t), u(t), xd(t), ud(t), t)  0, namely the dwelltime constraints (or other combinatorial constraints) on discrete variables are ignored; and
· discrete states xd(t)  Z|Xd| and discrete controls ud(t)  Z|Ud| are respectively replaced by relaxed states, x~d(t)  R|Xd| and relaxed controls u~d(t)  R|Ud| using linear interpolation.

C. Constructing the Mixed-Integer Quadratic Program

Assuming that we can obtain a solution, (x (k), u (k), x~d(k), u~d(k))k  {1, · · · , N }, to the nonlinear program NLP1 we now describe step-2 of our algorithm that handles integer optimization. From the obtained solution, the consistent variables are assigned their fixed trajectories which do not alter after this step:

xcon(k) a-ss-i-g-n xcon(k),

ucon(k) a-ss-i-g-n ucon(k).

Step-1 resulted in relaxed trajectories for the discrete states and controls which are not integer valued nor do they meet dwell-time constraints. Now, the primary focus in step-2 is to obtain the integer states and controls (xd(k), ud(k))

6

JOURNAL, VOL. XX, NO. XX, XXXX 2021

Fig. 2. Proposed three-step algorithm "PS3" for mixed-integer optimal powertrain control.

Control

k+0

k+1

k+2

Time (showing control intervals)

State

51

2

3

4 51

2

3

Time (showing collocation points)

45

Fig. 3. Discretization of continuous time OCP with 5 Radau collocation points (i  {0.06, 0.28, 0.58, 0.86, 1} on an interval (0, 1] for i = 1, · · · , 5) in each control interval to ensure state continuity and smoothness. Control signal is piece-wise constant in each interval of 1 second duration, and corresponding state signal is determined by a 5-th order polynomial using Radau scheme

which are closest to their relaxed counterparts from step-1, (x~d(k), u~d(k)). In doing so, the solution should also satisfy any combinatorial constraints on discrete variables. This is achieved by defining a mixed-integer quadratic program.
Problem 3 (MIQP2): Given optimized relaxed trajectories of discrete variables x~d(k) and u~d(k), and fixed trajectories of consistent variables xcon(k) and ucon(k) for k  {1, · · · , N } from step-1 solution, solve the corresponding discretized equivalent of the following optimal control problem to obtain

xd(k) and ud(k):

T

min

ud(t) - u~d(t) 2 + xd(t) - x~d(t) 2 dt

ud(t) 0

subject to x d(t) = fd(xd(t), ud(t), t)

ud,lb  ud(t)  ud,ub

xd,lb  xd(t)  xd,ub

xd(0) = xd,0

xd(T ) = xd,T

h (x(t), u(t), xd(t), ud(t), t)  0 · · ·

for 

some

xinc(t)

&

uinc(t)



satisfying (1)(2)(3), where

···

u(t) := [uinc(t) 

ucon(t)]

 x(t) := [xinc(t)

xcon(t)]

Note that, since this problem optimizes only the discrete variables, direct shooting discretization scheme is adopted instead of direct pseudo-spectral collocation.
Typically, Prob. 3 can be easily framed as a mixed-integer quadratic program. This is because, firstly, the discrete state dynamics, fd, are typically linear combinations of shifted and scaled Dirac Delta functions dependent on the integer-valued control -- which makes them linear equality constraints. Secondly, for the path constraints h (x(t), u(t), xd(t), ud(t), t), the consistent variables are already known and fixed. Whereas, only the existence condition of a feasible solution is required for the inconsistent variables thereby avoiding explicit inclusion of nonlinearities in the Prob. 3. The remaining terms are either quadratic on linear. In the following paragraph, we give an example of Prob. 3 having gear number as the optimization variable with minimum dwell-time and other combinatorial constraints, which is written as an MIQP.
Gear Example of MIQP2: To better explain Prob. 3, we given an example MIQP problem that has gear number as a discrete control variable and is imposed with dwelltime constraints. Let's denote the optimal relaxed gear number obtained from step-1 as g~ (k). First, we transform the scalar relaxed gear trajectory, g~ (k)  [1, nb]  R for k = 1, · · · , N , into a vectorized binary equivalent, r (k) = r1(k) r2(k) · · · rnb (k)  [0, 1]nb  Rnb where each element of the vector represents one of the nb gear choices.

H. ANWAR et al.: COMPREHENSIVE ENERGY FOOTPRINT BENCHMARKING ALGORITHM FOR ELECTRIFIED POWERTRAINS (JUNE 2021)

7

Representing dwell-time constraint using binary variables that take values 0 or 1 is simpler than representing it using integer variables. To arrive at r (k) from g~ (k), we distribute the percentage difference in between floor g~ (k) and ceil g~ (k) integers indicating likelihood of belonging to one

constraints from Prob. 1. Here also, there are N control intervals of step-size t = 1 s each, employing pseudospectral collocation using Legendre-Gauss-Radau points.
D. Overall Algorithm

of the two nearest integer gear numbers. For example, if the relaxed gear took a value of g~ (k) = 3.38 at k-th control interval, then its best integer value has 38% likelihood of being in 4th gear and 62% of being in 3rd gear. The equivalent binary vector for 6-speed transmission will be
r (k) = 0 0 0.62 0.38 0 0 . Given the relaxed vectorized gear trajectory as an input, the following mixed-integer quadratic program (MIQP) aims to determine the binaryvalued vectorized gear trajectory, b(k)  {0, 1}nb k = 1, · · · , N . The minimum gear dwell-time constraint needs to be properly defined in discrete-time at this point, and by the use of binary variables, this task is simplifed to two sets of inequalities for each possible gear choice at each time step, as given in Prob. 4.
Problem 4: For every k  {1, · · · , N } grid interval and nb gear choices at each step, obtain the binary gear trajectory, b(k)  {0, 1}nb that minimizes sum of its squared differences from the input relaxed gear trajectory, r (k)  [0, 1]nb ,

N

N nb

min
b(k)

b(k) - r (k)

2 2

=

bj(k) - rj(k) 2

k=1

k=1j=1

s.t. One-Gear-At-A-Time Constraint k :

nb
1 = bj(k),

j=1

Feasible Gear Selection Constraint k j :

Referring back to the algorithm diagram of Fig. 2, once
NLP1 and MIQP2 are solved, we have the optimal consistent variables (xcon, ucon) (cf. step-1) and the optimal integer variables (xd, ud) (cf. step-2). These are used to obtain overall optimal solution for the remaining variables, i.e., inconsistent variables (xinc, uinc) using the nonlinear program defined by Prob. 5. This complete process is explained in an algorithmic
form in Algorithm 1, where writing the parenthesized "(k)"
is avoided for brevity.

Algorithm 1 (PS3) Mixed-integer powertrain control using nonlinear programming and pseudo-spectral collocation

1: Load drive cycle information, model parameters, and maps 2: Obtain na¨ive initial guess for all the state and control vari-
ables (x¯con, u¯con, x¯inc, u¯inc, x¯d, u¯d) which can be simply rule-based 3: Step 1: Assume relaxed values (x~d, u~d) for the integervalued variables, (xd, ud) and then solve the large nonlinear program (Prob. 2) to obtain optimal trajectories of all states (xcon, xinc, x~d), and controls (ucon, uinc, u~d):

xcon, xinc, x~d, ucon, uinc, u~d

s-ol-v-e NLP1

x¯con, x¯inc, x¯d, u¯con, u¯inc, u¯d

4: Fix the optimal trajectories of consistent variables from the obtained solution of step-1:

(xcon, ucon) a-ss-i-g-n (xcon, ucon)

1 if j-th gear is feasible at k, 0  bj(k)  Bj(k) := 0 if j-th gear is infeasible at k. Minimum Dwell-Time Constraints k j : i  k, k + 1, · · · , k + tdwell :
t bj(k) - bj(k - 1)  bj(i)

5: Step 2: Using optimal trajectories of consistent variables (xcon, ucon) and the relaxed variables (x~d, u~d) solve mixed-integer quadratic program (Prob. 3) to obtain integer solutions (xd, ud) respecting all relevant constraints including the combinatorial constraints. This can be done
by transforming integer variables into vectorized binary
equivalents:

bj(k - 1) - bj(k)  1 - bj(i)
where, tdwell is the minimum dwell-time duration in seconds that gear has to remain unchanged before next gear shift. Here, gear feasibility limit Bj(k) k j is pre-calculated using min/max shaft speed limits and torque limits of internal combustion engine and traction motor, based on Prob. 2's solution (xcon(k), ucon(k)) of consistent variables.
As a result of solving Prob. 4, we obtain the optimal binaryvalued discrete variable trajectories b(k) for k = 1, · · · , N . This is transformed back into optimal integer trajectories of the discrete variables xd(k) and ud(k), which completes integer optimization.
Problem 5 (NLP3): This is a simpler version of Prob. 2 where the consistent variables (xcon, ucon) and discrete variables (xd, ud) are fixed and known beforehand from steps 1 and 2. The objective is to minimize the fuel cost using only the inconsistent variables (xinc(k), uinc(k))k  {1, · · · , N } subject to relevant set of dynamical, box, path and boundary

(xd, ud) s-ol-v-e MIQP2 (xcon, ucon, x~d, u~d)
6: Step 3: By fixing the optimal trajectories of discrete variables from step-2 (xd, ud) and consistent variables from step-1 (xcon, ucon), solve the second nonlinear program (Prob. 5) with step-1's solution as an initial guess. Here, all the inconsistent state and control variables will be reoptimized.
(xinc, uinc) s-ol-v-e NLP3 (xinc, uinc)
7: The overall mixed-integer solution is finally thus obtained (x, u, xd, ud), where the continuous variables are u = [uinc ucon] and x = [xinc xcon] .
IV. PERFORMANCE ANALYSIS: PS3 VS. DP In this section, we have present the usefulness of our proposed algorithm in comparison to the standard benchmark

8

JOURNAL, VOL. XX, NO. XX, XXXX 2021

TABLE I DP SPACE DISCRETIZATION LEVELS

Variable Name [units]
Battery State of Charge [-] Torque Split [-]
Battery Temperature [C] Gear Number [-]
Gear Dwell-time Counter [s] Gear Shift [-]
Vehicle Speed [m/s] Vehicle Position [m] Vehicle Acceleration [m/s2]

Used in
Case 1-5 Case 1-5 Case 2 & 4 Case 3-4 Case 3-4 Case 3-4 Case 5 Case 5 Case 5

Space Disc.
61 21 8 6 5 3 26 65 15

Lower Bound
0.3 -1 23 1 0 -1 0 0 -2

Upper Bound
0.8 1 30 6 4 1 25 6463 1.5

of Dynamic Programming (DP) for HEV energy management problems. We ran experiments for a variety of problems i.e. different combinations of real and integer-valued state and control variables in the OCP, using the algorithms PS3 and DP. The conclusions are summarized in the end of this section. In the sequel [35], our main case-study problem which DP is unable to solve is presented in detail, which combines all modeled states and controls into a large mixed-integer optimal control problem. But for the results in this paper, we focus only on five case problems (Case 1 to Case 5) that DP can realistically solve to establish a comparison. In all five cases presented here, all the real-valued variables are inconsistent variables. However, the case-study problem in [35] involves consistent as well as inconsistent real-valued variables.
All computations were conducted on Lenovo ThinkPad X1 Carbon Laptop PC with an Intel(R) Core(TM) i5-8250U CPU and 8 GB RAM running Windows 10. To model and solve the nonlinear program we use CasADi 3.4.5, [38], within MATLAB R2019a. For easier implementation, a CasADibased toolbox, YOP [39] is used to parse the optimal control problems into nonlinear programs. The solution to NLP is provided by the sparse NLP solver IPOPT by [24], running the linear solver MUMPS or MA97 by Harwell Subroutine Library [40]. For solving MIQP, we use Gurobi optimizer [41].
For consistent comparison, discretization step-size of one second is chosen for both algorithms (PS3 and DP) and a first-order polynomial degree is used for collocation in PS3 (with LGR points). The initial guess for the optimization variables used by PS3 was based on na¨ive rule-based estimate of state and control trajectories. The DP solver we use is based on the well known `dpm' function method by [42]. Space discretizations we used in DP for the state and control variables are provided in Table I.
A. Architecture, Models and Drive Cycle
For all our case studies in this paper and the main case-study in sequel [35], we have considered a strong parallel P2 hybrid electric vehicle architecture, like the one shown in Fig. 1. This is for a medium-duty diesel-engine, a 90 kW-rated electric machine, 11 kWh lithium-iron-phosphate (LFP) battery pack with 31 Ah capacity, and 6-speed automatic transmission. Data maps for the LFP battery model used in this paper are given in the . All other modeling details about the internal combustion engine, electric machine, vehicle dynamics and

Speed [mph]

40

30

20

10

0

0

500

1000

1500

2000

2500

3000

3500

Time [s]

Fig. 4. NREL Parcel Delivery Truck Cycle (Baltimore) [43] as reference drive cycle, vorg.

driveline are given in the sequel [35]. A short segment of 10minutes duration from the NREL drive cycle for parcel pickup and delivery, Fig. 4, with a speed-dependent gear profile is used as reference for the following experiments, as shown in Fig. 5.
B. Case 1: Basic Hybrid (1S1C)
This problem involves a single real-valued state, battery state-of-charge, SOC () and a single control variable, torque split between internal combustion engine and the electric motor (µ). Since no integer variables are involved in this problem, hence, only the step-1 of Algorithm 1 is relevant and used which gives the final optimal solution.
The control and state-space discretization required for DP is set to take 61 values for SOC (0.3    0.8), and 21 values for the control variable, torque split (-1  µ  1). This discretization is chosen to keep minimum computation time and memory load, without significant drop in optimality of the solutions. A point to note is that unlike DP, PS3 can take all real-values up-to machine precision for the state and control variables, i.e., its search space is not discretized the way it is for DP.
The obtained results are plotted in Fig. 6. Although the state (SOC) and control (Torque Split) trajectories appear different at many places in the plot, we observe that both the algorithms have comparable overall cost i.e. total fuel consumed -- 1.920 kg (DP) and 1.921 kg (PS3), and have low computational times -- 4 seconds (DP) and 19 seconds (PS3).
C. Case 2: Thermal Hybrid (2S1C)
The second problem builds on top of the basic hybrid problem by involving two real-valued state variables, battery SOC and battery temperature, and one control variable, torque split. With the additional state variable of battery temperature having first-order thermal dynamics model, we make use of temperature-dependent (and SOC-dependent) 2D look-up table for cell internal resistance (see for its modeling details). Our LFP battery model has very low Ohmic heat loss for a 10minute drive cycle. In fact, the overall change in battery temperature is within one Celsius of the ambient temperature (25 Celsius). For this reason, we discretize the battery temperature values in DP to take any of 8 uniformly-spaced values within 23 C and 30 C. Results are plotted in Fig. 7. Again, we observe that performance is comparable -- 1.93 kg (DP) and 1.91 kg (PS3), and computational times are still low -- 8.21 seconds (DP) and 23.27 seconds (PS3). Furthermore, the trajectories are different, yet overall effect on the cost is similar. An observation is that DP has higher battery utilization instances

H. ANWAR et al.: COMPREHENSIVE ENERGY FOOTPRINT BENCHMARKING ALGORITHM FOR ELECTRIFIED POWERTRAINS (JUNE 2021)

9

Speed [mph]

50 40 30 20 10
0 1900

2000

2100

2200 Time [s]

2300

2400

Gear Number [-]

6 5 4 3 2 1
1900

2000

2100

2200 Time [s]

2300

2400

Fig. 5. Drive cycle segment (left) and corresponding pre-determined gear profile (right) used for numerical experiments.

Trq Split [-]

SOC [-]

Fuel [kg]

1
0
-1 1900
0.54 0.52
0.5 1900
2
1
0 1900

2000 2000 2000

2100

2200

2100

2200

2100

2200 Time [s]

2300 2300 2300

2400
2400
PS3 DP 2400

Fig. 6. PS3 versus DP: comparable results for basic hybrid 1S1C problem.

Trq Split [-]

SOC [-]

Fuel [kg]

1
0
-1 1900
0.56 0.54 0.52
0.5 1900
25.3 25.2 25.1
25 1900
2
1
0 1900

2000 2000 2000 2000

2100

2200

2100

2200

2100

2200

2100

2200 Time [s]

2300 2300 2300 2300

2400
2400
2400 PS3 DP
2400

Batt. Temp. [C]

Fig. 7. PS3 versus DP: comparable results for thermal hybrid 2S1C problem.

causing more current to be drawn in-and-out, and hence, the battery temperature rises more in the DP solution.
D. Case 3: Gear Hybrid (1S1C & 2DS1DC) This case involves a mixed-integer optimal control problem.
It considers one real-valued state, battery SOC, and one control variable, torque split (1S1C). And there are two integer-valued states, gear number and gear dwell-time counter, and one integer-valued control, gear shift command (2DS1DC). As for DP, the space-discretization for real-valued variables is the same as before, and the integer-valued variables have search

space at only their respective feasible integer values (e.g. gear number can be an integer from 1 to 6, gear command can be an integer from -5 to 5, etc.). Being a mixed-integer problem, we make full use of the three-step algorithm, PS3. In the first step, we obtain a relaxed gear profile (shown in the results plot later). Second step solves a mixed-integer quadratic program to find an integer gear profile near the relaxed profile while meeting the 3-seconds dwell-time constraint. And finally, the third step obtains the optimal real-valued signals with the input of known gear profile obtained from second step. Some important signals are shown in the plots of Fig. 8. Key observations for this problem from the plots are:
· Gear profiles of PS3 (blue) and DP (orange) are quite different, and so are the torque split profiles. But, the total fuel consumed by the end is almost identical -- 1.819 kg (DP) and 1.815 kg (PS3).
· Computational times are 502.82 seconds (DP) and [1249.9+1.4786+16.1430=] 1267.5 seconds (PS3). DP's computational load is still tractable because the most of the state or control variables involved are integervalued in this problem. DP is able to handle integervalued variables quite well because space-discretization is simplified for integers. Computation time for PS3 is higher, but still tractable, than that for DP as it requires running of three sequential computational programs to be solved over its three steps.
· Gear profile from DP solution tends to take higher values, which is better for fuel reduction, but it comes at the expense of steeper drops in the SOC. To meet the charge-sustaining constraint, DP solution then uses larger magnitudes of engine torque values costing higher fuel. The net result is that DP's fuel trajectory is lower in the first half of the cycle, but by the end it meets up with that of PS3 resulting in identical overall fuel consumed.
· Since we use the interior-point solver, IPOPT as the NLP solver for PS3, we see that the relaxed gear trajectory (dashed-magenta in first subplot) of PS3's step-1 is close to the given rule-based initial guess (solid-green). This confirms that having a good initial guess, especially when integer-valued variables are involved is critical for optimality in solutions.
E. Case 4: Thermal Gear Hybrid (2S1C & 2DS1DC)
In order to demonstrate, how DP starts to become intractable for more complicated problems, we consider this case of

10

JOURNAL, VOL. XX, NO. XX, XXXX 2021

Trq Split [-]

Fuel [kg]

Gear Number [-]

6
4
2 1900
1
0
-1 1900
0.56 0.54 0.52
0.5 1900
2
1
0 1900

2000

Relaxed (PS3:step-1)

PS3

Initial Guess

DP

2100

2200

2000

2100

2200

2000

2100

2200

2000

2100

2200 Time [s]

2300 2300 2300 2300

2400 2400 2400 2400

SOC [-]

Fig. 8. PS3 versus DP: results for gear hybrid (1S1C & 2DS1DC) problem.

Trq Split [-]

SOC [-]

1
0.5
0
-0.5
-1 1900
0.58 0.56 0.54 0.52
0.5 0.48
1900 300 200 100
0 -100 -200
1900

2000 2000 2000

2100

2200

2100

2200

2100

2200

Time [s]

2300 2300 2300

2400 2400 2400

Batt. Temp [C]

Fuel [kg]

Gear Number [-]

6 5 4 3 2 1 1900 25.3

2000

2100

2200

2300

2400

25.2

25.1

25 1900 2
1.5
1
0.5
0 1900

2000 2000

2100

2200

2100

2200

Time [s]

2300 2300

2400
PS3 DP 2400

Batt. Current [A]

Fig. 9. PS3 versus DP: comparable results for thermal gear hybrid (2S1C & 2DS1DC) problem.

combined Cases 2-3, to make Case 4. Essentially, on top of the state and control variables of the gear hybrid problem, now we have a fourth state variable, that of battery temperature which is real-valued like SOC. So, this problem involves two real-valued and two integer-valued state variables, and similarly one real-valued and one integer-valued control variable. Some plots for the obtained results are shown in Fig. 9. The key take-away from this experiment is that PS3 remains computationally reasonable despite to an added real-valued variable, however, due to its curse of dimensionality, DP starts to require large memory and computational resources. Overall fuel consumed is 1.818 kg (DP) and 1.770 kg (PS3), and computational times are 5046.6 seconds (84 minutes) (DP) and [1843.5+1.5770+63.6420=] 1908.7 seconds (32

minutes) (PS3).
F. Case 5: Eco Hybrid (3S2C)
Finally, we consider a case in which we have three state variables (SOC, vehicle speed, vehicle position) and two control variables (SOC, vehicle acceleration). The idea of ecodriving is to allow the vehicle to maneuver within a 5 km/h threshold of the reference target speed profile (shown in green in third subplot of Fig. 10), such that the total distance covered on the whole route is the same. Simultaneously, torque split is also optimized.
PS3 is able to give a solution which is shown in Fig. 10. Computation time running PS3 for this experiment was 585.62 seconds and the total fuel consumed was 1.90 kg. The benefit of eco-driving versus non-eco-driving scenario was measured by comparing the net energy demand at the wheels which reduces by 2.213% of the reference, shown in the last plot of Fig. 10.
As for a solution using Dynamic Programming, since all these variables are real-valued, DP exceeds the memory resources and fails to give a solution. When we tried a coarse space-discretization that does not exceed available memory, it is unable to find a feasible solution due to the coarseness.
When analyzing the plots, we observe that the effect of eco-driving is that the eco-driven vehicle operates at slightly lower speeds when the reference is at high speeds, and at slightly higher speed when the reference is at very low speed -- this behavior allows the eco-driven vehicle to use more electrical energy for vehicle traction, instead of fuel energy, thereby reducing fuel.
G. Discussion
In Table II we have summarized the total fuel consumed for the various problems we present to benchmark performance

H. ANWAR et al.: COMPREHENSIVE ENERGY FOOTPRINT BENCHMARKING ALGORITHM FOR ELECTRIFIED POWERTRAINS (JUNE 2021)

11

Torque Split [-] Energy Dmd at Wheels [kWh] Speed [mph]

60
40
20
0 1900 3
2
1
0 1900 1

2000 2000

2100 2100

2200 2200

Reference Profile Eco-Driven (PS3) 2300 2400
2300 2400

0

-1 1900

2000

2100 2200 Time [s]

2300

2400

Fig. 10. PS3 results for eco hybrid 3S2C problem.

SOC [-]

Distance [miles] Acceleration [m/s2]

1 0 -1 1900 4

2000

2100

2200

2300

2400

2

0 1900 0.55
0.54
0.53 1900

2000 2000

2100

2200

2100

2200

Time [s]

2300 2300

2400 2400

TABLE II

PS3 VERSUS DP: FUEL CONSUMED [KG] FOR VARIOUS PROBLEMS.

HERE, [D] REFERS TO AN INTEGER VARIABLE

Case

States

Controls

DP PS3

1

Basic Hybrid (1S1C)

SOC

Torque Split 1.92 1.92

2

Thermal Hybrid (2S1C)

SOC, Battery Temperature

Torque Split

1.93 1.91

Gear Hybrid SOC, Gear Number Torque Split,

3 (1S1C & [D], Gear Dwell Gear Shift 1.82 1.82

2DS1DC)

Time [D]

[D]

4

Thermal Gear Hybrid (2S1C & 2DS1DC)

SOC,

Battery

Temperature, Gear

Number [D], Gear

Dwell Time [D]

Torque Split, Gear Shift [D]

1.82

1.77

5

Eco Hybrid (3S2C)

SOC, Speed, Position

Vehicle Vehicle

Torque Split, Vehicle Acceleration

N/A 1.90

Fig. 11. PS3 versus DP: estimated computation time comparison chart.

of PS3 against DP. We observe that for problems which DP can solve, PS3's solutions match DP's globally optimal solutions. This establishes the general acceptability of PS3 as an alternative benchmark against DP. We do note that theoretically, DP is a global optimization solver, and PS3 -- using IPOPT -- only gives locally optimal solutions. But, as we saw in results of all practical case studies, robust adjustment of solver parameters and initial guesses leads PS3 to highly useful and near-globally-optimal performance, within reasonable computational cost.
Secondly, despite PS3 utilizing gradient-based optimization approach, the integer-valued variables (Case 3-4) are well optimized giving benchmark performance with the help of state-of-art MIQP solver, Gurobi. Thirdly, it is a known fact that as the number of state and control variables in an optimal control problem increase, it becomes tedious for dynamic programming to give tractable solutions without compromising sensible space-discretization levels. This is due to DP's inher-

ent curse of dimensionality, and is particularly apparent when real-valued variables are involved. Based on the presented results in this paper, we give an estimate of comparative trends of computation time with increasing problem size in Fig. 11. The extrapolated trend of PS3's computation time (dashedblue line) is backed up with numerical results on a case-study problem involving 13 state variables and 4 control variables, which is presented in the sequel [35]. Lastly, we note that as with any numerical solver, the computation time for PS3 can vary based on the desired tolerances, initial guess, and other solver options.
V. CONCLUSION
In this paper, we have presented a novel algorithm, namely "PS3", for mixed-integer optimal control problems with application to energy management of electrified powertrains involving high number of states and controls. It employs direct pseudo-spectral collocation for highly accurate state dynamics estimation and relies on state-of-art numerical optimization

12

JOURNAL, VOL. XX, NO. XX, XXXX 2021

solvers for NLP and MIQP. The underlying framework is built upon the open-source modeling language CasADi [38], is implemented in MATLAB, utilizes YOP [39] for parsing NLPs, and runs IPOPT [24] and Gurobi [41] solvers in its three steps.
Our algorithm utilizes validated powertrain component models and stands out in being able to provide solutions to diverse class of powertrain problems. PS3 benchmarks for problems that may involve simultaneous eco-driving and integer optimization along with non-differentiable look-up tables, thermal states, and combinatorial path constraints in the models. We provide empirical justification of PS3's ability to be considered a benchmark algorithm by comparing results against Dynamic Programming for four out of five case-studies where various combinations of continuous and discrete states and controls were chosen to minimize fuel. Results were analysed on a realistic drive cycle with frequent starts and stops, steeper acceleration and deceleration events, as well as wide-range of power demands. Our analysis shows that this algorithm does not scale in computational load as DP does, and can handle highly complex interactions that occur in modernday powertrains. This methodology can be robustly applied to difficult real-world problem classes and it has potential applications in real-time embeddable controllers. It can even serve as a numerical benchmark for other methodologies in future. In the sequal paper [35], we demonstrate, analyze, and benchmark a large case-study problem to show the great benefit of large-scale optimization this method offers.
APPENDIX
In the appendix, the battery model is presented that is used for the shown experiments and numerical results for the hybrid electric powertrain. The battery pack model used is of 11 kWh Lithium-Iron-Phosphate (LFP) having 350 V nominal voltage. Charge sustaining operation is assumed for the drive cycle, and so the initial condition and final condition for SOC is set equal to 55%. For the electrical dynamics, we assume a zero-th order equivalent circuit model, and for the thermal dynamics, a first order temperature model with heat addition due to ohmic losses. The equations with further details are given in the sequel [35]. However, the only difference between the battery model presented in [35] and this is that here we have temperature-dependent internal resistance 2-D maps, which, along with the open-circuit voltage (OCV) plot is shown in Fig. 12. OCV is modeled using the following expression:
Voc = Ns V0 + b 1 - e-b +b + b 1 - e- b/(1-) ,
where, , Ns and V0 are battery state-of-charge (SOC), number of cells in series, and nominal voltage respectively, while the remaining constants b, b, b, b, b are obtained by curve-fitting the OCV with respect to SOC using real-world empirical data.
REFERENCES
[1] D.-D. Tran, M. Vafaeipour, M. El Baghdadi, R. Barrero, J. Van Mierlo, and O. Hegazy, "Thorough state-of-the-art analysis of electric and hybrid vehicle powertrains: Topologies and integrated energy management strategies," Renewable and Sustainable Energy Reviews, vol. 119, p. 109596, 2020.

SOC [-]

Charging Internal Resistance (Cell) 1 0.9 0.8 0.7 0.6 0.5

10-3 1
18
0.9 16
0.8 14
0.7
12 0.6

10

0.5

Discharging Internal Resistance (Cell)

10-3
12 11 10 9 8 7

SOC [-]

0.4

8

0.4

6

5

0.3

6

0.3

4

0.2

4

0.2

3

0.1

0.1

2

2

0 0

10

20

30

40

Temperature [C]

0 0

10

20

30

40

Temperature [C]

3.4

Cell Open-Circuit Voltage [V]

3.3

3.2

3.1

3

2.9

2.8
2.7 0

Outside the operating region

0.2

0.4

0.6

0.8

1

SOC [-]

Fig. 12. Resistance (left: charging, right: discharging) in Ohms, opencircuit voltage (bottom)

[2] Y. Huang, H. Wang, A. Khajepour, H. He, and J. Ji, "Model predictive control power management strategies for hevs: A review," Journal of Power Sources, vol. 341, pp. 91­106, 2017.
[3] A. Bu¨rger, C. Zeile, A. Altmann-Dieses, S. Sager, and M. Diehl, "Design, implementation and simulation of an mpc algorithm for switched nonlinear systems under combinatorial constraints," Journal of Process Control, vol. 81, pp. 15­30, 2019.
[4] J. Wu, J. Ruan, N. Zhang, and P. D. Walker, "An optimized real-time energy management strategy for the power-split hybrid electric vehicles," IEEE Transactions on Control Systems Technology, vol. 27, no. 3, pp. 1194­1202, 2018.
[5] S. Onori, L. Serrao, and G. Rizzoni, Hybrid electric vehicles: energy management strategies. Springer, 2016, vol. 13.
[6] Y. Pan and E. Theodorou, "Probabilistic differential dynamic programming," in Advances in Neural Information Processing Systems, 2014, pp. 1907­1915.
[7] W. Li, G. Xu, Z. Wang, and Y. Xu, "Dynamic energy management for hybrid electric vehicle based on approximate dynamic programming," in 2008 7th World Congress on Intelligent Control and Automation. IEEE, 2008, pp. 7864­7869.
[8] L. Johannesson, M. Asbogard, and B. Egardt, "Assessing the potential of predictive control for hybrid vehicle powertrains using stochastic dynamic programming," IEEE Transactions on Intelligent Transportation Systems, vol. 8, no. 1, pp. 71­83, 2007.
[9] V. Larsson, L. Johannesson, and B. Egardt, "Cubic spline approximations of the dynamic programming cost-to-go in hev energy management problems," in 2014 European Control Conference (ECC). IEEE, 2014, pp. 1699­1704.
[10] W. B. Powell, Approximate Dynamic Programming: Solving the curses of dimensionality. John Wiley & Sons, 2007, vol. 703.
[11] C.-C. Lin, H. Peng, and J. Grizzle, "A stochastic control strategy for hybrid electric vehicles," in Proceedings of the 2004 American control conference, vol. 5. IEEE, 2004, pp. 4710­4715.
[12] L. Serrao, S. Onori, and G. Rizzoni, "A comparative analysis of energy management strategies for hybrid electric vehicles," Journal of Dynamic Systems, Measurement, and Control, vol. 133, no. 3, p. 031012, 2011.
[13] M. Ghasemi and X. Song, "Powertrain energy management for autonomous hybrid electric vehicles with flexible driveline power demand," IEEE Transactions on Control Systems Technology, vol. 27, no. 5, pp. 2229­2236, 2018.
[14] Z. Chen, R. Xiong, and J. Cao, "Particle swarm optimization-based optimal power management of plug-in hybrid electric vehicles considering uncertain driving conditions," Energy, vol. 96, pp. 197­208, 2016.

H. ANWAR et al.: COMPREHENSIVE ENERGY FOOTPRINT BENCHMARKING ALGORITHM FOR ELECTRIFIED POWERTRAINS (JUNE 2021)

13

[15] P. Pisu, E. Silani, G. Rizzoni, and S. M. Savaresi, "A lmi-based supervisory robust control for hybrid vehicles," in Proceedings of the 2003 American Control Conference, 2003., vol. 6. IEEE, 2003, pp. 4681­4686.
[16] N. Robuschi, M. Salazar, N. Viscera, F. Braghin, and C. H. Onder, "Minimum-fuel energy management of a hybrid electric vehicle via iterative linear programming," IEEE Transactions on Vehicular Technology, 2020.
[17] S. Marinkov, N. Murgovski, and B. de Jager, "Convex modeling and optimization of a vehicle powertrain equipped with a generator­ turbine throttle unit," IEEE Transactions on Control Systems Technology, vol. 25, no. 4, pp. 1264­1277, 2016.
[18] M. Koot, J. T. Kessels, B. De Jager, W. Heemels, P. Van den Bosch, and M. Steinbuch, "Energy management strategies for vehicular electric power systems," IEEE transactions on vehicular technology, vol. 54, no. 3, pp. 771­782, 2005.
[19] V. Reinbold, E. Vinot, and L. Gerbaud, "Global optimization of a parallel hybrid vehicle using optimal energy management," International Journal of Applied Electromagnetics and Mechanics, vol. 43, no. 1-2, pp. 115­ 126, 2013.
[20] M. Grant and S. Boyd, "Cvx: Matlab software for disciplined convex programming, version 2.1," 2014.
[21] B. Egardt, N. Murgovski, M. Pourabdollah, and L. J. Mardh, "Electromobility studies based on convex optimization: Design and control issues regarding vehicle electrification," IEEE Control Systems Magazine, vol. 34, no. 2, pp. 32­49, 2014.
[22] S. Hadj-Said, G. Colin, A. Ketfi-Cherif, and Y. Chamaillard, "Convex optimization for energy management of parallel hybrid electric vehicles," IFAC-PapersOnLine, vol. 49, no. 11, pp. 271­276, 2016.
[23] J. Park and S. Boyd, "A semidefinite programming method for integer convex quadratic minimization," Optimization Letters, vol. 12, no. 3, pp. 499­518, 2018.
[24] A. Wa¨chter and L. T. Biegler, "On the implementation of an interiorpoint filter line-search algorithm for large-scale nonlinear programming," Mathematical programming, vol. 106, no. 1, pp. 25­57, 2006.
[25] C. Bu¨skens and D. Wassel, "The esa nlp solver worhp," in Modeling and optimization in space engineering. Springer, 2012, pp. 85­110.
[26] W. Zhou, C. Zhang, J. Li, and H. K. Fathy, "A pseudospectral strategy for optimal power management in series hybrid electric powertrains," IEEE Transactions on Vehicular Technology, vol. 65, no. 6, pp. 4813­ 4825, 2015.
[27] S. Wei, Y. Zou, F. Sun, and O. Christopher, "A pseudospectral method for solving optimal control problem of a hybrid tracked vehicle," Applied energy, vol. 194, pp. 588­595, 2017.
[28] Y. Liu, Z. Li, Z. Lin, K. Zhao, and Y. Zhu, "Multi-objective optimization of energy management strategy on hybrid energy storage system based on radau pseudospectral method," IEEE Access, vol. 7, pp. 112 483­ 112 493, 2019.
[29] N. Robuschi, C. Zeile, S. Sager, and F. Braghin, "Multiphase mixedinteger nonlinear optimal control of hybrid electric vehicles," Automatica, vol. 123, p. 109325, 2021.
[30] P. Bonami, L. T. Biegler, A. R. Conn, G. Cornue´jols, I. E. Grossmann, C. D. Laird, J. Lee, A. Lodi, F. Margot, N. Sawaya et al., "An algorithmic framework for convex mixed integer nonlinear programs," Discrete Optimization, vol. 5, no. 2, pp. 186­204, 2008.
[31] R. H. Byrd, J. Nocedal, and R. A. Waltz, "Knitro: An integrated package for nonlinear optimization," in Large-scale nonlinear optimization. Springer, 2006, pp. 35­59.
[32] M. Diehl, "Lecture notes on numerical optimization," 2016. [33] S. Sager, Numerical methods for mixed-integer optimal control problems.
Der Andere Verlag To¨nning, 2005. [34] J. T. Betts, Practical methods for optimal control and estimation using
nonlinear programming. SIAM, 2010. [35] A. Vishwanath, H. Anwar, A. Chunodkar, and Q. Ahmed, "Compre-
hensive energy footprint benchmarking of strong parallel electrified powertrain," arXiv preprint arXiv:2106.00243, 2021. [36] A. V. Rao, "A survey of numerical methods for optimal control," Advances in the Astronautical Sciences, vol. 135, no. 1, pp. 497­528, 2009. [37] L. Biegler, Nonlinear Programming: Concepts, Algorithms, and Applications to Chemical Processes, ser. MOS-SIAM Series on Optimization. Society for Industrial and Applied Mathematics, 2010. [38] J. A. E. Andersson, J. Gillis, G. Horn, J. B. Rawlings, and M. Diehl, "CasADi ­ A software framework for nonlinear optimization and optimal control," Mathematical Programming Computation, vol. 11, no. 1, pp. 1­36, 2019.

[39] V. Leek, "An optimal control toolbox for matlab based on casadi," https: //www.yoptimization.com/, 2016.
[40] HSL, "A collection of fortran codes for large-scale scientific computation," http://www.hsl.rl.ac.uk/, 2007.
[41] L. Gurobi Optimization, "Gurobi optimizer reference manual," http:// www.gurobi.com/, 2021.
[42] O. Sundstrom and L. Guzzella, "A generic dynamic programming matlab function," in 2009 IEEE control applications,(CCA) & intelligent control,(ISIC). IEEE, 2009, pp. 1625­1630.
[43] "Nrel drivecat - drive cycle analysis tool. national renewable energy laboratory," www.nrel.gov/transportation/drive-cycle-tool, 2020.

