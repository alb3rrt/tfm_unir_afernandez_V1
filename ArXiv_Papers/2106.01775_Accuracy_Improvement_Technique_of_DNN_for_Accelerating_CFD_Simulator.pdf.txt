Accuracy Improvement Technique of DNN for Accelerating CFD Simulator
Yukito Tsunoda1,3, Toshihiko Mori1, Hisanao Akima1, Satoshi Inano1, Tsuguchika Tabaru1, and Akira Oyama2,3
1 Fujitsu Limited, Kawasaki, Kanagawa, Japan
2 Japan Aerospace Exploration Agency, Sagamihara, Kanagawa, Japan
3 University of Tokyo, Bunkyo-ku, Tokyo, Japan
There is a Computational fluid dynamics (CFD) method of incorporating the DNN inference to reduce the computational cost. The reduction is realized by replacing some calculations by DNN inference. The cost reduction depends on the implementation method of the DNN and the accuracy of the DNN inference. Thus, we propose two techniques suitable to infer flow field on the CFD grid. The first technique is to infer the flow field of the steady state from the airfoil shape. We use the position on the coordinates of the grid point and the distance from the surface of the airfoil as input information for the DNN. The second method uses the customized mean square error as a loss function. The size of the associated area for each grid point was multiplied by the square error. This method compensates for the effect caused by the size of the associated area of nonuniform allocation of grid points. The evaluation results show that the CFD incorporated first technique achieves 1.7x speedup against the CFD without DNN, while maintaining equivalent result quality. By implementing the second technique, the CFD realized further 2.3x speed up against the CFD with first technique only.
I. Nomenclature
AoA = angle of attack  = density nondimensionalized by the density of ambient u = velocity of x direction nondimensionalized by the sound speed of ambient condition v = velocity of y direction nondimensionalized by the sound speed of ambient condition w = velocity of z direction nondimensionalized by the sound speed of ambient condition e = total energy nondimensionalized by density and sound speed of the ambient condition p = pressure nondimensionalized by density and sound speed of the ambient condition  = gas constant J = Jacobian CL = lift coefficient CD = drag coefficient Q = conservative variable vector E = advection flux vector of x direction F = advection flux vector of y direction G = advection flux vector of z direction
1

II. Introduction
Multi-objective evolutionary algorithms (MOEAs) have been successfully applied in various fields. MOEAs have excellent features, such as the capability to obtain the Pareto optimal solutions. In the field of aerospace engineering, this approach has been employed to optimize the design of space trajectories [1-3], mission planning of satellite operators [4], and design of rocket engines [5-8], flame deflectors [9], and aerodynamic design [10-19]. Pareto optimal solutions or suitable design candidates were obtained. In an MOEA, an evaluation of the objective function is required for each design candidate. Therefore, to optimize the aerodynamic design using an MOEA, the computational cost of computational fluid dynamics (CFD) is a serious issue. In the case of design optimization of the flame deflector, it takes 130 processors 7 hours to evaluate the performance of one design candidate [9]. Because many design candidates such as 2,500 were evaluated using CFD for optimization, the computational cost was substantial [9].
One method for reducing the computational cost is to replace the CFD with a surrogate model. There are reports of the use of a surrogate model, such as Kriging [18], a radial basis function [19], or a neural network (NN) [20]. In these reports, surrogate models were utilized to calculate the value of the objective function. Owing to this method, suitable design candidate can be obtained with realistic computational cost. Here, most often, aerodynamic performance tends to require many design variables [21]. A better design was obtained by optimization with more design variables [23]. However, for the surrogate model, the number of design variables becomes a critical factor. The number of samples required to estimate a surrogate model of several variables grows exponentially with the number of variables [21, 22]. It is difficult to use surrogate models for design optimization under many design variables. We suggest accelerating the CFD rather than utilizing a surrogate model.
There are techniques to incorporate a deep neural network (DNN) in CFD to accelerate [24-26]. In particular, one method satisfies the convergence constraints of the original physics solver [26]. In this method, the procedure of the CFD incorporating the DNN inference is performed as follows: The CFD procedure is performed in some initial steps (warm-up CFD stage). Subsequently, the DNN infers the flow field of the steady state from the flow field of the warmup CFD (DNN inference stage). Next, the CFD procedure is performed again from the inferred flow field of the DNN (main CFD stage). In this way, some iterative CFD computations are replaced by DNN inference. Consequently, the computational cost is reduced. In addition, the main CFD stage refines the error caused by DNN inference. Therefore, this method succeeded in eliminating the difference between the output of the CFD and the output of the standard CFD [26].
Here, we would like to address two issues based on the CFD method to obtain further improvements. 1: The warm-up CFD stage is performed by starting the CFD method from a uniform flow field. However, we anticipate that simulation failures may sometimes occur at this stage. We anticipate that this is caused by a drastic change the flow field occurs at initial stage by starting this uniform flow field. Therefore, we aim to eliminate this warm-up CFD stage. 2: The number of iterations of the main CFD stage depends on the accuracy of the DNN inference. The computational cost largely depends on the number of iterations. Therefore, we attempted to further improve the accuracy of the flow field of the DNN inference. We propose two techniques to overcome these issues. The first technique is to directly infer the flow field of the steady state from the shape of the design candidate. The position on the coordinates of the grid point and the distance from the surface of airfoil were used as the input information of the DNN. This method eliminates the process of the warm-up CFD stage. The second technique is to use a customized mean square error (MSE) as a loss function for DNN training. The size of the associated area was multiplied by each square error. In CFD, the evaluation grid points are usually nonuniformly located in the coordinate system. In this case, the grid points located in the sparse region have a large associated region. The influence of the grid points located in the sparse region is proportional to the size of the region. Therefore, the error on the grid point located in the sparse region also has a significant influence. The customized MSE compensates for the effect of the size of the associated area for each grid point. Consequently, the accuracy of the total flow field was improved. We proposed these new techniques to improve the CFD method accelerated by incorporating DNN inference. The property using our techniques was evaluated. The assumed application optimizes the parameters of the airfoil shape. Various airfoil shapes were utilized to evaluate their performance. The airfoil shapes were created based on the PARSEC parameters [17, 18, 27]. The CFD with the DNN incorporated our first technique was evaluated. The evaluation results show that the CFD with the DNN incorporated our first technique achieves 1.7× speedup against the CFD without DNN inference. Besides, we succeed in eliminating warm-up CFD stage used in the CFD in the previous research [26]. The CFD with the DNN incorporated both the first and the second technique was evaluated, next. The evaluation results show that this CFD achieves a 3.9× speedup compared to the standard CFD. This result shows that further speed up as 2.3× is realized with the second technique.
2

III. Background: Standard CFD and its issues

A numerical solution of fluid dynamics can be obtained by solving the Navier-Stokes equations. The Navier-Stokes

equations in the Cartesian coordinate system are expressed here. A nondimensional form was utilized in this study

[28].

   

 +  +  +  = 0

(1)











2 + 





 =  ,  =  ,  = 2 +  ,  = 

(2)







2 + 

[]

[( + )]

[( + )]

[( + )]

=

(

-

1)

{

-

1 2

(2

+

2

+

2)}

(3)

where "" is the nondimensional density; "u," "v," and "w" are the nondimensional velocities of the x, y, z directions, respectively; "e" is the nondimensional total energy per unit volume; and "p" is the nondimensional pressure. The shear stress term caused by the viscosity is omitted in this equation to simplify the explanation. As shown in equations (1)­(3), the Navier-Stokes equations consist of partial differential equations. These differential equations were solved using the finite difference method (FDM) through temporal and spatial discretization. The flow state at each time point is expressed by the flow field of each discretized time step. This flow field is expressed by the physical quantities of discretized grid points. The flow field converges to a specific state after a sufficient number of time steps. This converged flow field can be treated as a steady-state flow field. In other words, it is necessary to perform the calculation corresponding to one time step many times to solve the flow field of the steady state. In addition, CFD needs to be performed in a vast area to obtain accurate results. Simultaneously, a large velocity gradient is observed near the surface of the airfoil. Therefore, the grid points must be deployed finely. As a result, the number of grid points increased significantly. This large number of grid points increases the computational cost.
To overcome this issue, a body-fitted coordinate system is applied. The grid points were nonuniformly placed [29]. Only near the surface of the airfoil was finely discretized. Using these grid points, a large velocity gradient can be expressed. While, the amount of computation required can be reduced. The generalized coordinate system (j, k, l) is transformed from Cartesian coordinates (x, y, z) as follows:

  

 = j(, , ) 

   

{ = (, , ),

[] =

 

 

 

[] .

(4)

 = (, , ) 

   

[    ]

where j, k, and l are the grid point numbers. The Navier-Stokes equations in the generalized coordinate system are transformed from the Navier-Stokes equations in the Cartesian coordinate system as follows:

 

+

 

+

 

+

 

=

1 

(

+

 

+

 

)

,

(5)









uU +  

uV +  

uW +  









 = -1  ,  = -1  []

 +  

U +  


,  = -1



+  


,



=

-1

V +  




+

 


,(6)

W +  


[ ( + ) ]

[ ( + ) ]

[ ( + ) ]

where J is the Jacobian of the transformation from (x, y, z) to (j, k, l).

3

                   = 1/ (   +    +    -    -    -   ) . (7) Owing to the generalized coordinate system, the generalized coordinate system allows CFD to obtain sufficiently accurate solutions with realistic computational costs. However, the computational cost is still large for some applications, such as design optimization. With standard CFD, the flow field of the uniform state is often employed as the initial state because of its ease of use. However, it takes many time steps to vary the flow field from the initial state to the steady state due to the large difference between the initial state and the steady state. This difference is a main factor in the high computational cost. Therefore, the difference between the flow field of the initial state and the flow field of the steady state should be reduced to suppress the time steps.

IV. Approach to improve the CFD incorporating the DNN inference

We developed a new approach to the accelerated CFD method by incorporating DNN inference. The computational cost is suppressed by starting the CFD from a flow field near the steady state. This flow field is produced by the DNN inference. The processed image of our CFD, compared with the other reported CFD, is shown in Fig. 1. The shape of the design candidate was utilized in the DNN input. This flow field was created using DNN inference. Some iterative calculations of CFD are replaced by DNN inference. Consequently, the computational cost of the CFD can be suppressed. In addition, the warm-up CFD stage, starting from the uniform flow field, can be eliminated. We anticipate that simulation failure may sometimes occur at this warm-up CFD stage. However, we can avoid this possibility.

A. Input information of DNN The DNN needs to infer the flow field of the initial state of the CFD from the shape of the design candidate. The allocation of grid points depends on the shape of the design candidate. Therefore, information about the positions of the grid points also includes information about the shape. For these reasons, the position of each grid point can be applied as input information for the DNN. The procedure for creating the input information is shown in Fig. 2. Both "x", "y" coordinates and distance from the surface of airfoil "L" of each grid point were employed as the input

(a) CFD without DNN (Standard CFD)

Grid

Initial state Time step 1

Time step 2

Time step 3

Time step 4

Output

Airfoil

Uniform state flow field

Iterative calculation

(b) Reported CFD with DNN (Method of reference [26])

Grid

Initial state Time step 1

Initial state

Steady state Output

Airfoil

Uniform state Warmup

flow field

flow field

Warm-up CFD (c) CFD with our DNN (This research)
Grid

Inferred

flow field DNN Inference

Inferred flow field

Steady state

Main CFD

Initial state Time step 4 Output

Airfoil

Airfoil shape

DNN Inference

Inferred flow field

Steady state

Main CFD

Fig. 1. Process image of the CFD simulator without DNN (a), reported CFD with the DNN (b) and CFD

with our DNN. In CFD with our DNN, a steady state flow field is inferred by the DNN, and the CFD is

performed from this inferred flow field.

4

y k = kmax

Grid point

j=jmax

k k=1 L
Airfoil

Grid point No. { j, k }

Input ( x, y, L )

j = jmax

Separate line

j

j = 1

k
{ j, k }

j x
(a) Deployment of Grid points

j=1

x

yL

(b) Input information of DNN

Fig. 2. DNN architecture and input-output information. The grid point of CFD is placed around the evaluation airfoil (a). Grid point {j,k} are treated as the pixel of the image. The variables "x", "y", and "L" of grid point is used as an input of DNN (b).

Input
y

Output

Conv

y

Airfoil x
Grid point
Grid point No. { j, k } Input (x, y, L)

Conv Conv Add Conv Conv Add

ReLU

ReLU

Airfoil
x
Velocity of airflow Grid point No. { j, k } Output (, u, w, e)

x yL

8

x

64

x

4 64

x

32

x

1288

x

64

x

64

16 x 128 x 32

16 x 128 x 32

32 x 256 x 16

32 x 256 x 16

64 x 512 x 8

64 x 512 x 8

 uve

Encoder

Decoder

Fig. 3. Architecture of the DNN used to infer the flow field. The airfoil shape and the placement of

the grid points are used to input of the DNN. The DNN is composed of ResNet. The output is flow

variables such as density "", velocity "u", "v", and energy "e" on each Grid point.

information. The flow state is determined by the relative position of the airfoil. The information about the positions of the "x" and "y" coordinates is used to determine the relative direction against the airfoil. The distance information "L" determines the relative distance from the surface of the airfoil. This distance information supplies the information to the DNN for detection near the surface of the airfoil.
The grid points concerning the shape were treated as pixels in the image. The grid point {j, k} is allocated to pixel {j, k} in the image. The input information of the grid point {j, k} is the x coordinate, y coordinate, and distance from the airfoil L. The output information of the grid point is the value of the flow variables, such as density ""; velocity of the x, y directions "u", "v"; and energy "e".

B. Network Design and Architecture A residual neural network (ResNet) was employed as the DNN architecture to infer the flow field. ResNet has shown remarkable performance in image classification [30, 31]. The architecture of the DNN utilized to infer the flow field is shown in Fig. 3. The DNN consists of an encoder and a decoder. In the encoder part, the features of the input shape were extracted. In the decoder part, the flow field was inferred based on the extracted features. The convolutional layers are used to extract the features of the input image. The encoder and decoder are composed of four units. Each unit includes convolutional and shortcut connections.

5

C. Customized loss function The loss function used to train the DNN was customized to infer the flow field for the nonuniform allocation of grid points. In the training stage, the normal MSE is usually applied for a loss function, as in previous research [26]. The equation for the loss function using the normal MSE is expressed as follows:

2

( 1) =  (  ((, , , ) - (, , v, )) ),

(8)

,

where "j, k" is the number of grid points {j, k}; Ap(, u, v, e) means the inferred values of the physical quantities.

At(, u, v, e) means the ground truth values of the physical quantities. At(, u, v, e) calculated using CFD. "", "u",

"v", and "e" are the physical quantities that represent the flow states. All errors at every grid point are suppressed

equally with this loss function.

However, CFD usually uses nonuniform allocation of grid points. Therefore, the associated area, depending on

each grid point, is also nonuniform. The physical quantities of grid points in a sparse area affect large areas. As a

result, the error on these grid points is proportionally large. To reduce this effect, the error value is multiplied by the

size of the associated area related to each grid point, which is realized through the customization of the loss function

used in the DNN training. The customized loss function is expressed as follows:

2

( 2) =  (  (, ) ((, , , ) - (, , , )) ) ,

(9)

,

where S(j, k) is the size of the associated area for each grid point. The effect of the nonuniform allocation of the

grid point is canceled by multiplying the size of the associated area by the square error of each grid point. Here, the

"1/(Jacobian)" presented in Section III is generally equivalent to the size of the associated area of the unit grid point.

Therefore, "1/(Jacobian)" is applied as S(j, k) in this study.

V. Experimental setup

The objective of this study is to suppress the computational cost of CFD utilized for design optimization. The design optimization of a 2-dimensional airfoil shape was selected as the assumed sample application. The airfoil shapes of the design candidates were produced based on the PARSEC parameter in this case. The airfoil flow computations are performed at a Reynolds number of 3,000,000 and Mach 0.30 in this study. The evaluation was performed at an AOA of 2 degrees.
We prepared the design candidate using a random number for the PARSEC parameter. A total of 210 designs were prepared as the airfoil shapes of the design candidates. A total of 180 designs of 210 designs were used to train the DNN. The training dataset was generated by solving the standard CFD. The training dataset comprised 180 samples, including 36 samples for validation. The batch sizes for the training were 8, and the learning rate was 1.0e-3. In the training stage, the normal MSEs or customized MSE are employed as the loss functions to compare the results.
The other 30 designs were applied to evaluate both the DNN part and the performance of the CFD with the DNN. The result of the standard CFD is the baseline. Therefore, these 30 designs were evaluated using standard CFD. The accuracy of the DNN inference was evaluated using the result of the standard CFD. The reduction in the computational cost of our CFD with the DNN was also evaluated using the results of the standard CFD.
In this study, LANS3D was employed as the CFD simulator [32]. The simulator calculates the flow field by solving the compressible Navier-Stokes equations. The DNN was implemented using Keras [33] and a TensorFlow GPU 1.13 backend. The CFD simulation was run on an Intel Xeon E5-2690 (2.90 GHz). DNN training was performed on the dual NVIDIA Tesla P100 GPU.

VI. Results

The performance of our CFD incorporated with DNN inference was evaluated. First, we evaluated the characteristics of the DNN unit. We then evaluated the entire CFD model incorporated with the DNN inference. 30 design candidates were evaluated to confirm the effects of individual differences. First, the evaluation results of one design candidate is shown as a sample. Second, the evaluation results of the 30 design candidates are shown.

A. Characteristics of DNN unit We evaluated the flow field of the DNN inference against that of the steady state. The computational cost of the main CFD depends on the difference between the flow field of the DNN inference and that of the steady state. The

6

accuracy of DNN inference should be improved to reduce the computational cost. The objective of this study is to suppress the computational cost of CFD by using the flow field inferred by the DNN. Therefore, the accuracy of DNN inference is an important criterion.
A-1 DNN characteristics depending on the input information We evaluated the characteristics of the DNN by inferring the flow field from the shape of the design candidate. The DNN characteristics, depending on the input information, were evaluated to determine the input variables. The DNN is trained using normal MSE, as in the reported research [26]. The value of the normal MSE is also used as a criterion for accuracy. We evaluated the effect of using both "x", "y" coordinates and distance "L" as the input information. Figure 4 shows the inferred flow field, depending on the input information. The flow field is inferred only from the distance from the surface of airfoil "L" (Fig. 4(a)), only from the positions of coordinates of the grid point "x", "y"(Fig. 4(b)), and from both the position of the coordinates and the distance (Fig. 4(c)). The MSE value is 6.2e-3, with the flow field inferred only from the distance. The MSE value is 3.5e-3, with the flow field inferred only from the coordinates. Here, the MSE value is reduced to 2.3e-3 with the flow field inferred from both the coordinates and distance. We confirm the effect of using both the coordinates and distance as inputs to the DNN.

Velocity of airflow (Mach)
0.25 0.3 0.35

MSE: 6.2e-3
(a) Inferred from distance

MSE: 3.5e-3
(b) Inferred from coordinates

MSE: 2.3e-3

x direction

(c) Inferred from (d) CFD result

both distance

(Ground truth)

and coordinates

Fig. 4. Inferred flow field depending on the input information. The figure shows the flow velocity of xdirection. The flow field is inferred from the distance from the airfoil (a), from the position on coordinates (b), both the position on coordinates and the distance (c), and the CFD result (d).

A-2 Characteristics of DNN trained by the normal MSE (DNN 1) We applied both the coordinates and distance as inputs of the DNN. The normal MSE (equation (8)) is utilized as a loss function to train the DNN, first (DNN 1). Figure 5 (a), (d) shows the flow field inferred by the DNN 1. Here, the ground truth is the result of standard CFD. Figure 5 (c) and (f) show the flow field of standard CFD. The flow field inferred by DNN 1 is close to that of CFD in the region near the airfoil. However, in the region far from the airfoil, some differences were observed between the flow field inferred by DNN 1 and flow field calculated by CFD.

1.0

1.0

1.0

Near the airfoil

Airfoil

Airfoil

Airfoil

Velocity of airflow
(Mach) 0.25 0.3 0.35

(a) Inferred by DNN 1 (b) Inferred by DNN 2 (c) CFD result (Ground truth)

50.0

50.0

50.0

Whole simulation area

Airfoil x direction

Airfoil x direction

Airfoil

Velocity of airflow
(Mach) 0.299 0.3 0.301

x direction

(d) Inferred by DNN 1 (e) Inferred by DNN 2 (f) CFD result (Ground truth)
Fig. 5. Inferred flow field with DNN and the CFD result. The figure shows the flow velocity of x-direction. Scale of the distance is nondimensionalized by the chord length of airfoil. The flow fields near the surface of the airfoil (a), (b), (c) and the whole area (d), (e), (f) are shown.

7

The normal MSE is employed as a loss function to train the DNN. In this case, the DNN was trained to equally suppress errors in physical quantities on each grid point. Therefore, the inference errors on each grid were almost equal. However, the size of the associated area for each grid point was not uniform. When the size of the associated area is large, the inference error is equivalently large. The grid points are sparsely allocated in the region far from the airfoil, that is, the associated area of this grid point is large. Thus, the inference error far from the airfoil is substantially large, which explains why the inference error far from the airfoil is large. The effect of the size of the associated area for each grid point needs to be compensated to overcome this issue.

A-3 Characteristics of DNN trained by the customized MSE (DNN 2) We applied a customized loss function to improve the flow field in the region far from the airfoil. The customized MSE (equation (9)) instead of the normal MSE is applied to train the DNN (DNN 2). Figure 5 (b) and (e) show the flow field inferred by DNN 2. The issue caused by the size of the associated area for each grid point was compensated by this method. The flow field inferred by DNN 2 is close to that of the CFD in the region near the airfoil and far from the airfoil.

B. Evaluation results of our CFD The feature of our CFD method enables the suppression of the computational cost. And yet, there is no difference between the results of the standard CFD and those of our CFD. Therefore, we obtained the results using standard CFD and our CFD. We then confirm that the results are the same. Subsequently, we evaluated the effect of suppressing the computational cost of our CFD.
B-1 Accuracy of the results of our CFD method We evaluated the results using the standard CFD, our CFD with DNN 1, and our CFD with DNN 2. We compared the flow field depending on the iterative number of the main CFD. The flow field of one design candidate is shown in Fig. 6. The flow field at 250,000 steps with standard CFD is the correct value of the steady state. As shown in the flow field at 250,000 steps, the flow field of the steady state is the same regardless of the CFD. On the other hand, the iterative number required to achieve a steady state depends on the CFD. We confirmed that the results were the same regardless of the CFD; this was verified using the value of the objective function. The value of CD at steady state is one of the major objective function of the design candidate [23]. Therefore, the difference against the value of CD at the steady state was employed as a criterion in this study. Figure 7 shows the CD values calculated from each flow field against the number of iterative calculations. The value of CD at the steady state solved by standard CFD is the correct value. As shown in Fig. 7, the value of CD also converges to the same value regardless of the CFD method.

(a) Standard CFD

Steady state

Airfoil 0 step

1,000 step

(b) CFD with our DNN1

Airfoil

0 step

1,000 step

(c) CFD with our DNN2

Airfoil

Velocity of airflow (Mach)
0.299 0.301

10,000 step

20,000 step 50,000 step 100,000 step 250,000 step Steady state Steady state

10,000 step

Velocity of airflow (Mach)
0.299 0.301
20,000 step 50,000 step 100,000 step 250,000 step
Steady state Steady state Steady state Steady state
Velocity of airflow (Mach)
0.299 0.301

0 step

1,000 step 10,000 step 20,000 step 50,000 step 100,000 step 250,000 step

Fig. 6. Flow field depending on the iterative number of the CFD (a) Standard CFD, (b) CFD with our DNN1, and (c) CFD with our DNN2. The figure shows the flow velocity of x-direction. The flow field of 250,000 step indicates the steady state flow field.

8

0.013 0.0129

(a) Standard CFD (b) CFD with our DNN1 (c) CFD with our DNN2

Drag coefficient (CD)

0.0128 0.0127

1 count

CD value at steady state

0.0126

0.0125 0

50000 100000 150000 200000 250000

Iterative number (steps)

Fig. 7. CD value calculated from the Flow field depending on the iterative number of the CFD (a) Standard CFD, (b) CFD with
our DNN1, and (c) CFD with our DNN2.

Time ( hour )

Remaining 820 design

DNN training

Initial 180 design

500 475 hour

400

342 hour

300

200

206.7 hour

100

0 Stan1dard Using2CFD Usin3g CFD CFD with our DNN1 with our DNN2

Fig. 9. Comparison result of estimate total computational time

Sample 1

Sample 2

Sample 3

Sample 4

Sample 5

Sample 6

The number of time steps for convergence

140000 120000 100000
1.5x
80000 60000 40000
20000 12.5x
0
(a(a)) (b(b) ) ((cc))

140000 120000 100000 80000
1.5x
60000
40000 2.9x
20000 0
(a(a)) (b(b) ) ((cc))

140000

120000

100000

80000

60000

2.3x

40000

20000 7.9x

0
(a(a)) (b(b)) (c(c))

140000

120000

1.1x

100000

80000

60000

40000 4.5x
20000

0
(a(a)) (b(b)) (c(c))

140000 120000
100000 1.35x1.3x
80000 60000 40000 20000
0
(a(a)) (b(b)) (c(c))

140000

120000

100000

80000

60000

2.1x

40000
5.3x
20000

0
(a(a)) (b(b)) (c(c))

Fig. 8. The number of the time steps to the convergence of various airfoil shape. The upper figures show the shapes of evaluation performed, and the lower figures show the evaluation results of each shape. (a) CFD with our DNN 2, (b) CFD with our DNN 1, (c) CFD without DNN (Standard CFD)

B-2 Suppression of the computational cost of our CFD method We evaluated the effect of reducing the computational cost of our CFD method. The difference against the value of CD at steady state was applied as a criterion. The value of CD at 250,000 steps solved by the standard CFD method was used as a reference for a correct value. The value of CD, depending on the number of iterations, is calculated as shown in Fig. 7. The value of CD below ±0.00005 (1 count) against the reference was regarded as a steady state. The computational cost is proportional to the number of iterations required to achieve this condition. Therefore, the number of iterations required to achieve this condition is defined as the computational cost in this section. In case the sample design candidate is evaluated in Fig. 7, the number of iterations is 121,000 steps with the standard CFD, 80,400 steps with the CFD with DNN 1, and 9,700 steps with the CFD with DNN 2. The number of iterations depends on the design candidate. Therefore, the number of iterations was evaluated for all 30 design candidates. Figure 8 shows the results of the six examples. As shown in these results, our CFD with the DNN is effective in reducing the computational cost for various design candidates. The number of iterations required to realize convergence for the 30 design candidates is evaluated. The average number of iterations was 112,600 for standard CFD, 65,600 for CFD with DNN 1, and 29,000 for CFD with DNN 2. The CFD with DNN 2 is accelerated by a factor of 3.9× against the standard CFD. The CFD with DNN 2 is accelerated by a factor of 2.3× against the CFD with the DNN 1 inference.

C. Comparison with the previous research As described in Section 6.2.1, our CFD with the DNN converges to the same results as the standard CFD. This finding also indicates that our CFD with the DNN converges to the same value as the previous CFD introduced in a previous study [26]. Therefore, this result also indicates that we succeeded in eliminating the warm-up CFD stage using our CFD.

9

VII. Estimate total computational time for design optimization
We estimated the total computational time for the case in which design optimization was performed using our CFD with the DNN. To apply our CFD with the DNN, the DNN training process needs to be performed during the entire process. Therefore, the overhead time of this process must be considered. The estimation is performed with the case of design optimization with 1,000 design candidates as an example. DNN training was performed with 180 design candidates in this study. Therefore, the entire flow of design optimization is listed as follows:
(1) 180 design candidates were evaluated using standard CFD. These 180 results were used for both the evaluation of the objective function and DNN training data.
(2) DNN training was performed using these 180 results. (3) The remaining 820 design candidates were evaluated using our CFD with the DNN. (4) A suitable design was selected based on the results of all 1000 design candidates.
A. 7.1 Execution time of each process The execution time of our proposed method is evaluated. The execution time per design candidate is 10.5 hours at
1 core for standard CFDs. The execution time per design candidate is 2.7 hour at 1 core for our CFD with DNN 2. It takes 9.5 hour to train the DNN. It takes less than 1 minute to predict the flow field by the trained DNN with a 1 core central processing unit (CPU). The execution time of DNN inference is negligible compared to that of CFD. Therefore, the simulation times of the CFD part are regarded as the total execution time of our CFD with DNN 2.
B. 7.2 Estimate time of entire workflow of optimization We estimated the total computational time for the case of the 20 core CPU. The estimated times are shown in Fig.
9. With the 20 core CPU, it takes 475 hours with standard CFD. And, it takes 206.7 hours with our CFD for the entire workflow.
VIII. Conclusions and Future Work
We proposed new techniques to improve the CFD accelerated by incorporating DNN inference. We introduced two techniques for the DNN part. The first technique is using the location information of the grid point for CFD as the input of the DNN. Both the "x", "y" coordinates and distance from the surface of airfoil "L" of the grid point is employed as the information of each grid point. The evaluation results show that the CFD with the DNN incorporated our first technique achieves 1.7× speedup against the CFD without DNN inference. Besides, we confirmed our CFD with the DNN converges to same result of the standard CFD. This result shows that the CFD with DNN incorporated our first technique is effective to reduce the computational cost likewise the CFD in the previous research [26]. In addition, we succeed in eliminating warm-up CFD stage used in the CFD in the previous research [26]. We anticipate that simulation failures may sometimes occur at this stage. This method eliminates the possibility of this failure. The second technique is using the customized MSE as a loss function to train the DNN. The size of the associated area for each grid point is multiplied by each square error to make the effect of each grid point equal. With these methods, the total flow field inferred by the DNN was improved. Consequently, the computational cost of the main CFD can be reduced. The CFD with the DNN incorporated our second technique is accelerated by a factor of 3.9× compared to the standard CFD. This result shows that further speed up as 2.3× is realized by implementing the second technique. This CFD can suppress the simulation time for various airfoil shapes. Therefore, this CFD is promising for reducing the total time required for design optimization.
In this study, the evaluation was performed on one CFD simulator, that is, LANS3D. However, this method is not specific for this CFD method. Our method can be applied to all CFD simulators, starting with the assigned flow field. Furthermore, our method can be applied to all DNNs used to infer the flow field of the CFDs. For example, the reported CFD with the DNN shown in reference [26] uses the normal MSE as a loss function for training the DNN part. Therefore, we believe that our customized MSE in our DNN 2 also improves the inferred flow field of the DNN of this CFD. As a result, the reported CFD with the DNN will also be accelerated further. In the future, we will confirm that the acceleration of simulations can be realized with other CFD simulators using our method. The approach of this CFD with DNN inference is a promising technique for accelerating CFD.
References
[1] T. Watanabe, T. Tatsukawa, T. Yamamoto, A. Oyama, and Y. Kawakatsu. Design Exploration of Low-Thrust Space Trajectory Problem for DESTINY Mission. Journal of Spacecraft and Rockets, 2017 Vol.54, pp.796-807.
10

[2] V. Coverstone-Carroll *, J.W. Hartmann, W.J. Mason, Optimal multi-objective low-thrust spacecraft trajectories. Comput. Methods Appl. Mech. Engrg, 2000 pp. 387-402
[3] J. A. Englander and B. A. Conway, and T. Williams, Automated Mission Planning via Evolutionary Algorithms. Journal of Guidance Control and Dynamics, 2012 Vol.35, pp.1878-1887.
[4] G. Povéda, O. Regnier-Coudert, F. Teichteil-Königsbuch, G. Dupont, A. Arnold, J. Guerra, and M. Picard, Evolutionary approaches to dynamic earth observation satellites mission planning under uncertainty. Proceedings of the Genetic and Evolutionary Computation Conference 2019 pp. 1302­1310
[5] A. Oyama and M. Liou. Multiobjective Optimization of Rocket Engine Pumps Using Evolutionary Algorithm. Journal of Propulsion and Power, 2002 Vol.18, pp.528- 535.
[6] D. Lastomoa, H. Setiadib, and, M.R.Djalalc, Optimization pitch angle controller of rocket system using improved differential evolution algorithm. International Journal of Advances in Intelligent Informatics. 2017 Vol.3, pp. 27-34
[7] W. Zeping, W. Donghui, and Z. Weihua, P. Okolo. N, and F. Yang, Solid-Rocket-Motor Performance-Matching Design Framework. Journal of Spacecraft and Rockets, 2017 Vol.54 pp.698-707.
[8] D. Pastrone and M. R. Sentinella, Multi-Objective Optimization of Rocket-Based Combined-Cycle Engine Performance Using a Hybrid Evolutionary Algorithm. Journal of Propulsion and Power. 2009, Vol.25, pp.1140-1145.
[9] T. Tatsukawa, T. Nonomura, A. Oyama, and K. Fujii. Multi-Objective Aeroacoustic Design Exploration of Launch-Pad Flame Deflector Using Large-Eddy Simulation, 2016 Vol.53, pp.751-758.
[10] A. Oyama, M. Liou, and S. Obayashi. Transonic Axial-Flow Blade Optimization: Evolutionary Algorithms/ThreeDimensional Navier­Stokes Solver, Journal of Propulsion and Power, 2004 Vol.20 pp.612-619.
[11] A. Hacioglu. Fast Evolutionary Algorithm for Airfoil Design via Neural Network. AIAA Journal, 2007 Vol.45, pp.2196-2203. [12] E. Benini, R. Ponza, and A. Massaro. High-Lift Multi-Element Airfoil Shape and Setting Optimization Using Multi-Objective
Evolutionary Algorithms, Journal of Aircraft, 2011 Vol.48, pp.683-696. [13] H. Wang, J. Doherty, and Y. Jin, Hierarchical Surrogate-Assisted Evolutionary Multi-Scenario Airfoil Shape Optimization,
Proceeding of IEEE Congress on Evolutionary Computation, 2018. [14] A. Jahangiran, and A Shahrokhi. Aerodynamic shape optimization using efficient evolutionary algorithms and unstructured,
CFD solver, Computers & Fluids, 2011 Vol.46, pp.270-276. [15] T. Ray, and H. M. Tsai, Swarm Algorithm for Single- and Multiobjective Airfoil Design Optimization, AIAA Journal, 2004,
Vol.42, pp.366-373. [16] C. R. Collett, and P.J. Ansell, Design of an Airfoil Morphing Leading Edge for High-Lift Applications using a Genetic
Algorithm, AIAA SciTech Forum 2021-0947 [17] M. S. Khurana1, H. Winarto and A. K. Sinha. Airfoil Optimization by Swarm Algorithm with Mutation and Artificial Neural
Networks. 47th AIAA Aerospace Sciences Meeting, 2009 APA-28. [18] S. Jeong, M. Murayama, and K. Yamamoto. Efficient optimization design method using kriging model. Journal of Aircraft,
2005. Vol. 42, pp.413-420. [19] S. J. Leary, A. Bhaskar, and A. J. Keane. Global approximation and optimization using ad-joint computational fluid dynamics
codes. AIAA journal, 2004. Vol.42. pp.631-641. [20] Y. Zhang, W. Sung, and D. Mavris. Application of Convolutional Neural Network to Predict Airfoil Lift Coefficient. AIII
SciTech Forum 2018-1903. [21] R. Yondo, K. Bobrowski, E. Andrés, and E. Valero, A Review of Surrogate Modeling Techniques for Aerodynamic Analysis
and Optimization: Current Limitations and Future Challenges in Industry. Advances in Evolutionary and Deterministic Methods for Design, Optimization and Control in Engineering and Sciences. 2018 pp 19-33 [22] Wang, J. Geometric Structure of High-Dimensional Data and Dimensionality Reduction. Springer, Heidelberg, Dordrecht, London, New York, 2011 [23] J. Li, J. CaiKun Qu, Drag Reduction of Transonic Wings with Surrogate-Based Optimization. Asia-Pacific International Symposium on Aerospace Technology 2018 pp 1065-1080 [24] J. Tompson, K. Schlachter, P. Sprechmann, K. Perlin. Accelerating Eulerian Fluid SimulationWith Convolutional Networks. Proceedings of the 34th International Conference on Machine Learning 2017. pp. 3424-3433 [25] L. Zhu, W. Zhang, J. Kou, and Y. Liu. Machine learning methods for turbulence modeling in subsonic flows around airfoils. Physics of Fluids, 2019, Vol.31 pp.1-24. [26] O. Obiols-Sales, A. Vishnu, N. Malaya, and A. Chandramowliswharan, CFDNet: a deep learning-based accelerator for fluid simulations. Proceedings of the 34th ACM International Conference on Supercomputing 2020 No. 3, pp.1­12. [27] Sobieczky, H., Parametric Airfoils and Wings. Numerical Fluid Dynamics, Vol. 68, 1998, pp. 71-88. [28] Tannehill, J. C., Anderson, D. A., and Pletcher, R. H., Computational Fluid Mechanics and Heat Transfer. Taylor & Francis, Washington, D.C., 2nd ed., 1997. [29] Steger, J.L. Implicit Finite-Difference Simulation of Flow about Arbitrary Two-Dimensional Geometries. AIAA Journal, 1979 vol. 16, pp.679-686. [30] D.Han, et.al. "Deep Pyramidal Residual Networks" Proceeding of CVTR, 2017 pp. 5927-5935. [31] K. He, X. Zhang, S. Ren, J. Sun, Deep Residual Learning for Image Recognition. arXiv preprint arXiv:1512.03385 (2015). [32] K. Fujii. Developing an Accurate and Efficient Method for Compressible Flow Simulations Example of CFD in Aeronautics. The proceedings: Fifth International Conference on Nu-merical Ship Hydrodynamics. 1990. [33] A. Gulli and S. Pal. 2017. Deep learning with Keras. Packt Publishing Ltd
11

